<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<!-- EN-Revision: 22432 -->
<sect1 id="zend.layout.advanced">
    <title>Zend_Layout の高度な使用法</title>

    <para>
        <classname>Zend_Layout</classname> には、高度な使用法がいろいろあります。
        たとえばさまざまなビューの実装やファイルシステム上のレイアウトに対応させたりといったことです。
    </para>

    <para>
        主な拡張ポイントは次のとおりです。
    </para>

    <itemizedlist>
        <listitem><para>
                <emphasis>ビューオブジェクトのカスタマイズ</emphasis>。
                <classname>Zend_Layout</classname> は、
                <classname>Zend_View_Interface</classname> を実装した任意のクラスを使用できます。
        </para></listitem>

        <listitem><para>
                <emphasis>フロントコントローラプラグインのカスタマイズ</emphasis>。
                <classname>Zend_Layout</classname> に標準で含まれているフロントコントローラプラグインは、
                レイアウトを自動的にレンダリングしてからレスポンスを返します。
                これを独自のプラグインで置き換えることができます。
        </para></listitem>

        <listitem><para>
                <emphasis>アクションヘルパーのカスタマイズ</emphasis>。
                <classname>Zend_Layout</classname> に標準で含まれているアクションヘルパーは、
                ほとんどの場合にそのまま使えるでしょう。
                これは、レイアウトオブジェクト自信へのプロキシとなっています。
        </para></listitem>

        <listitem><para>
                <emphasis>レイアウトスクリプトのパス解決方法のカスタマイズ</emphasis>。
                <classname>Zend_Layout</classname> では、独自の <link
                    linkend="zend.filter.inflector">インフレクタ</link>
                を使用してレイアウトスクリプトのパス解決方法を行うことができます。
                あるいは、標準のインフレクタを設定して独自のルールを指定することもできます。
        </para></listitem>
    </itemizedlist>

    <sect2 id="zend.layout.advanced.view">
        <title>ビューオブジェクトのカスタマイズ</title>

        <para>
            <classname>Zend_Layout</classname> では、
            <classname>Zend_View_Interface</classname> を実装した任意のクラスや
            <classname>Zend_View_Abstract</classname> を継承した任意のクラスを用いて
            レイアウトスクリプトをレンダリングできます。
            独自のビューオブジェクトを単純に
            コンストラクタ/<methodname>startMvc()</methodname> のパラメータとして渡すか、
            あるいはアクセサ <methodname>setView()</methodname> で設定します。
        </para>

        <programlisting language="php"><![CDATA[
$view = new My_Custom_View();
$layout->setView($view);
]]></programlisting>

        <note>
            <title>Zend_View の実装がすべて同じというわけではない</title>

            <para>
                <classname>Zend_Layout</classname> では
                <classname>Zend_View_Interface</classname> を実装した任意のクラスを使用できますが、
                その中で様々な <classname>Zend_View</classname> ヘルパー
                (特にレイアウトヘルパーや
                <link linkend="zend.view.helpers.initial.placeholder">プレースホルダ</link>
                ヘルパー)
                が使用できなければ問題となることもあるでしょう。
                これは、<classname>Zend_Layout</classname>
                がオブジェクトの中の変数を自分自身と
                <link linkend="zend.view.helpers.initial.placeholder">プレースホルダ</link>
                で使えるようにしているからです。
            </para>

            <para>
                これらのヘルパーをサポートしていない <classname>Zend_View</classname>
                の実装を使用する場合は、レイアウト変数をビューに取り込む方法を見つける必要があります。
                たとえば <classname>Zend_Layout</classname> オブジェクトを継承して
                <methodname>render()</methodname> メソッドにビューへの変数を渡すようにするか、
                あるいは独自のプラグインクラスを作成して
                レイアウトのレンダリングの前に変数を渡すようにするといった方法があります。
            </para>

            <para>
                あるいは、もしあなたの使用するビュー実装が何らかのプラグイン機構をサポートしているのなら、
                'Zend_Layout' プレースホルダ経由で
                <link linkend="zend.view.helpers.initial.placeholder">
                プレースホルダヘルパー</link>
                を使用して変数にアクセスできます。
            </para>

            <programlisting language="php"><![CDATA[
$placeholders = new Zend_View_Helper_Placeholder();
$layoutVars   = $placeholders->placeholder('Zend_Layout')->getArrayCopy();
]]></programlisting>
        </note>
    </sect2>

    <sect2 id="zend.layout.advanced.plugin">
        <title>フロントコントローラプラグインのカスタマイズ</title>

        <para>
            <acronym>MVC</acronym> コンポーネントと組み合わせて使用するときに、
            <classname>Zend_Layout</classname> はフロントコントローラプラグインを登録します。
            このプラグインは、ディスパッチループを抜ける前の最後のアクションで
            レイアウトをレンダリングします。
            ほとんどの場合はデフォルトのプラグインで十分でしょうが、
            もし独自のプラグインを作成したい場合は、
            作成したプラグインクラスの名前を
            <methodname>startMvc()</methodname> メソッドの
            <property>pluginClass</property> オプションで指定します。
        </para>

        <para>
            ここで使用するプラグインクラスは
            <classname>Zend_Controller_Plugin_Abstract</classname>
            を継承したものでなければなりません。また、コンストラクタの引数で
            レイアウトオブジェクトのインスタンスを受け取れるようにする必要があります。
            それ以外の実装内容については自由に決めることができます。
        </para>

        <para>
            デフォルトのプラグインは
            <classname>Zend_Layout_Controller_Plugin_Layout</classname>
            です。
        </para>
    </sect2>

    <sect2 id="zend.layout.advanced.helper">
        <title>アクションヘルパーのカスタマイズ</title>

        <para>
            <acronym>MVC</acronym> コンポーネントと組み合わせて使用するときに、
            <classname>Zend_Layout</classname> はアクションコントローラヘルパーを
            ヘルパーブローカに登録します。デフォルトのヘルパーである
            <classname>Zend_Layout_Controller_Action_Helper_Layout</classname>
            は、レイアウトオブジェクトのインスタンス自身に対する
            (何もしない) プロキシとしてはたらきます。
            たいていの場合はこれで十分でしょう。
        </para>

        <para>
            独自の機能を書きたい場合は、
            <classname>Zend_Controller_Action_Helper_Abstract</classname>
            を継承したアクションヘルパークラスを作成します。
            そして、そのクラス名を
            <methodname>startMvc()</methodname> メソッドの
            <property>helperClass</property> オプションに指定します。
            実装の詳細は自由に決められます。
        </para>
    </sect2>

    <sect2 id="zend.layout.advanced.inflector">
        <title>レイアウトスクリプトのパス解決方法のカスタマイズ: インフレクタの使用法</title>

        <para>
            <classname>Zend_Layout</classname> は、<classname>Zend_Filter_Inflector</classname>
            を使用して確立したフィルタチェインで
            レイアウト名からレイアウトスクリプトのパスへの変換を行います。
            デフォルトで使用するルールは、まず 'Word_CamelCaseToDash'、
            その後に 'StringToLower'、そして最後にサフィックス 'phtml'
            を追加してパスを作成します。たとえば次のようになります。
        </para>

        <itemizedlist>
            <listitem><para>
                    'foo' は 'foo.phtml' に変換されます。
            </para></listitem>

            <listitem><para>
                    'FooBarBaz' は 'foo-bar-baz.phtml' に変換されます。
            </para></listitem>
        </itemizedlist>

        <para>
            これを変更するには三通りの手段があります。
            インフレクションのターゲットやビューのサフィックスを
            <classname>Zend_Layout</classname> のアクセサで変更すること、
            <classname>Zend_Layout</classname> のインスタンスに関連づけられている
            インフレクタのルールを変更すること、
            あるいは独自のインフレクタのインスタンスを作成してそれを
            <methodname>Zend_Layout::setInflector()</methodname> で渡すことです。
        </para>

        <example id="zend.layout.advanced.inflector.accessors">
            <title>Zend_Layout のアクセサでインフレクタを変更する</title>

            <para>
                デフォルトの <classname>Zend_Layout</classname> のインフレクタは、
                ターゲットやビュースクリプトのサフィックスに静的な参照を用い、
                それらの値を設定するためのアクセサを提供しています。
            </para>

            <programlisting language="php"><![CDATA[
// インフレクタのターゲットを設定します
$layout->setInflectorTarget('layouts/:script.:suffix');

// レイアウトビュースクリプトのサフィックスを設定します
$layout->setViewSuffix('php');
]]></programlisting>
        </example>

        <example id="zend.layout.advanced.inflector.directmodification">
            <title>Zend_Layout のインフレクタを直接変更する</title>

            <para>
                インフレクタは、ターゲットと (ひとつあるいは複数の)
                ルールを持っています。<classname>Zend_Layout</classname>
                が使用するデフォルトのターゲットは ':script.:suffix'
                です。':script' には登録されているレイアウト名、そして
                ':suffix' にはインフレクタの静的なルールが渡されます。
            </para>

            <para>
                たとえば、レイアウトスクリプトのサフィックスを
                'html' に変更して、MixedCase および camelCase
                形式の名前をダッシュではなくアンダースコアで区切るようにし、
                かつ小文字への変換もやめてみましょう。
                さらに、スクリプトの格納先を 'layouts'
                サブディレクトリに変更します。
            </para>

            <programlisting language="php"><![CDATA[
$layout->getInflector()->setTarget('layouts/:script.:suffix')
                       ->setStaticRule('suffix', 'html')
                       ->setFilterRule(array('Word_CamelCaseToUnderscore'));
]]></programlisting>
        </example>

        <example id="zend.layout.advanced.inflector.custom">
            <title>インフレクタのカスタマイズ</title>

            <para>
                ほとんどの場合は、既存のインフレクタを修正するだけで十分でしょう。
                しかし、さまざまな場所で別の形式のオブジェクトを使い分けたいこともあります。
                <classname>Zend_Layout</classname> はそんな場合にも対応しています。
            </para>

            <programlisting language="php"><![CDATA[
$inflector = new Zend_Filter_Inflector('layouts/:script.:suffix');
$inflector->addRules(array(
    ':script' => array('Word_CamelCaseToUnderscore'),
    'suffix'  => 'html'
));
$layout->setInflector($inflector);
]]></programlisting>
        </example>

        <note>
            <title>インフレクションを無効にできます</title>

            <para>
                インフレクションを無効にしたり有効にしたりするには、
                <classname>Zend_Layout</classname> オブジェクトのアクセサを使用します。
                これは、たとえばレイアウトビュースクリプトを絶対パスで指定したい場合などに便利です。
                また、レイアウトスクリプトを指定するためのインフレクションが特に不要な場合にも便利です。
                有効にしたり無効にしたりするには、単純に <methodname>enableInflection()</methodname> メソッドおよび
                <methodname>disableInflection()</methodname> メソッドを使用します。
            </para>
        </note>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
