<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<!-- EN-Revision: 20854 -->
<sect1 id="zend.search.lucene.advanced">
    <title>応用</title>

    <sect2 id="zend.search.lucene.advanced.format_migration">
        <title>1.6 以降でサポートするインデックスフォーマット変換</title>

        <para>
            <classname>Zend_Search_Lucene</classname> コンポーネントは、Java Lucene 1.4-1.9、2.1 そして 2.3
            形式のインデックスフォーマットに対応しています。
        </para>

        <para>
            現在のインデックスフォーマットを知るには <code>$index->getFormatVersion()</code>
            を使用します。これは、次のいずれかの値を返します。
            <itemizedlist>
                <listitem>
                    <para>
                        <constant>Zend_Search_Lucene::FORMAT_PRE_2_1</constant> は
                        Java Lucene 1.4-1.9 のインデックスフォーマットを表します。
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <constant>Zend_Search_Lucene::FORMAT_2_1</constant> は
                        Java Lucene 2.1 のインデックスフォーマット
                        (Lucene 2.2 でも使用可能) を表します。
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <constant>Zend_Search_Lucene::FORMAT_2_3</constant> は
                        Java Lucene 2.3 のインデックスフォーマットを表します。
                    </para>
                </listitem>
            </itemizedlist>
        </para>

        <para>
            インデックスの変更は、インデックスが更新されたときに <emphasis>のみ</emphasis>
            行います。インデックスの更新が行われるのは、
            新しいドキュメントがインデックスに追加された場合や
            <code>$index->optimize()</code> による最適化を手動で開始した場合です。
        </para>

        <para>
            <classname>Zend_Search_Lucene</classname> が、インデックスを上位バージョンのフォーマットに変換することがあります。
            <constant>Zend_Search_Lucene::FORMAT_PRE_2_1</constant> フォーマットの場合はこれが
            <emphasis>常に</emphasis> 起こり、
            自動的に 2.1 フォーマットに変換されます。
        </para>

        <para>
            変換作業を管理するために、対象となるインデックスフォーマットを
            <code>$index->setFormatVersion()</code> で指定できます。ここでは定数
            <constant>Zend_Search_Lucene::FORMAT_2_1</constant> あるいは <constant>Zend_Search_Lucene::FORMAT_2_3</constant>
            をパラメータとして使用します。
            <itemizedlist>
                <listitem>
                    <para>
                        <constant>Zend_Search_Lucene::FORMAT_2_1</constant> は実際には何もしません。
                        2.1 より前のバージョンのインデックスは自動的に
                        2.1 フォーマットに変換されるからです。
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <constant>Zend_Search_Lucene::FORMAT_2_3</constant>
                        は、強制的に 2.3 フォーマットへの変換を行います。
                    </para>
                </listitem>
            </itemizedlist>
        </para>

        <para>
            下位バージョンへの変換はサポートしていません。
        </para>

        <note>
            <title>重要!</title>
            <para>
                一度インデックスを上位バージョンに変換してしまうと、
                元に戻すことはできません。
                上位バージョンに変換したいけれど元に戻す可能性も残しておきたいという場合は、
                インデックスのバックアップを取得しておきましょう。
            </para>
        </note>

    </sect2>

    <sect2 id="zend.search.lucene.advanced.static">
        <title>静的プロパティとしてのインデックスの使用</title>

        <para>
            <classname>Zend_Search_Lucene</classname> オブジェクトは、
            デストラクタメソッド内で変更のコミットやリソースの後始末を行います。
        </para>

        <para>
            パラメータ <code>MaxBufferedDocs</code>
            の内容に応じて、メモリ内に追加されたドキュメントを保存したり
            新しいインデックスセグメントをディスクに書き出したりします。
        </para>

        <para>
            もし <code>MaxBufferedDocs</code> の制限に達していない場合は "保存されていない"
            ドキュメントが残ってしまい、
            これがオブジェクトのデストラクタで新しいセグメントとして保存されます。
            インデックスの自動最適化は、
            <code>MaxBufferedDocs</code>、<code>MaxMergeDocs</code> および
            <code>MergeFactor</code> の設定内容により、必要に応じて行われます。
        </para>

        <para>
            静的オブジェクトプロパティ (以下を参照ください) は、
            "スクリプトが最後まで実行された" <emphasis>後で</emphasis> 破棄されます。

            <programlisting language="php"><![CDATA[
class Searcher {
    private static $_index;

    public static function initIndex() {
        self::$_index = Zend_Search_Lucene::open('path/to/index');
    }
}

Searcher::initIndex();
]]></programlisting>
        </para>

        <para>
            にもかかわらず、静的プロパティのオブジェクトのデストラクタは正常に起動し、
            やるべきことをすべて行う可能性があります。
        </para>

        <para>
            問題が起こる可能性があるとすれば、例外処理です。
            静的オブジェクトのデストラクタでスローされた例外は、コンテキストを保持していません。
            というのも、"スクリプトが最後まで実行された後" に実行されるものだからです。
        </para>

        <para>
            おそらく、そのような場合は例外ではなく
            "Fatal error: Exception thrown without a stack frame in Unknown on line 0"
            のようなエラーメッセージが表示されるでしょう。
        </para>

        <para>
            <classname>Zend_Search_Lucene</classname> は、この問題を <methodname>commit()</methodname>
            メソッドで処理できるようにしています。これは、未保存の変更内容をすべて保存し、
            新しいセグメントを保存するために使用しているメモリを解放します。
            コミット操作は、スクリプトの実行中にいつでも何度でも行うことができます。
            <classname>Zend_Search_Lucene</classname> オブジェクトを使用して、
            コミット操作の後にもドキュメントの検索や追加、削除ができます。
            しかし <methodname>commit()</methodname> をコールすることで、
            もしそれ以降ドキュメントの追加や削除が行われていないのなら
            <classname>Zend_Search_Lucene</classname> のデストラクタは何もせず、
            例外もスローしないことが保証されます。

            <programlisting language="php"><![CDATA[
class Searcher {
    private static $_index;

    public static function initIndex() {
        self::$_index = Zend_Search_Lucene::open('path/to/index');
    }

    ...

    public static function commit() {
        self::$_index->commit();
    }
}

Searcher::initIndex();

...

// スクリプトの終了処理
...
Searcher::commit();
...
]]></programlisting>
        </para>
    </sect2>
</sect1>
