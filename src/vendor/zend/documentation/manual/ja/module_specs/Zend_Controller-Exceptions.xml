<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<!-- EN-Revision: 21684 -->
<sect1 id="zend.controller.exceptions">
    <title>MVC での例外</title>

    <sect2 id="zend.controller.exceptions.introduction">
        <title>導入</title>

        <para>
            Zend Framework の <acronym>MVC</acronym> コンポーネントは、
            フロントコントローラを使用しています。
            つまり、あるサイトに対するすべてのリクエストを
            ひとつのエントリポイントで処理するということです。その結果、
            すべての例外は最終的にフロントコントローラに到達することになります。
            開発者は、例外をここでまとめて処理できます。
        </para>

        <para>
            しかし、例外のメッセージやバックトレースの中には、
            システムの重要な情報が含まれていることがあります。
            たとえば <acronym>SQL</acronym> 文の内容やファイルの位置といった情報です。
            あなたのサイトを守るため、デフォルトでは
            <classname>Zend_Controller_Front</classname> がすべての例外を捕捉し、
            それをレスポンスオブジェクトに登録するようになっています。
            また、レスポンスオブジェクトは、
            デフォルトではそれらの例外メッセージを表示しません。
        </para>
    </sect2>

    <sect2 id="zend.controller.exceptions.handling">
        <title>例外の処理</title>

        <para>
            <acronym>MVC</acronym> コンポーネント内で例外を処理するための仕組みが組み込まれています。
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    デフォルトでは、
                    <link linkend="zend.controller.plugins.standard.errorhandler">
                    エラーハンドラプラグイン</link> が登録され、有効になっています。
                    このプラグインは、次のようなエラーを処理するように設計されています。
                </para>

                <itemizedlist>
                    <listitem><para>コントローラやアクションが存在しない場合に発生するエラー</para></listitem>

                    <listitem><para>アクションコントローラ内で発生するエラー</para></listitem>
                </itemizedlist>

                <para>
                    このプラグインは <methodname>postDispatch()</methodname>
                    プラグインとして動作し、ディスパッチャやアクションコントローラで
                    他の例外が発生していないかどうかを調べます。発生していた場合は、
                    エラーハンドラコントローラに処理を転送します。
                </para>

                <para>
                    このハンドラは大半の例外状況をカバーし、
                    コントローラやアクションが存在しない場合の対応を行います。
                </para>
            </listitem>

            <listitem>
                <para><methodname>Zend_Controller_Front::throwExceptions()</methodname></para>

                <para>
                    このメソッドに <constant>TRUE</constant> を渡すと、
                    フロントコントローラがレスポンスオブジェクトに例外をまとめたり
                    エラーハンドラプラグインを使用したりするかわりに
                    例外を自分自身で処理できるようになります。たとえば次のようになります。
                </para>

                <programlisting language="php"><![CDATA[
$front->throwExceptions(true);
try {
    $front->dispatch();
} catch (Exception $e) {
    // ここで、自分自身で例外を処理します
}
]]></programlisting>

                <para>
                    これが、自分のアプリケーションで独自の例外処理を行うための
                    もっとも簡単な方法でしょう。
                    この方法で、発生しうるすべての例外を処理できます。
                </para>
            </listitem>

            <listitem>
                <para><methodname>Zend_Controller_Response_Abstract::renderExceptions()</methodname></para>

                <para>
                    このメソッドに <constant>TRUE</constant> を渡すと、
                    レスポンスオブジェクトをレンダリングする際に
                    例外メッセージやバックトレースも表示するようになります。
                    これを行うと、アプリケーションで発生したすべての例外が表示されるようになります。
                    実際の運用環境以外でのみ使用するようにしましょう。
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>Zend_Controller_Front::returnResponse()</methodname> および
                    <methodname>Zend_Controller_Response_Abstract::isException()</methodname>
                </para>

                <para>
                    <methodname>Zend_Controller_Front::returnResponse()</methodname> に <constant>TRUE</constant> を渡すと、
                    <methodname>Zend_Controller_Front::dispatch()</methodname> はレスポンスをレンダリングせず、
                    そのまま返します。レスポンスを受け取った後で、
                    処理すべき例外があるかどうかを <methodname>isException()</methodname>
                    メソッドで調べ、その内容を <methodname>getException()</methodname> メソッドで取得します。
                    たとえば次のようになります。
                </para>

                <programlisting language="php"><![CDATA[
$front->returnResponse(true);
$response = $front->dispatch();
if ($response->isException()) {
    $exceptions = $response->getException();
    // 例外を処理します ...
} else {
    $response->sendHeaders();
    $response->outputBody();
}
]]></programlisting>

                <para>
                    <methodname>Zend_Controller_Front::throwExceptions()</methodname>
                    に比べてこの方法が優れている点は、例外を処理した後で、
                    それをレンダリングするかどうかを判断できるところです。
                    エラーハンドラプラグインとは異なり、
                    これはコントローラチェイン内で発生したすべての例外を捕捉します。
                </para>
            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.controller.exceptions.internal">
        <title>MVC で遭遇するであろう例外</title>

        <para>
            各 <acronym>MVC</acronym> コンポーネント群 -- リクエスト、ルータ、ディスパッチャ、
            アクションコントローラそしてレスポンスオブジェクト --
            はそれぞれ例外をスローします。
            条件によっては上書きされる例外もありますし、
            中には開発者がアプリケーションの構造を見直さなければならないような例外もあるでしょう。
        </para>

        <para>いくつか例を示します。</para>

        <itemizedlist>
            <listitem>
                <para>
                    <classname>Zend_Controller_Dispatcher::dispatch()</classname> は、デフォルトでは、
                    無効なコントローラがリクエストされた際に例外をスローします。
                    この例外への対処方法としては、次のふたつを推奨します。
                </para>

                <itemizedlist>
                    <listitem>
                        <para>パラメータ <property>useDefaultControllerAlways</property> を設定します。</para>

                        <para>
                            フロントコントローラかディスパッチャのいずれかで、
                            以下のディレクティブを追加します。
                        </para>

                        <programlisting language="php"><![CDATA[
$front->setParam('useDefaultControllerAlways', true);

// あるいは

$dispatcher->setParam('useDefaultControllerAlways', true);
]]></programlisting>

                        <para>
                            このフラグを設定すると、
                            ディスパッチャは例外をスローせず、
                            かわりにデフォルトのコントローラとアクションを使用するようになります。
                            この方式の欠点は、ユーザがサイトのアドレスを打ち間違えた際にも
                            ホームページが表示されてしまうことです。これは
                            サーチエンジン最適化を台無しにしてしまう可能性があります。
                        </para>
                    </listitem>

                    <listitem>
                        <para>
                            <methodname>dispatch()</methodname> がスローする例外は
                            <classname>Zend_Controller_Dispatcher_Exception</classname> で、この中には
                            'Invalid controller specified' というテキストが含まれます。
                            <link linkend="zend.controller.exceptions.handling">
                            先ほどの節</link>
                            でとりあげられているメソッドのいずれかでこの例外を捕捉し、
                            共通のエラーページあるいはホームページにリダイレクトします。
                        </para>
                    </listitem>
                </itemizedlist>
            </listitem>

            <listitem>
                <para>
                    <methodname>Zend_Controller_Action::__call()</methodname> は、存在しないアクションを
                    メソッドにディスパッチできなかった場合に
                    <classname>Zend_Controller_Action_Exception</classname> をスローします。
                    このような場合は、何らかのデフォルトアクションを
                    コントローラで使用したいことでしょう。そのためには次のようにします。
                </para>

                <itemizedlist>
                    <listitem>
                        <para>
                            <classname>Zend_Controller_Action</classname> のサブクラスを作成し、
                            <methodname>__call()</methodname> メソッドをオーバーライドします。
                            たとえば次のようになります。
                        </para>

                        <programlisting language="php"><![CDATA[
class My_Controller_Action extends Zend_Controller_Action
{
    public function __call($method, $args)
    {
        if ('Action' == substr($method, -6)) {
            $controller = $this->getRequest()->getControllerName();
            $url = '/' . $controller . '/index';
            return $this->_redirect($url);
        }

        throw new Exception('Invalid method');
    }
}
]]></programlisting>

                        <para>
                            上の例は、未定義のアクションメソッドがコールされた場合にそれをすべて受け取り、
                            そのコントローラのデフォルトアクションにリダイレクトします。
                        </para>
                    </listitem>

                    <listitem>
                        <para>
                            <classname>Zend_Controller_Dispatcher</classname> のサブクラスを作成し、
                            <methodname>getAction()</methodname> メソッドをオーバーライドして、
                            アクションが存在するかどうかを調べます。
                            たとえば次のようになります。
                        </para>

                        <programlisting language="php"><![CDATA[
class My_Controller_Dispatcher extends Zend_Controller_Dispatcher
{
    public function getAction($request)
    {
        $action = $request->getActionName();
        if (empty($action)) {
            $action = $this->getDefaultAction();
            $request->setActionName($action);
            $action = $this->formatActionName($action);
        } else {
            $controller = $this->getController();
            $action     = $this->formatActionName($action);
            if (!method_exists($controller, $action)) {
                $action = $this->getDefaultAction();
                $request->setActionName($action);
                $action = $this->formatActionName($action);
            }
        }

        return $action;
    }
}
]]></programlisting>

                        <para>
                            上のコードは、指定したアクションが
                            そのコントローラクラスに存在するかどうかを調べます。
                            存在しない場合は、デフォルトのアクションにリセットします。
                        </para>

                        <para>
                            この方式の利点は、最終的にディスパッチが行われる前に
                            透過的にアクションを変更できるとうことです。しかしこれは、
                            <acronym>URL</acronym> を打ち間違えた際にも正しくディスパッチされてしまうということでもあります。
                            これは、サーチエンジン最適化のためにはあまりよくありません。
                        </para>
                    </listitem>

                    <listitem>
                        <para>
                            <methodname>Zend_Controller_Action::preDispatch()</methodname> あるいは
                            <methodname>Zend_Controller_Plugin_Abstract::preDispatch()</methodname>
                            を使用して、無効なアクションを判別します。
                        </para>

                        <para>
                            <classname>Zend_Controller_Action</classname> のサブクラスを作成して
                            <methodname>preDispatch()</methodname> を変更することで、
                            実際にアクションをディスパッチする前に
                            コントローラ内で別のアクションに転送したり
                            リダイレクトしたりすることが可能となります。
                            このコードは、先ほど説明した <methodname>__call()</methodname>
                            をオーバーライドするコードと似たものになります。
                        </para>

                        <para>
                            もうひとつの方法としては、
                            この情報をグローバルプラグインで調べることもできます。
                            この方式の利点は、アクションコントローラとは独立しているというところです。
                            アプリケーション内でさまざまなアクションコントローラを使用しているとしましょう。
                            それらがすべて同一のクラスを継承しているとは限りません。
                            そのような場合にこの方式を使用すると、
                            さまざまなクラスに対して一貫した処理を行えます。
                        </para>

                        <para>
                            たとえば次のようになります。
                        </para>

                        <programlisting language="php"><![CDATA[
class My_Controller_PreDispatchPlugin extends Zend_Controller_Plugin_Abstract
{
    public function preDispatch(Zend_Controller_Request_Abstract $request)
    {
        $front      = Zend_Controller_Front::getInstance();
        $dispatcher = $front->getDispatcher();
        $class      = $dispatcher->getControllerClass($request);
        if (!$class) {
            $class = $dispatcher->getDefaultControllerClass($request);
        }

        $r      = new ReflectionClass($class);
        $action = $dispatcher->getActionMethod($request);

        if (!$r->hasMethod($action)) {
            $defaultAction  = $dispatcher->getDefaultAction();
            $controllerName = $request->getControllerName();
            $response       = $front->getResponse();
            $response->setRedirect('/' . $controllerName
                                  . '/' . $defaultAction);
            $response->sendHeaders();
            exit;
        }
    }
}
]]></programlisting>

                        <para>
                            この例では、
                            リクエストされたアクションがそのコントローラに存在するかどうかを調べます。
                            存在しない場合は、そのコントローラのデフォルトアクションにリダイレクトします。
                            そしてそこでスクリプトの実行を終了します。
                        </para>
                    </listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
