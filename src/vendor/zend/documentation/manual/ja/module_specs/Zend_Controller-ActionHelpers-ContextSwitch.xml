<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<!-- EN-Revision: 21824 -->
<sect3 id="zend.controller.actionhelpers.contextswitch">
    <title>ContextSwitch および AjaxContext</title>

    <para>
        <emphasis>ContextSwitch</emphasis> アクションヘルパーは、
        リクエストに対してさまざまなレスポンスを返す機能を実現するためのものです。
        <emphasis>AjaxContext</emphasis> ヘルパーは
        <emphasis>ContextSwitch</emphasis> をより特化したもので、
        レスポンスを XmlHttpRequests で返す機能を提供します。
    </para>

    <para>
        いずれかを有効にするには、コントローラに対して
        「どのアクションがどのコンテキストに対応するのか」
        を教えてやる必要があります。
        やってきたリクエストがそのアクションで有効なコンテキストである場合、
        ヘルパーが行う処理は次のようになります。
    </para>

    <itemizedlist>
        <listitem><para>
                レイアウト機能が有効な場合に、それを無効にする。
        </para></listitem>

        <listitem><para>
                別のビューサフィックスを設定し、
                コンテキストに応じて別のビュースクリプトを効率よく扱えるようにする。
        </para></listitem>

        <listitem><para>
                コンテキストに応じて適切なレスポンスヘッダを送信する。
        </para></listitem>

        <listitem><para>
                オプションで、指定したコールバックを実行して
                コンテキストの設定や後処理を行う。
        </para></listitem>
    </itemizedlist>

    <para>
        たとえば、次のようなコントローラを考えてみましょう。
    </para>

    <programlisting language="php"><![CDATA[
class NewsController extends Zend_Controller_Action
{
    /**
     * トップページは listAction() に転送します
     */
    public function indexAction()
    {
        $this->_forward('list');
    }

    /**
     * ニュースの一覧
     */
    public function listAction()
    {
    }

    /**
     * ニュースの閲覧
     */
    public function viewAction()
    {
    }
}
]]></programlisting>

    <para>
        ここで、<methodname>listAction()</methodname>
        の結果を <acronym>XML</acronym> 形式でも返せるようにしたくなったとしましょう。
        わざわざ別のアクションを作らなくても、
        <acronym>XML</acronym> でレスポンスを返すように指示できます。
    </para>

    <programlisting language="php"><![CDATA[
class NewsController extends Zend_Controller_Action
{
    public function init()
    {
        $contextSwitch = $this->_helper->getHelper('contextSwitch');
        $contextSwitch->addActionContext('list', 'xml')
                      ->initContext();
    }

    // ...
}
]]></programlisting>

    <para>
        これが何を行っているかというと、
    </para>

    <itemizedlist>
        <listitem><para>
                レスポンスヘッダ 'Content-Type' を '<filename>text/xml</filename>' にします。
        </para></listitem>

        <listitem><para>
                ビューのサフィックスを '<filename>xml.phtml</filename>' (あるいは別のサフィックスをを使っているなら
                'xml.[your suffix]') に変更します。
        </para></listitem>
    </itemizedlist>

    <para>
        さて、次は新しいビュースクリプト '<filename>news/list.xml.phtml</filename>'
        を作成しましょう。これが <acronym>XML</acronym> の作成とレンダリングを行います。
    </para>

    <para>
        あるリクエストがコンテキストスイッチを起動するかどうかを判断するために、
        このヘルパーはリクエストオブジェクト内のトークンを調べます。
        デフォルトでは 'format' というパラメータを調べることになっていますが、
        これは変更することもできます。つまり、
        ほとんどの場合は、リクエストに 'format' パラメータを追加するだけで
        コンテキストスイッチを行えるということです。
    </para>

    <itemizedlist>
        <listitem><para>
                <acronym>URL</acronym> のパラメータで指定する場合: <filename>/news/list/format/xml</filename>
                (デフォルトのルーティング方式では、アクションに続けて任意の
                キー/値 のペアを指定できたことを思い出しましょう)
        </para></listitem>

        <listitem><para>
                <constant>GET</constant> パラメータで指定する場合: <command>/news/list?format=xml</command>
        </para></listitem>
    </itemizedlist>

    <para>
        <emphasis>ContextSwitch</emphasis> では任意のコンテキストを指定できます。
        つまり (もし存在するなら) サフィックスを自由に変更したり
        送信するレスポンスヘッダを任意のものに変更したり、
        任意のコールバックで初期化や後処理を行ったりができるということです。
    </para>

    <sect4 id="zend.controller.actionhelpers.contextswitch.contexts">
        <title>デフォルトで使用できるコンテキスト</title>

        <para>
            <emphasis>ContextSwitch</emphasis> ヘルパーで
            使用できるデフォルトのコンテキストは、json と <acronym>XML</acronym> のふたつです。
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <emphasis><acronym>JSON</acronym></emphasis>。<acronym>JSON</acronym> コンテキストは、
                    'Content-Type' レスポンスヘッダを '<filename>application/json</filename>' に設定し、
                    ビュースクリプトのサフィックスを '<filename>json.phtml</filename>' とします。
                </para>

                <para>
                    しかし、デフォルトではビュースクリプトは不要です。
                    これは、すべてのビュー変数を単純にシリアライズして
                    <acronym>JSON</acronym> レスポンスを直接発行するものです。
                </para>

                <para>
                    自動 <acronym>JSON</acronym> シリアライズ機能を使わないようにすることもできます。
                </para>

                <programlisting language="php"><![CDATA[
$this->_helper->contextSwitch()->setAutoJsonSerialization(false);
]]></programlisting>
            </listitem>

            <listitem>
                <para>
                    <emphasis><acronym>XML</acronym></emphasis>。<acronym>XML</acronym> コンテキストは、
                    'Content-Type' レスポンスヘッダを '<filename>text/xml</filename>' に設定し、
                    ビュースクリプトのサフィックスを '<filename>xml.phtml</filename>' とします。
                    このコンテキスト用に、新しいビュースクリプトを作成する必要があります。
                </para>
            </listitem>
        </itemizedlist>
    </sect4>

    <sect4 id="zend.controller.actionhelpers.contextswitch.custom">
        <title>独自のコンテキストの作成</title>

        <para>
            デフォルトのコンテキストだけでは対応しきれないこともあるでしょう。
            たとえば結果を <acronym>YAML</acronym> で返したり、<acronym>PHP</acronym> のシリアライズ文字列で返したり、
            あるいは <acronym>RSS</acronym> や <acronym>ATOM</acronym> フィードで返したりといったようにです。
            <emphasis>ContextSwitch</emphasis> を使用すればそれも可能です。
        </para>

        <para>
            新たなコンテキストを追加する最も簡単な方法は
            <methodname>addContext()</methodname> メソッドを使用することです。
            このメソッドの引数は 2 つで、コンテキストの名前と
            設定の配列を指定します。設定には、以下のうちのひとつあるいは複数を指定します。
        </para>

        <itemizedlist>
            <listitem>
                <para><emphasis>suffix</emphasis>:
                ViewRenderer で登録されているデフォルトのビューサフィックスの
                前に追加するサフィックス。</para>
            </listitem>

            <listitem>
                <para><emphasis>headers</emphasis>: ヘッダ/値
                    のペアの配列で、レスポンスとともに送信したいもの。</para>
            </listitem>

            <listitem>
                <para><emphasis>callbacks</emphasis>:
                キー 'init' や 'post' を含む配列で、それぞれ
                コンテキストの初期化や後処理の際に使用する
                <acronym>PHP</acronym> コールバックを指定します。</para>

                <para>初期化コールバックは、<emphasis>ContextSwitch</emphasis> が
                コンテキストを検出した場合に実行されます。
                これを使用して、任意のロジックを実行できます。
                たとえば <acronym>JSON</acronym> コンテキストでは、
                このコールバックを使用して
                自動 <acronym>JSON</acronym> シリアライズが有効な場合に ViewRenderer
                を無効化しています。</para>

                <para>後処理はアクションの <methodname>postDispatch()</methodname>
                で発生します。これを使用して、任意のロジックを実行できます。
                たとえば <acronym>JSON</acronym> コンテキストでは、このコールバックを使用して
                自動 <acronym>JSON</acronym> シリアライズ機能が有効か無効かを調べています。
                有効な場合はビュー変数を <acronym>JSON</acronym> にシリアライズしてレスポンスに送信し、
                無効な場合は ViewRenderer を再度有効にします。</para>
            </listitem>
        </itemizedlist>

        <para>
            コンテキストを操作するメソッドには次のようなものがあります。
        </para>

        <itemizedlist>
            <listitem><para>
                <methodname>addContext($context, array $spec)</methodname>:
                新しいコンテキストを追加する。
                そのコンテキストが既に存在する場合は例外をスローします。
            </para></listitem>

            <listitem><para>
                <methodname>setContext($context, array $spec)</methodname>:
                新しいコンテキストを追加、あるいは既存のコンテキストを上書きする。
                <methodname>addContext()</methodname> と同じように指定します。
            </para></listitem>

            <listitem><para>
                <methodname>addContexts(array $contexts)</methodname>:
                複数のコンテキストを一度に追加する。配列 <varname>$contexts</varname>
                は、コンテキスト/設定 のペアの配列となります。
                既に存在するコンテキストを指定した場合は例外をスローします。
            </para></listitem>

            <listitem><para>
                <methodname>setContexts(array $contexts)</methodname>:
                新しいコンテキストを追加、あるいは既存のコンテキストを上書きする。
                <methodname>addContexts()</methodname> と同じように指定します。
            </para></listitem>

            <listitem><para>
                <methodname>hasContext($context)</methodname>:
                そのコンテキストが存在する場合に <constant>TRUE</constant>、存在しない場合に
                <constant>FALSE</constant> を返します。
            </para></listitem>

            <listitem><para> <methodname>getContext($context)</methodname>:
                    指定した名前のコンテキストを取得する。
                    <methodname>addContext()</methodname> で使用する設定とあわせた配列を返します。
            </para></listitem>

            <listitem><para>
                <methodname>getContexts()</methodname>: すべてのコンテキストを取得する。
                コンテキスト/設定 のペアの配列を返します。
            </para></listitem>

            <listitem><para>
                <methodname>removeContext($context)</methodname>:
                指定した名前のコンテキストを削除する。成功した場合に <constant>TRUE</constant>、
                そのコンテキストが見つからない場合に <constant>FALSE</constant> を返します。
            </para></listitem>

            <listitem><para>
                <methodname>clearContexts()</methodname>: すべてのコンテキストを削除する。
            </para></listitem>
        </itemizedlist>
    </sect4>

    <sect4 id="zend.controller.actionhelpers.contextswitch.actions">
        <title>アクションごとのコンテキストの設定</title>

        <para>
            使用するコンテキストの設定には 2 通りの方法があります。
            コントローラ内で手動で配列を作成する方法、
            そして <emphasis>ContextSwitch</emphasis> のメソッドでそれを作成する方法です。
        </para>

        <para>
            アクションとコンテキストの関連を追加するメソッドは
            <methodname>addActionContext()</methodname> です。
            このメソッドには 2 つの引数を指定します。
            ひとつはコンテキストを追加したいアクション、
            もうひとつはコンテキスト名あるいはコンテキスト名の配列です。
            たとえば、次のようなコントローラクラスを考えてみましょう。
        </para>

        <programlisting language="php"><![CDATA[
class FooController extends Zend_Controller_Action
{
    public function listAction()
    {
    }

    public function viewAction()
    {
    }

    public function commentsAction()
    {
    }

    public function updateAction()
    {
    }
}
]]></programlisting>

        <para>
            ここで、'list' アクションに <acronym>XML</acronym> コンテキストを、
            そして 'comments' アクションに <acronym>XML</acronym> コンテキストと <acronym>JSON</acronym>
            コンテキストを追加してみることにします。これは
            <methodname>init()</methodname> メソッドで行います。
        </para>

        <programlisting language="php"><![CDATA[
class FooController extends Zend_Controller_Action
{
    public function init()
    {
        $this->_helper->contextSwitch()
             ->addActionContext('list', 'xml')
             ->addActionContext('comments', array('xml', 'json'))
             ->initContext();
    }
}
]]></programlisting>

        <para>
            あるいは、単純に配列プロパティ
            <varname>$contexts</varname> を設定することもできます。
        </para>

        <programlisting language="php"><![CDATA[
class FooController extends Zend_Controller_Action
{
    public $contexts = array(
        'list'     => array('xml'),
        'comments' => array('xml', 'json')
    );

    public function init()
    {
        $this->_helper->contextSwitch()->initContext();
    }
}
]]></programlisting>

        <para>
            このほうがオーバーヘッドが少なくなりますが、
            書き間違える可能性もあります。
        </para>

        <para>
            コンテキストの関連付けを行うメソッドには次のようなものがあります。
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <methodname>addActionContext($action, $context)</methodname>:
                    ひとつあるいは複数のコンテキストを、あるアクションで使用できるようにする。
                    関連付けがすでに設定されている場合は、それに追記します。
                    <varname>$context</varname> は、単一のコンテキストか
                    コンテキストの配列となります。
                </para>

                <para>
                    コンテキストとして <constant>TRUE</constant> を指定すると、
                    すべてのコンテキストをそのアクションで使用できるようにします。
                </para>

                <para>
                    <varname>$context</varname> に空の値を指定すると、
                    そのアクションではどのコンテキストも使用できないようにします。
                </para>
            </listitem>

            <listitem><para>
                    <methodname>setActionContext($action, $context)</methodname>:
                    ひとつあるいは複数のコンテキストを、あるアクションで使用できるようにする。
                    関連付けがすでに設定されている場合は、指定したものでそれを置き換えます。
                    <varname>$context</varname> は、単一のコンテキストか
                    コンテキストの配列となります。
            </para></listitem>

            <listitem><para>
                    <methodname>addActionContexts(array $contexts)</methodname>:
                    いくつかの アクション/コンテキスト のペアを一度に追加する。
                    <varname>$contexts</varname> は、アクション/コンテキスト
                    のペアの連想配列です。これは <methodname>addActionContext()</methodname>
                    へのプロキシとなります。つまり、既に別のペアが登録されている場合は
                    そこに追記します。
            </para></listitem>

            <listitem><para>
                    <methodname>setActionContexts(array $contexts)</methodname>:
                    <methodname>addActionContexts()</methodname> と同様だが、既存の
                    アクション/コンテキスト のペアは上書きする。
            </para></listitem>

            <listitem><para>
                    <methodname>hasActionContext($action, $context)</methodname>:
                    特定のアクションにそのコンテキストが存在するかどうかを調べる。
            </para></listitem>

            <listitem><para>
                    <methodname>getActionContexts($action = null)</methodname>:
                    指定したアクションのすべてのコンテキスト、
                    あるいはすべての アクション/コンテキスト のペアを返す。
            </para></listitem>

            <listitem><para>
                    <methodname>removeActionContext($action, $context)</methodname>:
                    ひとつあるいは複数のコンテキストを、指定したアクションから削除する。
                    <varname>$context</varname> は、単一のコンテキストか
                    コンテキストの配列となります。
            </para></listitem>

            <listitem><para>
                    <methodname>clearActionContexts($action = null)</methodname>:
                    すべてのコンテキストを、指定したアクションから削除する。
                    あるいはすべてのアクションのすべてのコンテキストを削除する。
            </para></listitem>
        </itemizedlist>
    </sect4>

    <sect4 id="zend.controller.actionhelpers.contextswitch.initcontext">
        <title>コンテキストスイッチの初期化</title>

        <para>
            コンテキストスイッチを初期化するには、アクションコントローラで
            <methodname>initContext()</methodname> をコールする必要があります。
        </para>

        <programlisting language="php"><![CDATA[
class NewsController extends Zend_Controller_Action
{
    public function init()
    {
        $this->_helper->contextSwitch()->initContext();
    }
}
]]></programlisting>

        <para>
            時には、使用するコンテキストを決めてしまいたいこともあるでしょう。
            たとえば、コンテキストスイッチが起動したときには
            <acronym>XML</acronym> コンテキストだけを使わせたいという場合などです。
            その場合は、そのコンテキストを
            <methodname>initContext()</methodname> に渡します。
        </para>

        <programlisting language="php"><![CDATA[
$contextSwitch->initContext('xml');
]]></programlisting>
    </sect4>

    <sect4 id="zend.controller.actionhelpers.contextswitch.misc">
        <title>追加機能</title>

        <para>
            さまざまなメソッドを使用することで、
            <emphasis>ContextSwitch</emphasis> ヘルパーの挙動を変更できます。
            たとえば次のようなメソッドが存在します。
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <methodname>setAutoJsonSerialization($flag)</methodname>:
                    デフォルトでは、<acronym>JSON</acronym> コンテキストはビュー変数をすべてシリアライズし、
                    <acronym>JSON</acronym> 記法にしたものをレスポンスとして返します。
                    レスポンスを自分で作成したい場合はこれをオフにしなければなりません。
                    これは、<methodname>initContext()</methodname> をコールする前に行う必要があります。
                </para>

                <programlisting language="php"><![CDATA[
$contextSwitch->setAutoJsonSerialization(false);
$contextSwitch->initContext();
]]></programlisting>

                <para>
                    このフラグの値を取得するには
                    <methodname>getAutoJsonSerialization()</methodname> を使用します。
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>setSuffix($context, $suffix,
                        $prependViewRendererSuffix)</methodname>:
                    このメソッドは、指定したコンテキストに対して
                    別のサフィックスを設定します。
                    3 番目の引数を使用すると、
                    ViewRenderer のサフィックスの前に
                    新しいサフィックスをつけるのかどうかを指定できます。
                    このフラグはデフォルトで有効になっています。
                </para>

                <para>
                    サフィックスに空の値を指定すると、
                    ViewRenderer のサフィックスのみを使用します。
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>addHeader($context, $header, $content)</methodname>:
                    指定したコンテキストにレスポンスヘッダを追加します。
                    <varname>$header</varname> はヘッダの名前で、
                    <varname>$content</varname> はそのヘッダに渡す値となります。
                </para>

                <para>
                    各コンテキストは複数のヘッダを持つことができます。
                    <methodname>addHeader()</methodname> は、
                    そのヘッダをコンテキストのヘッダスタックに追加します。
                </para>

                <para>
                    指定した <varname>$header</varname> がそのコンテキストに既に存在する場合は、
                    例外をスローします。
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>setHeader($context, $header, $content)</methodname>:
                    <methodname>setHeader()</methodname> は
                    <methodname>addHeader()</methodname> とほぼ同じですが、
                    既存のコンテキストヘッダを上書きします。
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>addHeaders($context, array $headers)</methodname>:
                    指定したコンテキストに一度に複数のヘッダを追加します。
                    <methodname>addHeader()</methodname> へのプロキシとして動作するので、
                    そのヘッダがすでに存在する場合は例外をスローします。
                    <varname>$headers</varname> は ヘッダ/コンテキスト
                    のペアの配列です。
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>setHeaders($context, array $headers.)</methodname>:
                    <methodname>addHeaders()</methodname> と似ていますが、これは
                    <methodname>setHeader()</methodname> へのプロキシとして動作し、
                    既存のヘッダは上書きします。
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>getHeader($context, $header)</methodname>:
                    指定したコンテキストのヘッダの値を取得します。
                    見つからない場合は <constant>NULL</constant> を返します。
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>removeHeader($context, $header)</methodname>:
                    指定したコンテキストの単一のヘッダを削除します。
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>clearHeaders($context, $header)</methodname>:
                    指定したコンテキストのすべてのヘッダを削除します。
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>setCallback($context, $trigger, $callback)</methodname>:
                    指定したコンテキストにおける指定したトリガーのコールバックを設定します。
                    トリガーに指定できる値は 'init' あるいは 'post'
                    (それぞれ、コンテキストの初期化時と postDispatch 時を表します) です。
                    <varname>$callback</varname> は <acronym>PHP</acronym> のコールバックとして正しい形式でなければなりません。
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>setCallbacks($context, array $callbacks)</methodname>:
                    指定したコンテキストに複数のコールバックを設定します。
                    <varname>$callbacks</varname> は トリガー/コールバック
                    のペアとなります。実際のところ、登録できるコールバックは
                    ほとんどふたつだけで、初期化用のものと後処理用のものです。
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>getCallback($context, $trigger)</methodname>:
                    指定したコンテキストにおける指定したトリガーのコールバックを取得します。
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>getCallbacks($context)</methodname>:
                    指定したコンテキストにおけるすべてのコールバックを取得します。
                    トリガー/コールバック のペアを返します。
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>removeCallback($context, $trigger)</methodname>:
                    指定したコンテキストにおける指定したトリガーのコールバックを削除します。
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>clearCallbacks($context)</methodname>:
                    指定したコンテキストにおけるすべてのコールバックを削除します。
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>setContextParam($name)</methodname>:
                    コンテキストスイッチが要求されたかどうかを調べるための
                    リクエストパラメータを設定します。デフォルトは
                    'format' ですが、このアクセサを使用することで変更できます。
                </para>

                <para>
                    <methodname>getContextParam()</methodname>
                    で、現在の値を取得できます。
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>setAutoDisableLayout($flag)</methodname>:
                    デフォルトでは、コンテキストスイッチが発生したときには
                    レイアウト機能が無効になります。これは、
                    レイアウト機能は通常は普通のレスポンスの時に使用するものであって
                    それ以外のコンテキストでは無意味だからです。
                    しかし、時にはレイアウト機能を使いたいこともあるでしょう
                    (新しいコンテキスト用のレイアウトがある場合など)。
                    その場合は、<methodname>setAutoDisableLayout()</methodname>
                    に <constant>FALSE</constant> を渡します。これは、
                    <methodname>initContext()</methodname> をコールするより
                    <emphasis>前に</emphasis> 行わなければなりません。
                </para>

                <para>
                    このフラグの現在の値を取得するには、アクセサ
                    <methodname>getAutoDisableLayout()</methodname> を使用します。
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>getCurrentContext()</methodname> を使うと、
                    現在のコンテキストを取得できます。
                    コンテキストスイッチが発生していない場合や
                    <methodname>initContext()</methodname> の起動前にコールした場合は
                    <constant>NULL</constant> を返します。
                </para>
            </listitem>
        </itemizedlist>
    </sect4>

    <sect4 id="zend.controller.actionhelpers.contextswitch.ajaxcontext">
        <title>AjaxContext の機能</title>

        <para>
            <emphasis>AjaxContext</emphasis> ヘルパーは
            <emphasis>ContextSwitch</emphasis> を継承したものです。
            <emphasis>ContextSwitch</emphasis> の機能はすべて使用できます。
            しかし、いくつか重要な違いがあります。
        </para>

        <para>
            まず、コンテキストを決めるアクションコントローラのプロパティは
            <varname>$ajaxable</varname> となります。これにより、
            <acronym>AJAX</acronym> 用と通常の <acronym>HTTP</acronym> リクエスト用で別のコンテキストを使用できるようになります。
            <emphasis>AjaxContext</emphasis> の *<emphasis>ActionContext()</emphasis>*
            系のメソッドは、このプロパティに書き込みます。
        </para>

        <para>
            次に、これは XmlHttpRequest が発生した場合にのみ起動します。
            リクエストオブジェクトの <methodname>isXmlHttpRequest()</methodname>
            メソッドで判断します。したがって、たとえコンテキストパラメータ
            ('format') をリクエストで渡したとしても、そのリクエストが
            XmlHttpRequest でない場合はコンテキストスイッチが発生しません。
        </para>

        <para>
            3 番目に、<emphasis>AjaxContext</emphasis> は <acronym>HTML</acronym> コンテキストを追加します。
            このコンテキストでは、サフィックスを '<filename>ajax.phtml</filename>'
            として通常のリクエストのコンテキストと区別しています。
            追加のヘッダは返しません。
        </para>

        <example id="zend.controller.actionhelpers.contextswitch.ajaxcontext.example">
            <title>Ajax リクエストに対してアクションに応答させる</title>

            <para>
                この例では、アクション 'view'、'form' および 'process'
                に対する <acronym>AJAX</acronym> リクエストにレスポンスを返させるようにしています。
                最初のふたつ 'view' および 'form' では、<acronym>HTML</acronym>
                コード片を返してページを更新させます。最後の 'process'
                については <acronym>JSON</acronym> を返しています。
            </para>

            <programlisting language="php"><![CDATA[
class CommentController extends Zend_Controller_Action
{
    public function init()
    {
        $ajaxContext = $this->_helper->getHelper('AjaxContext');
        $ajaxContext->addActionContext('view', 'html')
                    ->addActionContext('form', 'html')
                    ->addActionContext('process', 'json')
                    ->initContext();
    }

    public function viewAction()
    {
        // 単一のコメントを表示します
        // AjaxContext の場合は comment/view.ajax.phtml
        // を使用します
    }

    public function formAction()
    {
        // 新規コメントの追加フォームをレンダリングします
        // AjaxContext の場合は comment/form.ajax.phtml
        // を使用します
    }

    public function processAction()
    {
        // 新規コメントを処理します
        // 結果を JSON で返します。結果をビュー変数に格納するだけで、
        // JSON でそれを返してくれます
    }
}
]]></programlisting>

            <para>
                クライアント側では、<acronym>AJAX</acronym> ライブラリからエンドポイント
                '<filename>/comment/view</filename>'、'<filename>/comment/form</filename>' そして
                '<filename>/comment/process</filename>' へリクエストを送ることになります。
                その際に、'format' パラメータを
                '<filename>/comment/view/format/html</filename>'、'<filename>/comment/form/format/html</filename>' そして
                '<filename>/comment/process/format/json</filename>' のように指定します
                (あるいはクエリ文字列で "?format=json" のようにしてもかまいません)。
            </para>

            <para>
                ライブラリ側で 'X-Requested-With:
                XmlHttpRequest' ヘッダが設定されていれば、
                このアクションは適切な形式でレスポンスを返します。
            </para>
        </example>
    </sect4>
</sect3>
<!--
vim:se ts=4 sw=4 et:
-->
