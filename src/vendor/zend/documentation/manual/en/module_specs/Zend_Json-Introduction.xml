<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<sect1 id="zend.json.introduction">
    <title>Introduction</title>

    <para>
        <classname>Zend_Json</classname> provides convenience methods for serializing native
        <acronym>PHP</acronym> to <acronym>JSON</acronym> and decoding <acronym>JSON</acronym> to
        native <acronym>PHP</acronym>. For more information on <acronym>JSON</acronym>, <ulink
            url="http://www.json.org/">visit the <acronym>JSON</acronym> project site</ulink>.
    </para>

    <para>
        <acronym>JSON</acronym>, JavaScript Object Notation, can be used for data
        interchange between JavaScript and other languages. Since <acronym>JSON</acronym> can be
        directly evaluated by JavaScript, it is a more efficient and lightweight
        format than <acronym>XML</acronym> for exchanging data with JavaScript clients.
    </para>

    <para>
        In addition, <classname>Zend_Json</classname> provides a useful way to convert any
        arbitrary <acronym>XML</acronym> formatted string into a <acronym>JSON</acronym> formatted
        string. This built-in feature will enable <acronym>PHP</acronym> developers to transform the
        enterprise data encoded in <acronym>XML</acronym> format into <acronym>JSON</acronym> format
        before sending it to browser-based Ajax client applications. It provides an easy way to do
        dynamic data conversion on the server-side code thereby avoiding unnecessary
        <acronym>XML</acronym> parsing in the browser-side applications. It offers a nice utility
        function that results in easier application-specific data processing techniques.
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
