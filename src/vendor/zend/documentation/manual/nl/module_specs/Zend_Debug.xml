<sect1 id="zend.debug.dumping">

    <title>Variabelen dumpen</title>

    <para>
        Informatie over een uitdrukking wordt door de statische methode
        <code>Zend_Debug::dump()</code> weergegeven of terug gegeven.
        Deze simpele manier van debuggen wordt veel gebruikt, omdat het
        makkelijk is om te gebruiken, geen initialisatie, speciale
        programma's of debug omgevingen nodig heeft.
    </para>

    <example id="zend.debug.dumping.example">
        <title>Voorbeeld van de dump() methode</title>
        <programlisting role="php"><![CDATA[<?php

Zend_Debug::dump($var, $label=null, $echo=true);]]></programlisting>
    </example>

    <para>
        De <code>$var</code> parameter specificeerd de uitdrukking of
        variable waarover de <code>Zend_Debug::dump()</code> methode
        informatie geeft.
    </para>

    <para>
        De <code>$label</code> parameter is een string die vooraan toegevoegd
        wordt aan de informatie van <code>Zend_Debug::dump()</code>. Het kan
        bijvoorbeeld handig zijn om labels te gebruiken als je informatie
        dumpt van meerdere variabelen.
    </para>

    <para>
        De boolean <code>$echo</code> parameter bepaalt of de informatie van
        <code>Zend_Debug::dump()</code> moet worden weergegeven.
        De teruggeef waarde van deze methode bevat altijd de informatie, het
        maakt hiervoor niet uit wat de waarde is van <code>$echo</code>.
    </para>

    <para>
        Het is misschien handig om te weten dat intern de  <code>Zend_Debug::dump()</code>
        methode, de PHP functie <ulink url="http://php.net/var_dump"><code>var_dump()</code></ulink>
        omhulst. Als er wordt gedetecteerd dat het om een web presentatie gaat,
        dan wordt de waarde van <code>var_dump()</code> automatisch door
        <ulink url="http://php.net/htmlspecialchars"><code>htmlspecialchars()</code></ulink> gehaald
        en door de (x)HTML <code>&lt;pre&gt;</code> tags omhulst.
    </para>

    <tip>
        <title>Debuggen met Zend_Log</title>
        <para>
            Het gebruiken van <code>Zend_Debug::dump()</code> is goed voor ad hoc debuggen
            tijdens software ontwikkeling. Je kunt snel code om een variabele te dumpen
            toevoegen en dan daarna verwijderen.
        </para>
        <para>
            Bekijk ook de <link linkend="zend.log.overview">Zend_Log</link> component
            als je een meer permanente debug code schrijft.
            Als voorbeeld, kan je het <code>DEBUG</code> logboek level gebruiken en de
            logboek schrijver gebruiken voor de string die teruggegeven wordt door
            <code>Zend_Debug::dump()</code>.
        </para>
    </tip>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
