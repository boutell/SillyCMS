<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 20765 -->
<!-- Reviewed: no -->
<sect3 id="zend.controller.actionhelpers.actionstack">
    <title>ActionStack</title>

    <para>
        L'aide <emphasis>ActionStack</emphasis> vous permet d'empiler les requêtes dans le plugin de
        contrôleur frontal
        <link linkend="zend.controller.plugins.standard.actionstack">ActionStack</link>, vous
        aidant effectivement à créer une liste d'actions à exécuter durant la requête. Cette aide
        vous permet d'ajouter des actions, soit en spécifiant de nouveaux objets de requêtes, soit
        en paramétrant action&#160;/&#160;controller&#160;/&#160;module.
    </para>

    <note>
        <title>Invoquer l'aide ActionStack initialise le plugin ActionStack</title>
        <para>
            L'appel de l'aide <emphasis>ActionStack</emphasis> enregistre implicitement le plugin
            <emphasis>ActionStack</emphasis> - ce qui veut dire que vous n'avez pas besoin
            d'enregistrer explicitement le plugin <emphasis>ActionStack</emphasis> pour utiliser
            cette fonctionnalité.
        </para>
    </note>

    <example id="zend.controller.actionhelpers.actionstack.simple">
        <title>Ajouter une tâche en utilisant une action, un contrôleur et un module</title>

        <para>
            Souvent, il est plus simple de spécifier l'action, le contrôleur et le module (et
            optionnellement des paramètres de requêtes), comme vous le feriez en appelant
            <methodname>Zend_Controller_Action::_forward()</methodname>&#160;:
        </para>

        <programlisting language="php"><![CDATA[
class FooController extends Zend_Controller_Action
{
    public function barAction()
    {
        // Ajoute deux actions à la pile

        // Ajoute un appel à /foo/baz/bar/baz (FooController::bazAction()
        // avec une variable de requête bar == baz)
        $this->_helper->actionStack('baz',
                                    'foo',
                                    'default',
                                    array('bar' => 'baz'));

        // Ajoute un appel à /bar/bat
        // (BarController::batAction())
        $this->_helper->actionStack('bat', 'bar');
    }
}
]]></programlisting>
    </example>

    <example id="zend.controller.actionhelpers.actionstack.simple2">
        <title>Ajouter une tâche en utilisant un objet de requête</title>

        <para>
            Parfois la nature <acronym>OO</acronym> d'un objet de requête a plus de sens&#160;;
            vous pouvez alors fournir l'objet à l'aide <emphasis>ActionStack</emphasis>.
        </para>

        <programlisting language="php"><![CDATA[
class FooController extends Zend_Controller_Action
{
    public function barAction()
    {
        // Ajoute deux actions à la pile

        // Ajoute un appel à /foo/baz/bar/baz (FooController::bazAction()
        // avec une variable de requête bar == baz)
        $request = clone $this->getRequest();
        // sans régler le contrôleur ou le module,
        // utilise les valeurs courantes
        $request->setActionName('baz')
                ->setParams(array('bar' => 'baz'));
        $this->_helper->actionStack($request);

        // Ajoute un appel à /bar/bat
        // (BarController::batAction())
        $request = clone $this->getRequest();
        // sans régler le module, utilise la valeur courante
        $request->setActionName('bat')
                ->setControllerName('bar');
        $this->_helper->actionStack($request);
    }
}
]]></programlisting>
    </example>
</sect3>
