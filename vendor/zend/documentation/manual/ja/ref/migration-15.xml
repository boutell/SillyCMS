<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<!-- EN-Revision: 20876 -->
<sect1 id="migration.15">
    <title>Zend Framework 1.5</title>

    <para>
        以前のバージョンから Zend Framework 1.5 またはそれ以降に更新する際は、
        下記の移行上の注意点に注意すべきです。
    </para>

    <sect2 id="migration.15.zend.controller">
        <title>Zend_Controller</title>

        <para>
            基本的な機能は同じでドキュメント化されている機能も変わりませんが、
            ひとつだけ、<emphasis>ドキュメント化されていない</emphasis>
            "機能" が変更されました。
        </para>

        <para>
            <acronym>URL</acronym> の書き方としてドキュメント化されている方法は、
            camelCased 形式の名前のアクションを使用するために
            単語の区切り文字を使用するというものです。デフォルトの区切り文字は
            '.' あるいは '-' ですが、ディスパッチャの設定で変更できます。
            ディスパッチャは内部でアクション名を小文字に変換し、
            単語の区切り文字をもとに camelCasing 形式のアクションメソッド名を作成します。
            しかし、<acronym>PHP</acronym> の関数名は大文字小文字を区別しないので、<acronym>URL</acronym> 自体を
            camelCasing 形式で書くこともできます。
            この場合でも、ディスパッチャは <acronym>URL</acronym> を同じアクションメソッドに解決します。
            たとえば 'camel-cased' はディスパッチャによって
            'camelCasedAction' になります。一方 'camelCased' は
            'camelcasedAction' となります。<acronym>PHP</acronym> では大文字小文字を細かく区別しないため、
            これらはどちらも同じメソッドを実行することになります。
        </para>

        <para>
            これは、ViewRenderer がビュースクリプトを解決する際に問題を引き起こします。
            ドキュメントに記載されている正式な方法は、
            単語の区切りをすべてダッシュに変換して単語は小文字にするというものです。
            こうすればアクションとビュースクリプトの関連が明確になり、
            小文字への正規化でスクリプトが見つかることが確実となります。
            しかし、アクション 'camelCased' がコールされて解決された場合は、
            単語の区切りはもう存在しません。そして ViewRenderer は
            <filename>camel-cased.phtml</filename> ではない別のファイル -- <filename>camelcased.phtml</filename>
            を探してしまうのです。
        </para>

        <para>
            中にはこの "機能" を使用している開発者もいるようますが、
            これは決して意図した機能ではありません。
            1.5.0 のツリーでは、ViewRenderer はこの方式の解決を行わなくなりました。
            これでアクションとビュースクリプトの結びつきが確実になったわけです。
            まず、ディスパッチャはアクション名の大文字小文字をきちんと区別するようになります。
            つまり、camelCasing 形式を使用したアクションの解決先は、
            単語の区切りを使用した ('camel-casing') 場合とは違うものになるということです。
            これで、ViewRenderer がビュースクリプトを解決する際には
            区切り文字を使用したアクションのみを使用することになります。
        </para>

        <para>
            今までこの "機能" に頼っていた人たちは、
            以下のいずれかの方法で対応します。
        </para>

        <itemizedlist>
            <listitem><para>
                    一番いい方法: ビュースクリプトの名前を変更する。
                    利点: 前方互換性。欠点: もし対象となるビュースクリプトが多い場合は、
                    多くのファイルの名前を変更しなければならなくなります。
            </para></listitem>

            <listitem>
                <para>
                    その次にいい方法: ViewRenderer はビュースクリプトの解決を
                    <classname>Zend_Filter_Inflector</classname> に委譲しています。
                    インフレクタのルールを変更し、
                    アクションの単語間をダッシュで区切らないようにします。
                </para>

                <programlisting language="php"><![CDATA[
$viewRenderer =
    Zend_Controller_Action_HelperBroker::getStaticHelper('viewRenderer');
$inflector = $viewRenderer->getInflector();
$inflector->setFilterRule(':action', array(
    new Zend_Filter_PregReplace(
        '#[^a-z0-9' . preg_quote(DIRECTORY_SEPARATOR, '#') . ']+#i',
        ''
    ),
    'StringToLower'
));
]]></programlisting>

                <para>
                    上のコードは、インフレクタを変更して単語をダッシュで区切らないようにしています。
                    もし実際のビュースクリプト名を camelCased にしたいのなら、さらに
                    'StringToLower' フィルタも削除することになるでしょう。
                </para>

                <para>
                    ビュースクリプトの名前を変えるのが面倒だったり
                    時間がかかったりする場合は、
                    もしあまり時間を割けないのならこの方法が最適です。
                </para>
            </listitem>

            <listitem>
                <para>
                    あまりお勧めしない方法: ディスパッチャに camelCased
                    形式のアクションをディスパッチさせるよう、フロントコントローラのフラグ
                    <property>useCaseSensitiveActions</property> を設定します。
                </para>

                <programlisting language="php"><![CDATA[
$front->setParam('useCaseSensitiveActions', true);
]]></programlisting>

                <para>
                    これで camelCasing 形式の URL を使えるようになり、
                    単語の区切り文字を使用した場合と同じアクションに解決されるようになります。
                    しかし、もともと抱えていた問題も残ったままとなってしまいます。
                    できれば先ほどのふたつのうちのいずれかを使用したほうがいいでしょう。
                </para>

                <para>
                    このフラグを使用していると、
                    将来このフラグが廃止予定になったときに notice が発生することになります。
                </para>
            </listitem>
        </itemizedlist>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
