<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<!-- EN-Revision: 22511 -->
<sect1 id="zend.gdata.introduction">
    <title>導入</title>
    <para>
        Google Data <acronym>API</acronym> は、Google のオンラインサービスに対するプログラマ向けのインターフェイスです。
        Google data Protocol は
        <ulink url="http://ietfreport.isoc.org/idref/draft-ietf-atompub-protocol/">Atom Publishing Protocol</ulink>
        に基づいており、クライアントアプリケーションからのデータの問い合わせ、
        データの投稿、更新、削除などを標準の <acronym>HTTP</acronym>
        と Atom syndication formation で行います。

        <classname>Zend_Gdata</classname> コンポーネントは <acronym>PHP</acronym> 5 用のインターフェイスで、Google Data
        に <acronym>PHP</acronym> からアクセスするためのものです。
        <classname>Zend_Gdata</classname> コンポーネントは、Atom Publishing Protocol
        を実装したその他のサービスへのアクセスもサポートしています。
    </para>

    <para>
        Google Data <acronym>API</acronym> についての詳細な情報は
        <ulink url="http://code.google.com/apis/gdata/">http://code.google.com/apis/gdata/</ulink>
        を参照ください。
    </para>

    <para>
        <classname>Zend_Gdata</classname> でアクセスできるサービスには次のようなものがあります。

        <itemizedlist>
            <listitem>
                <para>
                    <link linkend="zend.gdata.calendar">Google Calendar</link>
                    は、オンラインカレンダーアプリケーションです。
                </para>
            </listitem>
            <listitem>
                <para>
                    <link linkend="zend.gdata.spreadsheets">Google Spreadsheets</link>
                    は、オンラインで共同作業を行えるスプレッドシートツールです。
                    アプリケーションで使用するデータの保存場所としても使用できます。
                </para>
            </listitem>
            <listitem>
                <para>
                    <link linkend="zend.gdata.docs">Google Documents List</link>
                    は、その Google アカウントに保存されているすべてのスプレッドシートやワープロ文書、
                    プレゼンテーションの一覧を取得します。
                </para>
            </listitem>
            <listitem>
                <para>
                    <link linkend="zend.gdata.gapps">Google Provisioning</link>
                    は、Google Apps がホストするドメイン上の
                    ユーザアカウントやニックネーム、グループ、そしてメーリングリストの
                    作成、取得、更新、削除を行うものです。
                </para>
            </listitem>
            <listitem>
                <para>
                    <link linkend="zend.gdata.gbase">Google Base</link>
                    は、Google Base のアイテムを取得したり
                    アイテムを投稿、更新、あるいは削除したりできます。
                </para>
            </listitem>
            <listitem>
                <para>
                    <link linkend="zend.gdata.youtube">YouTube</link>
                    は、動画やコメント、お気に入り、登録チャンネル、
                    ユーザのプロファイルといった情報を検索して取得できます。
                </para>
            </listitem>
            <listitem>
                <para>
                    <link linkend="zend.gdata.photos">Picasa Web Albums</link>
                    は、オンラインの写真共有アプリケーションです。
                </para>
            </listitem>
            <listitem>
                <para>
                    <ulink url="http://code.google.com/apis/blogger/developers_guide_php.html">Google Blogger</ulink>
                    は、人気のあるインターネットプロバイダです。
                    "ボタンひとつで簡単に" 記事を配信できます。
                </para>
            </listitem>
            <listitem>
                <para>
                    Google CodeSearch
                    を使用すると、さまざまなプロジェクトが公開しているソースコードを検索できます。
                </para>
            </listitem>
            <listitem>
                <para>
                    Google Notebook
                    は、メモ帳の内容を一般に公開できます。
                </para>
            </listitem>
        </itemizedlist>
    </para>

    <note>
        <title>サポートしていないサービス</title>
        <para>
            <classname>Zend_Gdata</classname> には、これら以外の Google のサービス
            (例えば検索、Gmail、翻訳、マップなど)
            に対するインターフェイスは含まれていません。
            Google Data <acronym>API</acronym> をサポートしているサービスにのみ対応しています。
        </para>
    </note>

    <sect2 id="zend.gdata.introduction.structure">
        <title>Zend_Gdata の構造</title>
        <para>
            <classname>Zend_Gata</classname> は、いくつかの型のクラスを組み合わせたものです。
            <itemizedlist>
                <listitem>
                    <para>
                        サービスクラス - これは <classname>Zend_Gdata_App</classname> を継承したものです。
                        <classname>Zend_Gdata</classname> や <classname>Zend_Gdata_Spreadsheets</classname>
                        といったその他のクラスもここに含まれます。
                        これらのクラスは APP や GData サービス とのやり取りを行うもので、
                        フィードを取得したりエントリを取得したり、
                        あるいはエントリを投稿したり更新したり削除したりといったことができます。
                    </para>
                </listitem>
                <listitem>
                    <para>
                        クエリクラス - これは <classname>Zend_Gdata_Query</classname> を継承したものです。
                        各サービス専用のクラス、たとえば <classname>Zend_Gdata_Spreadsheets_ListQuery</classname>
                        や <classname>Zend_Gdata_Spreadsheets_CellQuery</classname> もここに含まれます。
                        クエリクラスは、GData サービスからデータを取得するためのクエリを作成するものです。
                        <methodname>setUpdatedMin()</methodname> や
                        <methodname>setStartIndex()</methodname>、そして
                        <methodname>getPublishedMin()</methodname> といったメソッドが存在します。
                        クエリクラスには、出来上がったクエリの <acronym>URL</acronym> を生成するためのメソッド
                        <code>getQueryUrl</code> もあります。
                        また、<methodname>getQueryString()</methodname>
                        メソッドを使用すると、<acronym>URL</acronym> のクエリ文字列部分を取得できます。
                    </para>
                </listitem>
                <listitem>
                    <para>
                        フィードクラス - これは <classname>Zend_Gdata_App_Feed</classname> を継承したものです。
                        <classname>Zend_Gdata_Feed</classname> や
                        <classname>Zend_Gdata_Spreadsheets_SpreadsheetFeed</classname>、
                        <classname>Zend_Gdata_Spreadsheets_ListFeed</classname> といったその他のクラスもここに含まれます。
                        これらのクラスはサービスから取得したエントリのフィードを表すものです。
                        サービスから返されたデータを取得するために使用します。
                    </para>
                </listitem>
                <listitem>
                    <para>
                        エントリクラス - これは <classname>Zend_Gdata_App_Entry</classname> を継承したものです。
                        <classname>Zend_Gdata_Entry</classname> や <classname>Zend_Gdata_Spreadsheets_ListEntry</classname>
                        といったその他のクラスもここに含まれます。
                        これらのクラスは、サービスから取得したエントリを表すものです。また、
                        サービスに送信するデータを作成するためにも用います。
                        エントリのプロパティの値（たとえばスプレッドシートのセルの値など）
                        を設定できるだけでなく、このオブジェクトを使用して
                        既存エントリの更新や削除のリクエストを送信することもできます。
                        たとえば <methodname>$entry->save()</methodname>
                        をコールすると、変更した内容を元のエントリに書き戻します。また
                        <methodname>$entry->delete()</methodname> はそのエントリをサーバから削除します。
                    </para>
                </listitem>
                <listitem>
                    <para>
                        その他のデータモデルクラス - これは
                        <classname>Zend_Gdata_App_Extension</classname> を継承したものです。ここには、
                        <classname>Zend_Gdata_App_Extension_Title</classname> (atom:title <acronym>XML</acronym> 要素を表します)
                        や <classname>Zend_Gdata_Extension_When</classname> (GData Event "Kind" で使用する
                        gd:when <acronym>XML</acronym> 要素を表します)、そして
                        <classname>Zend_Gdata_Extension_Cell</classname> (Google Spreadsheets で使用する
                        gs:cell <acronym>XML</acronym> 要素を表します) といったクラスが含まれます。
                        これらのクラスは、サービスから取得したデータを保存したり
                        サービスに送信するデータを構築したりするために用いるものです。
                        プロパティへのアクセス用のメソッドが用意されています。たとえば
                        <methodname>setText()</methodname> はその要素の子テキストノードの内容を設定し、
                        <methodname>getText()</methodname> はその要素のテキストノードの内容を取得します。
                        また <methodname>getStartTime()</methodname> は When 要素の開始時刻属性を取得します。
                        そのほかにも同様のメソッドがあります。
                        データモデルクラスには、その他のメソッドもあります。
                        <methodname>getDOM()</methodname> は、その要素とすべての子要素を
                        DOM 形式で表したものを返し、
                        <methodname>transferFromDOM()</methodname> は
                        DOM ツリーをもとにしたデータモデルを作成します。
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    </sect2>

    <sect2 id="zend.gdata.introduction.services">
        <title>Google サービスの使用法</title>
        <para>
            Google データサービスは、Atom Publishing Protocol (APP)
            および Atom syndication format に基づいたサービスです。
            <classname>Zend_Gdata</classname> コンポーネントを用いて APP や Google
            サービスを扱うには、<classname>Zend_Gdata_App</classname> や <classname>Zend_Gdata</classname>
            そして <classname>Zend_Gdata_Spreadsheets</classname> などのサービスクラスを使用する必要があります。
            サービスクラスには、サービスからデータのフィードを取得したり
            新しいエントリをフィードに挿入したり
            既存のエントリを更新したり削除したりといったメソッドがあります。
        </para>

        <para>
            注意: <classname>Zend_Gdata</classname> を用いた実際に動作するサンプルプログラムが
            <code>demos/Zend/Gdata</code> ディレクトリにあります。
            このサンプルはコマンドラインで動かすように作られていますが、
            ウェブアプリケーション版にも簡単に書き換えられるでしょう。
        </para>
    </sect2>

    <sect2 id="zend.gdata.introduction.magicfactory">
        <title>Zend_Gdata クラスのインスタンスの取得</title>
        <para>
            Zend Framework の命名規約では、すべてのクラスは
            その存在位置のディレクトリ構造に基づいた名前をつける必要があります。
            たとえば Spreadsheets に関する拡張クラスは
            <code>Zend/Gdata/Spreadsheets/Extension/...</code> 配下に置かれ、
            その結果、クラス名は <classname>Zend_Gdata_Spreadsheets_Extension_...</classname>
            となります。ということは、スプレッドシートのセル要素のインスタンスを作成しようとしたら、
            恐ろしく長い名前をタイプすることになるということです!
        </para>
        <para>
            ということで、すべてのサービスクラス
            (<classname>Zend_Gdata_App</classname>、<classname>Zend_Gdata</classname>、<classname>Zend_Gdata_Spreadsheets</classname> など)
            に特別なファクトリメソッドを用意するようにしました。
            これを用いることで、データモデルやクエリ、
            その他のクラスのインスタンスをより簡単に作成できるようになります。
            このファクトリメソッドは、マジックメソッド
            <code>__call</code> を用いて実装しています。このメソッドで、
            <code>$service->newXXX(arg1, arg2, ...)</code> というコールをすべて処理しています。
            XXX の値に基づいて、登録されているすべての 'パッケージ' からクラスを探します。
            以下に例を示します。
        </para>

        <programlisting language="php"><![CDATA[
$ss = new Zend_Gdata_Spreadsheets();

// Zend_Gdata_App_Spreadsheets_CellEntry を作成します
$entry = $ss->newCellEntry();

// Zend_Gdata_App_Spreadsheets_Extension_Cell を作成します
$cell = $ss->newCell();
$cell->setText('My cell value');
$cell->setRow('1');
$cell->setColumn('3');
$entry->cell = $cell;

// ... $entry を使用して、Google Spreadsheet の内容を更新します
]]></programlisting>

        <para>
            継承ツリー内にある各サービス用クラス内で、
            適切な 'パッケージ' (ディレクトリ) を登録します。
            ファクトリメソッドは、これを使用してクラスを探します。
        </para>
    </sect2>

    <sect2 id="zend.gdata.introduction.authentication">
        <title>Google Data クライアント認証</title>
        <para>
            ほとんどの Google Data サービスは、
            個人データへのアクセスやデータの保存、削除の前に
            Google サーバに対する認証を要求します。
            Google Data の認証用に提供される実装は
            <link linkend="zend.gdata.authsub">AuthSub</link> および
            <link linkend="zend.gdata.clientlogin">ClientLogin</link>
            の二種類があります。
            <classname>Zend_Gdata</classname> ではこれら両方の方式に対するインターフェイスを用意しています。
        </para>

        <para>
            Google Data サービスに対するその他大半の問い合わせは、
            認証を必要としません。
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.dependencies">
        <title>依存性</title>
        <para>
            <classname>Zend_Gdata</classname> は
            <link linkend="zend.http.client">Zend_Http_Client</link>
            を用いてリクエストを google.com に送信し、結果を取得します。
            ほとんどの Google Data リクエストに対する応答は
            <classname>Zend_Gdata_App_Feed</classname> あるいは <classname>Zend_Gdata_App_Entry</classname>
            クラスのサブクラスで返されます。
        </para>

        <para>
            <classname>Zend_Gdata</classname> は、<acronym>PHP</acronym> アプリケーションの稼動しているホストが
            インターネットに直接つながっていることを想定しています。
            <classname>Zend_Gdata</classname> クライアントは Google Data サーバへの接続を行います。
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.creation">
        <title>新しい Gdata クライアントの作成</title>

        <para>
            <classname>Zend_Gdata_App</classname> クラス、<classname>Zend_Gdata</classname> クラス、
            あるいはそのサブクラスのひとつのオブジェクトを作成します。
            各サブクラスではサービス固有のヘルパーメソッドを提供します。
        </para>

        <para>
            <classname>Zend_Gdata_App</classname> のコンストラクタに渡すオプションの引数は
            <link linkend="zend.http.client">Zend_Http_Client</link>
            のインスタンスです。このパラメータを渡さなかった場合は、
            <classname>Zend_Gdata</classname> はデフォルトの <classname>Zend_Http_Client</classname> オブジェクトを作成します。
            これには、プライベートフィードにアクセスするための認証データは設定されていません。
            <classname>Zend_Http_Client</classname> オブジェクトを自分で指定すると、
            クライアントオブジェクトに対する設定オプションを指定できます。
        </para>

        <programlisting language="php"><![CDATA[
$client = new Zend_Http_Client();
$client->setConfig( ...オプション... );

$gdata = new Zend_Gdata($client);
]]></programlisting>

        <para>
            Zend Framework 1.7 以降、プロトコルのバージョン管理のサポートが追加されました。
            これにより、クライアントおよびサーバで新機能をサポートしつつ、
            過去との互換性を保持できるようになります。
            ほとんどのサービスはバージョン管理を自前で行う必要はありませんが、
            <classname>Zend_Gdata</classname> のインスタンスを直接作成する場合 (サブクラスを使わない場合)
            は、必要なプロトコルのバージョンを指定してサーバの機能にアクセスする必要があります。
        </para>

        <programlisting language="php"><![CDATA[
$client = new Zend_Http_Client();
$client->setConfig( ...オプション... );

$gdata = new Zend_Gdata($client);
$gdata->setMajorProtocolVersion(2);
$gdata->setMinorProtocolVersion(null);
]]></programlisting>

        <para>
            認証済みの <classname>Zend_Http_Client</classname> オブジェクトを作成する方法については、
            認証のセクションも参照ください。
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.parameters">
        <title>共通のクエリパラメータ</title>

        <para>
            パラメータを指定することで、<classname>Zend_Gdata</classname>
            での問い合わせをカスタマイズできます。
            クエリのパラメータは、 <classname>Zend_Gdata_Query</classname>
            のサブクラスを使用して指定します。
            <classname>Zend_Gdata_Query</classname> クラスにはクエリパラメータを設定するメソッドが含まれ、
            これを用いて GData サービスにアクセスします。
            たとえば Spreadsheets のような個々のサービスでも
            クエリクラスを用意しており、そのサービスやフィードに合わせた独自のパラメータを定義しています。
            Spreadsheets の CellQuery クラスは Cell Feed
            に対する問い合わせを行い、ListQuery クラスは
            List Feed に対する問い合わせを行います。
            それぞれのフィードに対して別々のパラメータを指定できます。

            GData 全体で使用できるパラメータについて、
            以下で説明します。
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>q</code> パラメータはテキストのクエリ文字列を指定します。
                    パラメータの値は文字列となります。
                </para>
                <para>
                    このパラメータを設定するには <methodname>setQuery()</methodname>
                    関数を使用します。
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>alt</code> パラメータはフィードの形式を指定します。
                    このパラメータには
                    <code>atom</code>、
                    <code>rss</code>、
                    <code>json</code>、
                    あるいは <code>json-in-script</code> のいずれかを指定します。
                    このパラメータを指定しなかった場合、デフォルトのフィードの形式は
                    <code>atom</code> となります。
                    注意: <classname>Zend_Gdata</classname> で処理できるのは、
                    atom フィード形式の出力だけであることに注意しましょう。
                    <classname>Zend_Http_Client</classname> を使用するとその他の形式のフィードも取得できます。
                    その際は、<classname>Zend_Gdata_Query</classname>
                    クラスやそのサブクラスが作成したクエリ <acronym>URL</acronym> を使用します。
                </para>
                <para>
                    このパラメータを設定するには <methodname>setAlt()</methodname>
                    関数を使用します。
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>maxResults</code> パラメータはフィード内のエントリ数を制限します。
                    整数値を指定します。返されるフィード内のエントリの数は、
                    この値を超えることはありません。
                </para>
                <para>
                    このパラメータを設定するには <methodname>setMaxResults()</methodname>
                    関数を使用します。
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>startIndex</code> パラメータは、
                    フィードで返される最初のエントリの番号を指定します。
                    それ以前の番号のエントリは読み飛ばされます。
                </para>
                <para>
                    このパラメータを設定するには <methodname>setStartIndex()</methodname>
                    関数を使用します。
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>updatedMin</code> パラメータおよび <code>updatedMax</code>
                    パラメータは、エントリの日付の範囲を指定します。
                    <code>updatedMin</code> を指定すると、
                    それより前に更新されたエントリはフィードに含まれません。
                    同様に、<code>updatedMax</code>
                    で指定した日付より後で更新されたエントリもフィードに含まれません。
                </para>
                <para>
                    これらのパラメータには、タイムスタンプを表す数値を指定します。
                    あるいは 日付/時刻 を表す文字列を指定することもできます。
                </para>
                <para>
                    これらのパラメータを設定するには <methodname>setUpdatedMin()</methodname>
                    および <methodname>setUpdatedMax()</methodname> 関数を使用します。
                </para>
            </listitem>

        </itemizedlist>

        <para>
            これらの <code>set</code> 関数に対応する
            <code>get</code> 関数もあります。
        </para>

        <programlisting language="php"><![CDATA[
$query = new Zend_Gdata_Query();
$query->setMaxResults(10);
echo $query->getMaxResults();   // 10 を返します
]]></programlisting>

        <para>
            <classname>Zend_Gdata</classname> クラスでは、
            特別なゲッターメソッドおよびセッターメソッドも実装しています。
            つまり、パラメータの名前をクラスの仮想的なメンバとして扱うことができます。
        </para>

        <programlisting language="php"><![CDATA[
$query = new Zend_Gdata_Query();
$query->maxResults = 10;
echo $query->maxResults;        // 10 を返します
]]></programlisting>

        <para>
            すべてのパラメータを消去するには <methodname>resetParameters()</methodname>
            を使用します。複数のクエリで <classname>Zend_Gdata</classname>
            を使いまわす場合などに便利です。
        </para>

        <programlisting language="php"><![CDATA[
$query = new Zend_Gdata_Query();
$query->maxResults = 10;
// ...フィードを取得します...

$gdata->resetParameters();      // すべてのパラメータを消去します
// ...別のフィードを取得します...
]]></programlisting>

    </sect2>

    <sect2 id="zend.gdata.introduction.getfeed">
        <title>フィードの取得</title>

        <para>
            <methodname>getFeed()</methodname> を使用して、指定した <acronym>URI</acronym> からフィードを取得します。
            この関数は、getFeed の二番目の引数で指定したクラスのインスタンスを返します。
            このクラスのデフォルトは <classname>Zend_Gdata_Feed</classname> です。
        </para>

        <programlisting language="php"><![CDATA[
$gdata = new Zend_Gdata();
$query = new Zend_Gdata_Query(
        'http://www.blogger.com/feeds/blogID/posts/default');
$query->setMaxResults(10);
$feed = $gdata->getFeed($query);
]]></programlisting>

        <para>
            この後の節で、各 Google Data
            サービス用のヘルパークラス固有の関数について説明します。これらの関数により、
            対応するサービスにあわせた適切な <acronym>URI</acronym> からフィードを取得できるようになります。
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.paging">
        <title>複数ページのフィードの扱い方</title>

        <para>
            多くのエントリが含まれるフィードを取得した場合、
            そのフィードはいくつかの「ページ」に分かれていることがあるかもしれません。
            そのような場合には、各ページには次のページへのリンクが含まれることになります。
            このリンクにアクセスするには
            <methodname>getLink('next')</methodname> を使用します。
            この例は、フィードの次のページを取得する方法を示すものです。
        </para>

        <programlisting language="php"><![CDATA[
function getNextPage($feed) {
    $nextURL = $feed->getLink('next');
    if ($nextURL !== null) {
        return $gdata->getFeed($nextURL);
    } else {
        return null;
    }
}
]]></programlisting>

        <para>
            もしこのようにページに分かれているのが気に入らない場合は、
            フィードの最初のページを
            <methodname>Zend_Gdata_App::retrieveAllEntriesForFeed()</methodname>
            に渡しましょう。そうすると、
            すべてのエントリの内容をひとつのフィードにまとめてくれます。
            この関数の使用法を、次の例で示します。
        </para>

        <programlisting language="php"><![CDATA[
$gdata = new Zend_Gdata();
$query = new Zend_Gdata_Query(
        'http://www.blogger.com/feeds/blogID/posts/default');
$feed = $gdata->retrieveAllEntriesForFeed($gdata->getFeed($query));
]]></programlisting>

        <para>
            大きなフィードに対してこの関数をコールすると、
            処理に時間がかかるということに注意しましょう。
            <methodname>set_time_limit()</methodname>
            で <acronym>PHP</acronym> の実行時間制限を拡大する必要があるかもしれません。
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.usefeedentry">
        <title>フィードやエントリ内のデータの操作</title>

        <para>
            フィードを取得したら、次はそのデータを読み込んだり
            そこに含まれるエントリを読み込んだりする番です。
            これには各データモデルクラスのアクセス用メソッドを使用するか、
            あるいはマジックメソッドを使用します。以下に例を示します。
        </para>

        <programlisting language="php"><![CDATA[
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$gdata = new Zend_Gdata($client);
$query = new Zend_Gdata_Query(
        'http://www.blogger.com/feeds/blogID/posts/default');
$query->setMaxResults(10);
$feed = $gdata->getFeed($query);
foreach ($feed as $entry) {
    // マジックメソッドを使用します
    echo 'Title: ' . $entry->title->text;
    // 定義されているアクセス用メソッドを使用します
    echo 'Content: ' . $entry->getContent()->getText();
}
]]></programlisting>
    </sect2>

    <sect2 id="zend.gdata.introduction.updateentry">
        <title>エントリの更新</title>

        <para>
            エントリを取得したら、それを更新してサーバに保存できます。以下に例を示します。
        </para>

        <programlisting language="php"><![CDATA[
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$gdata = new Zend_Gdata($client);
$query = new Zend_Gdata_Query(
        'http://www.blogger.com/feeds/blogID/posts/default');
$query->setMaxResults(10);
$feed = $gdata->getFeed($query);
foreach ($feed as $entry) {
    // タイトルに 'NEW' を追加します
    echo 'Old Title: ' . $entry->title->text;
    $entry->title->text = $entry->title->text . ' NEW';

    // エントリの内容を更新します
    $newEntry = $entry->save();
    echo 'New Title: ' . $newEntry->title->text;
}
]]></programlisting>
    </sect2>

    <sect2 id="zend.gdata.introduction.post">
        <title>Google サーバへのエントリの送信</title>

        <para>
            <classname>Zend_Gdata</classname> オブジェクトの関数 <methodname>insertEntry()</methodname>
            にアップロードしたいデータを指定し、
            新しいエントリを Google Data サービスに保存します。
        </para>

        <para>
            各サービス用のデータモデルクラスを使用して適切なエントリを作成し、
            Google のサービスに投稿できます。
            <methodname>insertEntry()</methodname> 関数には、
            <classname>Zend_Gdata_App_Entry</classname> の子クラスに投稿内容を格納して渡します。
            このメソッドは <classname>Zend_Gdata_App_Entry</classname> の子クラスを返します。
            これは、サーバから返されたエントリの状態を表します。
        </para>

        <para>
            もうひとつの方法として、そのエントリの内容を
            <acronym>XML</acronym> 構造の文字列として作成して
            <methodname>insertEntry()</methodname> 関数に渡すこともできます。
        </para>

        <programlisting language="php"><![CDATA[
$gdata = new Zend_Gdata($authenticatedHttpClient);

$entry = $gdata->newEntry();
$entry->title = $gdata->newTitle('Playing football at the park');
$content =
    $gdata->newContent('We will visit the park and play football');
$content->setType('text');
$entry->content = $content;

$entryResult = $gdata->insertEntry($entry,
        'http://www.blogger.com/feeds/blogID/posts/default');

echo 'この結果のエントリの <id> は、' . $entryResult->id->text;
]]></programlisting>

        <para>
            エントリを送信するには、認証済みの <classname>Zend_Http_Client</classname>
            を使用する必要があります。これは、
            <classname>Zend_Gdata_AuthSub</classname> クラスあるいは
            <classname>Zend_Gdata_ClientLogin</classname> クラスを使用して作成します。
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.delete">
        <title>Google サーバからのデータの削除</title>

        <para>
            方法 1: <classname>Zend_Gdata</classname> オブジェクトの関数 <methodname>delete()</methodname>
            に削除したいエントリを指定して、Google Data
            サービスからデータを削除します。
            フィードエントリの編集用 <acronym>URL</acronym> を
            <methodname>delete()</methodname> メソッドに渡します。
        </para>

        <para>
            方法 2: あるいは、Google サービスから取得したエントリに対して
            <methodname>$entry->delete()</methodname> をコールすることもできます。
        </para>

        <programlisting language="php"><![CDATA[
$gdata = new Zend_Gdata($authenticatedHttpClient);
// Google Data のフィード
$feedUri = ...;
$feed = $gdata->getFeed($feedUri);
foreach ($feed as $feedEntry) {
    // 方法 1 - エントリを直接削除します
    $feedEntry->delete();
    // 方法 2 - 編集用 URL を $gdata->delete()
    // に渡してエントリを削除します
    // $gdata->delete($feedEntry->getEditLink()->href);
}
]]></programlisting>

        <para>
            エントリを削除するには、認証済みの <classname>Zend_Http_Client</classname>
            を使用する必要があります。これは、
            <classname>Zend_Gdata_AuthSub</classname> クラスあるいは
            <classname>Zend_Gdata_ClientLogin</classname> クラスを使用して作成します。
        </para>

    </sect2>

</sect1>
