<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<!-- EN-Revision: 21815 -->
<sect1 id="zend.gdata.photos">
    <title>Picasa Web Albums の使用法</title>

    <para>
        Picasa Web Albums は、自分の写真のアルバムを管理したり
        他人のアルバムや写真を閲覧したりするサービスです。
        <acronym>API</acronym> を使用すると、このサービスをプログラムから操作できるようになります。
        たとえばアルバムへの追加や更新、削除、
        そして写真へのタグ付けやコメントを行うことができます。
    </para>

    <para>
        公開されているアルバムや写真へのアクセスについては、
        アカウントによる制限はありません。
        しかし、読み込み専用以外のアクセスを行うにはログインする必要があります。
    </para>

    <para>
        <acronym>API</acronym> についての詳細な情報、
        たとえば <acronym>API</acronym> へのアクセスを有効にする方法などは <ulink
        url="http://code.google.com/apis/picasaweb/overview.html">Picasa
        Web Albums Data <acronym>API</acronym> の概要</ulink>
        を参照ください。
    </para>

    <note>
        <title>認証</title>
        <para>
            この <acronym>API</acronym> は、AuthSub (推奨)
            および ClientAuth による認証に対応しています。
            書き込みを行うには認証済みの <acronym>HTTP</acronym> 接続が必須ですが、
            認証していない接続でも読み込み専用のアクセスは可能です。
        </para>
    </note>

    <sect2 id="zend.gdata.photos.connecting">
        <title>サービスへの接続</title>
        <para>
            Picasa Web Albums <acronym>API</acronym> は、その他の GData <acronym>API</acronym> と同様に
            Atom Publishing Protocol (APP) を使用しています。これは、<acronym>XML</acronym>
            ベースのフォーマットでウェブのリソースを管理するための仕組みです。
            クライアントと Google Calendar サーバとの間のやり取りは
            <acronym>HTTP</acronym> で行われ、認証済みの接続と未認証の接続の両方が利用できます。
        </para>

        <para>
            何らかのトランザクションが発生する際には、
            必ず接続を確立する必要があります。
            Picasa サーバとの接続は、まず <acronym>HTTP</acronym> クライアントを作成して
            <classname>Zend_Gdata_Photos</classname>
            サービスのインスタンスをそこにバインドするという手順で行います。
        </para>

        <sect3 id="zend.gdata.photos.connecting.authentication">
            <title>認証</title>
            <para>
                Google Picasa <acronym>API</acronym> を使用すると、公開カレンダーだけでなく
                プライベートカレンダーのフィードにもアクセスできます。
                公開フィードには認証は不要ですが、
                認証しない場合は読み込み専用となり、機能が制限されます。
                プライベートフィードでは完全な機能が使用できますが、
                Picasa サーバとの認証が必要になります。
                Google Picasa がサポートしている認証方式は、次の 3 通りです。
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        <firstterm>ClientAuth</firstterm>
                        は、Picasa サーバとの間で直接
                        ユーザ名/パスワード
                        による認証を行います。この方式では
                        ユーザ自身がアプリケーションにパスワードを教える必要があるので、
                        これは他の方式が使えない場合にのみ使用するようにしましょう。
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <firstterm>AuthSub</firstterm>
                        は、Gooble のプロキシサーバを経由して Picasa サーバとの認証を行ないます。
                        これは ClientAuth と同じくらい便利に使用でき、
                        セキュリティリスクもありません。
                        ウェブベースのアプリケーションでは、
                        これは最適な選択肢となります。
                    </para>
                </listitem>
            </itemizedlist>

            <para>
                <classname>Zend_Gdata</classname> ライブラリは、
                これらのすべての方式に対応しています。
                これ以降の説明は、認証方式については理解しており
                適切な認証方式で接続できるようになっていることを前提として進めていきます。
                詳細な情報は、このマニュアルの
                <link linkend="zend.gdata.introduction.authentication">認証に関するセクション</link>
                か、あるいは
                <ulink url="http://code.google.com/apis/gdata/auth.html">Google Data <acronym>API</acronym> Developer's Guide
                の Authentication Overview</ulink>
                を参照ください。
            </para>
        </sect3>

        <sect3 id="zend.gdata.photos.connecting.service">
            <title>サービスのインスタンスの作成</title>
            <para>
                サーバとのやりとりを行うためのクラスとして、このライブラリでは
                <classname>Zend_Gdata_Photos</classname> サービスクラスを用意しています。
                このクラスは Google Data や Atom Publishing Protocol
                モデルへの共通インターフェイスを提供し、
                サーバとのリクエストのやりとりを支援します。
            </para>

            <para>
                使用する認証方式を決めたら、次に
                <classname>Zend_Gdata_Photos</classname> のインスタンスを作成します。
                このクラスのコンストラクタには、引数として
                <classname>Zend_Http_Client</classname> のインスタンスを渡します。
                これは、AuthSub 認証および ClientAuth 認証へのインターフェイスを提供します。
                これらの認証を使用する場合には、認証済みの <acronym>HTTP</acronym> クライアントが必要です。
                引数を省略した場合は、未認証の
                <classname>Zend_Http_Client</classname>
                のインスタンスを自動的に作成して使用します。
            </para>

            <para>
                以下の例は、ClientAuth 認証を使用してサービスクラスを作成するものです。
            </para>
            <programlisting language="php"><![CDATA[
// ClientAuth 認証用のパラメータ
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$user = "sample.user@gmail.com";
$pass = "pa$$w0rd";

// 認証済みの HTTP クライアントを作成します
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);

// サービスのインスタンスを作成します
$service = new Zend_Gdata_Photos($client);
]]></programlisting>

            <para>
                AuthSub を使用するサービスを作成するのもほぼ同様ですが、
                少々長めになります。
            </para>
            <programlisting language="php"><![CDATA[
session_start();

/**
 * 現在のページの完全な URL を、環境変数をもとにして返します
 *
 * 次の環境変数を使用します
 * $_SERVER['HTTPS'] = (on|off|)
 * $_SERVER['HTTP_HOST'] = Host: ヘッダの値
 * $_SERVER['SERVER_PORT'] = ポート番号 (http/80,https/443 以外の場合に使用します)
 * $_SERVER['REQUEST_URI'] = HTTP リクエストのメソッドのあとに続く URI
 *
 * @return string 現在の URL
 */
function getCurrentUrl()
{
    global $_SERVER;

    /**
     * php_self をフィルタリングしてセキュリティ脆弱性を防ぎます
     */
    $php_request_uri = htmlentities(substr($_SERVER['REQUEST_URI'], 0,
    strcspn($_SERVER['REQUEST_URI'], "\n\r")), ENT_QUOTES);

    if (isset($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) == 'on') {
        $protocol = 'https://';
    } else {
        $protocol = 'http://';
    }
    $host = $_SERVER['HTTP_HOST'];
    if ($_SERVER['SERVER_PORT'] != '' &&
        (($protocol == 'http://' && $_SERVER['SERVER_PORT'] != '80') ||
        ($protocol == 'https://' && $_SERVER['SERVER_PORT'] != '443'))) {
            $port = ':' . $_SERVER['SERVER_PORT'];
    } else {
        $port = '';
    }
    return $protocol . $host . $port . $php_request_uri;
}

/**
 * 認証後のリダイレクト先を伝えられるようにします
 * AuthSub URL を返します
 *
 * getCurrentUrl() を使用して次の URL を取得し、
 * Google サービスでの認証に成功したらそこにリダイレクトします
 *
 * @return string AuthSub URL
 */
function getAuthSubUrl()
{
    $next = getCurrentUrl();
    $scope = 'http://picasaweb.google.com/data';
    $secure = false;
    $session = true;
    return Zend_Gdata_AuthSub::getAuthSubTokenUri($next, $scope, $secure,
        $session);
}

/**
 * AuthSub 認証を使用して Google と通信するための適切なヘッダを設定した
 * HTTP クライアントオブジェクトを返します
 *
 * $_SESSION['sessionToken'] を使用して、取得した AuthSub セッショントークンを
 * 保存します。Google での認証に成功したユーザのリダイレクト先 URL
 * に含まれる一回限りのトークンは、$_GET['token'] から取得します
 *
 * @return Zend_Http_Client
 */
function getAuthSubHttpClient()
{
    global $_SESSION, $_GET;
    if (!isset($_SESSION['sessionToken']) && isset($_GET['token'])) {
        $_SESSION['sessionToken'] =
            Zend_Gdata_AuthSub::getAuthSubSessionToken($_GET['token']);
    }
    $client = Zend_Gdata_AuthSub::getHttpClient($_SESSION['sessionToken']);
    return $client;
}

/**
 * サービスのインスタンスを作成し、
 * 必要に応じてユーザを AuthSub サーバにリダイレクトします
 */
$service = new Zend_Gdata_Photos(getAuthSubHttpClient());
]]></programlisting>

            <para>未認証のサーバを作成して、公開フィードへのアクセスに使用できます。</para>
            <programlisting language="php"><![CDATA[
// サービスのインスタンスを、未認証の HTTP クライアントで作成します
$service = new Zend_Gdata_Photos();
]]></programlisting>
        </sect3>
    </sect2>

    <sect2 id="zend.gdata.photos.queries">
        <title>クエリの仕組みと作成方法</title>
        <para>
            サービスに対してデータを要求するために最初にやることは、
            クエリを作成することです。以下の形式用のクエリクラスが用意されています。
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <firstterm>User</firstterm>
                    は、誰のデータを探すのかをユーザ名で指定します。
                    省略した場合は "default" を使用します。
                    これは、現在認証されているユーザ (認証済みの場合)
                    を表します。
                </para>
            </listitem>
            <listitem>
                <para>
                    <firstterm>Album</firstterm>
                    は、検索対象のアルバムを
                    ID あるいはアルバム名で指定します。
                </para>
            </listitem>
            <listitem>
                <para>
                    <firstterm>Photo</firstterm>
                    は、検索対象の写真を ID で指定します。
                </para>
            </listitem>
        </itemizedlist>

        <para>新しい <code>UserQuery</code> を作成するには次のようにします。</para>
        <programlisting language="php"><![CDATA[
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$service = new Zend_Gdata_Photos($client);

$query = new Zend_Gdata_Photos_UserQuery();
$query->setUser("sample.user");
]]></programlisting>

        <para>
            各クエリで検索結果を絞り込むために使用するパラメータを取得したり設定したりするには、
            それぞれ get(Parameter) および set(Parameter)
            を使用して次のようにします。
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <firstterm>Projection</firstterm>
                    は、フィードで返されるデータのフォーマットを指定します。
                    "api" あるいは "base" のいずれかです。通常は
                    "api" を指定することになるでしょう。デフォルトは "api"
                    です。
                </para>
            </listitem>
            <listitem>
                <para>
                    <firstterm>Type</firstterm>
                    は返される要素の型を指定します。"feed" あるいは "entry"
                    のいずれかで、デフォルトは "feed" です。
                </para>
            </listitem>
            <listitem>
                <para>
                    <firstterm>Access</firstterm>
                    は、返されるアイテムの可視性を指定します。
                    "all"、"public" あるいは "private" のいずれかで、
                    デフォルトは "all" です。
                    public 以外の要素が返されるのは、
                    認証済みのユーザに対するクエリの場合のみです。
                </para>
            </listitem>
            <listitem>
                <para>
                    <firstterm>Tag</firstterm>
                    は、返されるアイテムのタグを指定します。
                    タグを指定した場合は、その内容のタグがつけられている項目のみを返します。
                </para>
            </listitem>
            <listitem>
                <para>
                    <firstterm>Kind</firstterm>
                    は、返される要素の種類を指定します。
                    指定した場合は、この値にマッチするエントリのみを返します。
                </para>
            </listitem>
            <listitem>
                <para>
                    <firstterm>ImgMax</firstterm>
                    は、返されるエントリの最大画像サイズを指定します。
                    この値より小さい画像エントリのみを返します。
                </para>
            </listitem>
            <listitem>
                <para>
                    <firstterm>Thumbsize</firstterm>
                    は、返されるエントリのサムサイズを指定します。
                    返されたエントリのサムサイズはこの値に等しくなります。
                </para>
            </listitem>
            <listitem>
                <para>
                    <firstterm>User</firstterm>
                    は、検索対象のユーザを指定します。
                    デフォルトは "default" です。
                </para>
            </listitem>
            <listitem>
                <para>
                    <firstterm>AlbumId</firstterm>
                    は、検索対象のアルバムの ID を指定します。
                    この要素は、アルバムや写真の問い合わせに対してのみ適用されます。
                    写真に対するクエリの場合、
                    ここで指定したアルバムに含まれる写真が対象となります。
                    アルバム ID は アルバム名とは互いに排他的です。
                    一方を指定すると、もう一方は取り消されます。
                </para>
            </listitem>
            <listitem>
                <para>
                    <firstterm>AlbumName</firstterm>
                    は、検索対象のアルバムの名前を指定します。
                    この要素は、アルバムや写真の問い合わせに対してのみ適用されます。
                    写真に対するクエリの場合、
                    ここで指定したアルバムに含まれる写真が対象となります。
                    アルバム名は アルバム ID とは互いに排他的です。
                    一方を指定すると、もう一方は取り消されます。
                </para>
            </listitem>
            <listitem>
                <para>
                    <firstterm>PhotoId</firstterm>
                    は、検索対象の写真の ID を指定します。
                    この要素は、写真の問い合わせに対してのみ適用されます。
                </para>
            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.gdata.photos.retrieval">
        <title>フィードやエントリの取得</title>
        <para>
            このサービスには、ユーザやアルバムそして写真に関する
            フィードや個々のエントリを取得する機能があります。
        </para>

        <sect3 id="zend.gdata.photos.user_retrieval">
            <title>ユーザの取得</title>
            <para>
                このサービスは、ユーザのフィードおよびユーザのコンテンツ一覧の取得をサポートしています。
                指定したユーザが認証済みユーザである場合は、
                "<code>hidden</code>" とマークされているエントリも返されます。
            </para>

            <para>ユーザのフィードにアクセスするには、ユーザ名を <code>getUserFeed</code> メソッドに渡します。</para>
            <programlisting language="php"><![CDATA[
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$service = new Zend_Gdata_Photos($client);

try {
    $userFeed = $service->getUserFeed("sample.user");
} catch (Zend_Gdata_App_Exception $e) {
    echo "エラー: " . $e->getMessage();
}
]]></programlisting>

            <para>あるいは、クエリを作成してフィードにアクセスすることもできます。この場合は、まず次のようにします。</para>
            <programlisting language="php"><![CDATA[
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$service = new Zend_Gdata_Photos($client);

$query = new Zend_Gdata_Photos_UserQuery();
$query->setUser("sample.user");

try {
    $userFeed = $service->getUserFeed(null, $query);
} catch (Zend_Gdata_App_Exception $e) {
    echo "エラー: " . $e->getMessage();
}
]]></programlisting>

            <para>クエリを作成すると、ユーザエントリオブジェクトも取得できるようになります。</para>
            <programlisting language="php"><![CDATA[
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$service = new Zend_Gdata_Photos($client);

$query = new Zend_Gdata_Photos_UserQuery();
$query->setUser("sample.user");
$query->setType("entry");

try {
    $userEntry = $service->getUserEntry($query);
} catch (Zend_Gdata_App_Exception $e) {
    echo "エラー: " . $e->getMessage();
}
]]></programlisting>
        </sect3>

        <sect3 id="zend.gdata.photos.album_retrieval">
            <title>アルバムの取得</title>
            <para>このサービスには、アルバムのフィードやアルバムのコンテンツ一覧を取得する機能があります。</para>

            <para>
                アルバムのフィードにアクセスするには、クエリオブジェクトを作成してそれを <code>getAlbumFeed</code> に渡します。
            </para>
            <programlisting language="php"><![CDATA[
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$service = new Zend_Gdata_Photos($client);

$query = new Zend_Gdata_Photos_AlbumQuery();
$query->setUser("sample.user");
$query->setAlbumId("1");

try {
    $albumFeed = $service->getAlbumFeed($query);
} catch (Zend_Gdata_App_Exception $e) {
    echo "エラー: " . $e->getMessage();
}
]]></programlisting>

            <para>
                あるいは、<code>setAlbumName</code>
                でクエリオブジェクトにアルバム名を指定することもできます。
                アルバム名は アルバム ID とは互いに排他的です。
                一方を指定すると、もう一方は取り消されます。
            </para>

            <para>クエリを作成すると、アルバムエントリオブジェクトも取得できるようになります。</para>
            <programlisting language="php"><![CDATA[
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$service = new Zend_Gdata_Photos($client);

$query = new Zend_Gdata_Photos_AlbumQuery();
$query->setUser("sample.user");
$query->setAlbumId("1");
$query->setType("entry");

try {
    $albumEntry = $service->getAlbumEntry($query);
} catch (Zend_Gdata_App_Exception $e) {
    echo "エラー: " . $e->getMessage();
}
]]></programlisting>
        </sect3>

        <sect3 id="zend.gdata.photos.photo_retrieval">
            <title>写真の取得</title>
            <para>このサービスには、写真のフィードやコメント・タグ一覧を取得する機能があります。</para>

            <para>
                写真のフィードにアクセスするには、クエリオブジェクトを作成してそれを <code>getPhotoFeed</code> に渡します。
            </para>
            <programlisting language="php"><![CDATA[
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$service = new Zend_Gdata_Photos($client);

$query = new Zend_Gdata_Photos_PhotoQuery();
$query->setUser("sample.user");
$query->setAlbumId("1");
$query->setPhotoId("100");

try {
    $photoFeed = $service->getPhotoFeed($query);
} catch (Zend_Gdata_App_Exception $e) {
    echo "エラー: " . $e->getMessage();
}
]]></programlisting>

            <para>クエリを作成すると、写真エントリオブジェクトも取得できるようになります。</para>
            <programlisting language="php"><![CDATA[
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$service = new Zend_Gdata_Photos($client);

$query = new Zend_Gdata_Photos_PhotoQuery();
$query->setUser("sample.user");
$query->setAlbumId("1");
$query->setPhotoId("100");
$query->setType("entry");

try {
    $photoEntry = $service->getPhotoEntry($query);
} catch (Zend_Gdata_App_Exception $e) {
    echo "エラー: " . $e->getMessage();
}
]]></programlisting>
        </sect3>

        <sect3 id="zend.gdata.photos.comment_retrieval">
            <title>コメントの取得</title>
            <para>
                このサービスには、さまざまな形式のフィードからのコメントの取得をサポートしています。
                クエリが返す結果の種類として "comment" を指定することで、
                指定したユーザやアルバム、写真に関連づけられたコメントを取得できるようになります。
            </para>

            <para>指定した写真のコメントを処理するには、次のようにします。</para>
            <programlisting language="php"><![CDATA[
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$service = new Zend_Gdata_Photos($client);

$query = new Zend_Gdata_Photos_PhotoQuery();
$query->setUser("sample.user");
$query->setAlbumId("1");
$query->setPhotoId("100");
$query->setKind("comment");

try {
    $photoFeed = $service->getPhotoFeed($query);

    foreach ($photoFeed as $entry) {
        if ($entry instanceof Zend_Gdata_Photos_CommentEntry) {
            // コメントに対して何らかの処理をします
        }
    }
} catch (Zend_Gdata_App_Exception $e) {
    echo "エラー: " . $e->getMessage();
}
]]></programlisting>
        </sect3>

        <sect3 id="zend.gdata.photos.tag_retrieval">
            <title>タグの取得</title>
            <para>
                このサービスには、さまざまな形式のフィードからのタグの取得をサポートしています。
                クエリが返す結果の種類として "tag" を指定することで、
                指定した写真に関連づけられたタグを取得できるようになります。
            </para>

            <para>指定した写真のタグを処理するには、次のようにします。</para>
            <programlisting language="php"><![CDATA[
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$service = new Zend_Gdata_Photos($client);

$query = new Zend_Gdata_Photos_PhotoQuery();
$query->setUser("sample.user");
$query->setAlbumId("1");
$query->setPhotoId("100");
$query->setKind("tag");

try {
    $photoFeed = $service->getPhotoFeed($query);

    foreach ($photoFeed as $entry) {
        if ($entry instanceof Zend_Gdata_Photos_TagEntry) {
            // タグに対して何らかの処理をします
        }
    }
} catch (Zend_Gdata_App_Exception $e) {
    echo "エラー: " . $e->getMessage();
}
]]></programlisting>
        </sect3>

    </sect2>

    <sect2 id="zend.gdata.photos.creation">
        <title>エントリの作成</title>
        <para>このサービスには、アルバムや写真、コメント、そしてタグを作成する機能があります。</para>

        <sect3 id="zend.gdata.photos.album_creation">
            <title>アルバムの作成</title>
            <para>このサービスは、認証済みユーザ用の新しいアルバムの作成をサポートしています。</para>
            <programlisting language="php"><![CDATA[
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$service = new Zend_Gdata_Photos($client);

$entry = new Zend_Gdata_Photos_AlbumEntry();
$entry->setTitle($service->newTitle("test album"));

$service->insertAlbumEntry($entry);
]]></programlisting>
        </sect3>

        <sect3 id="zend.gdata.photos.photo_creation">
            <title>写真の作成</title>
            <para>このサービスは、認証済みユーザ用の新しい写真の作成をサポートしています。</para>
            <programlisting language="php"><![CDATA[
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$service = new Zend_Gdata_Photos($client);

// $photo は、HTML フォームからアップロードされたファイルの名前です

$fd = $service->newMediaFileSource($photo["tmp_name"]);
$fd->setContentType($photo["type"]);

$entry = new Zend_Gdata_Photos_PhotoEntry();
$entry->setMediaSource($fd);
$entry->setTitle($service->newTitle($photo["name"]));

$albumQuery = new Zend_Gdata_Photos_AlbumQuery;
$albumQuery->setUser("sample.user");
$albumQuery->setAlbumId("1");

$albumEntry = $service->getAlbumEntry($albumQuery);

$service->insertPhotoEntry($entry, $albumEntry);
]]></programlisting>
        </sect3>

        <sect3 id="zend.gdata.photos.comment_creation">
            <title>コメントの作成</title>
            <para>このサービスは、写真への新しいコメントの作成をサポートしています。</para>
            <programlisting language="php"><![CDATA[
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$service = new Zend_Gdata_Photos($client);

$entry = new Zend_Gdata_Photos_CommentEntry();
$entry->setTitle($service->newTitle("comment"));
$entry->setContent($service->newContent("comment"));

$photoQuery = new Zend_Gdata_Photos_PhotoQuery;
$photoQuery->setUser("sample.user");
$photoQuery->setAlbumId("1");
$photoQuery->setPhotoId("100");
$photoQuery->setType('entry');

$photoEntry = $service->getPhotoEntry($photoQuery);

$service->insertCommentEntry($entry, $photoEntry);
]]></programlisting>
        </sect3>

        <sect3 id="zend.gdata.photos.tag_creation">
            <title>タグの作成</title>
            <para>このサービスは、写真への新しいタグの作成をサポートしています。</para>
            <programlisting language="php"><![CDATA[
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$service = new Zend_Gdata_Photos($client);

$entry = new Zend_Gdata_Photos_TagEntry();
$entry->setTitle($service->newTitle("tag"));

$photoQuery = new Zend_Gdata_Photos_PhotoQuery;
$photoQuery->setUser("sample.user");
$photoQuery->setAlbumId("1");
$photoQuery->setPhotoId("100");
$photoQuery->setType('entry');

$photoEntry = $service->getPhotoEntry($photoQuery);

$service->insertTagEntry($entry, $photoEntry);
]]></programlisting>
        </sect3>

    </sect2>

    <sect2 id="zend.gdata.photos.deletion">
        <title>エントリの削除</title>
        <para>このサービスには、アルバムや写真、コメント、そしてタグを削除する機能があります。</para>

        <sect3 id="zend.gdata.photos.album_deletion">
            <title>アルバムの削除</title>
            <para>このサービスは、認証済みユーザ用のアルバムの削除をサポートしています。</para>
            <programlisting language="php"><![CDATA[
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$service = new Zend_Gdata_Photos($client);

$albumQuery = new Zend_Gdata_Photos_AlbumQuery;
$albumQuery->setUser("sample.user");
$albumQuery->setAlbumId("1");
$albumQuery->setType('entry');

$entry = $service->getAlbumEntry($albumQuery);

$service->deleteAlbumEntry($entry, true);
]]></programlisting>
        </sect3>

        <sect3 id="zend.gdata.photos.photo_deletion">
            <title>写真の削除</title>
            <para>このサービスは、認証済みユーザ用の写真の削除をサポートしています。</para>
            <programlisting language="php"><![CDATA[
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$service = new Zend_Gdata_Photos($client);

$photoQuery = new Zend_Gdata_Photos_PhotoQuery;
$photoQuery->setUser("sample.user");
$photoQuery->setAlbumId("1");
$photoQuery->setPhotoId("100");
$photoQuery->setType('entry');

$entry = $service->getPhotoEntry($photoQuery);

$service->deletePhotoEntry($entry, true);
]]></programlisting>
        </sect3>

        <sect3 id="zend.gdata.photos.comment_deletion">
            <title>コメントの削除</title>
            <para>このサービスは、認証済みユーザのコメントの削除をサポートしています。</para>
            <programlisting language="php"><![CDATA[
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$service = new Zend_Gdata_Photos($client);

$photoQuery = new Zend_Gdata_Photos_PhotoQuery;
$photoQuery->setUser("sample.user");
$photoQuery->setAlbumId("1");
$photoQuery->setPhotoId("100");
$photoQuery->setType('entry');

$path = $photoQuery->getQueryUrl() . '/commentid/' . "1000";

$entry = $service->getCommentEntry($path);

$service->deleteCommentEntry($entry, true);
]]></programlisting>
        </sect3>

        <sect3 id="zend.gdata.photos.tag_deletion">
            <title>タグの削除</title>
            <para>このサービスは、認証済みユーザのタグの削除をサポートしています。</para>
            <programlisting language="php"><![CDATA[
$service = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$service = new Zend_Gdata_Photos($client);

$photoQuery = new Zend_Gdata_Photos_PhotoQuery;
$photoQuery->setUser("sample.user");
$photoQuery->setAlbumId("1");
$photoQuery->setPhotoId("100");
$photoQuery->setKind("tag");
$query = $photoQuery->getQueryUrl();

$photoFeed = $service->getPhotoFeed($query);

foreach ($photoFeed as $entry) {
    if ($entry instanceof Zend_Gdata_Photos_TagEntry) {
        if ($entry->getContent() == $tagContent) {
            $tagEntry = $entry;
        }
    }
}

$service->deleteTagEntry($tagEntry, true);
]]></programlisting>
        </sect3>

        <sect3 id="zend.gdata.photos.optimistic_concurrenty">
            <title>楽観的な同時並行性 (削除時の注意)</title>
            <para>
                Picasa Web Albums サービスを含めた GData のフィードは、
                楽観的な同時並行性 (optimistic concurrency) を実装しています。
                これは、変更内容を不意に上書きしてしまうことを防ぐバージョン管理システムです。
                サービスクラスでエントリを削除する際に、
                もし最後に取得した後でそのエントリが変更されていた場合は例外がスローされます。
                ただし明示的にその他の設定をしている場合は別です
                (この場合、更新後のエントリに対して削除を試みます)。
            </para>

            <para>
                削除時のバージョン管理の処理方法については <code>deleteAlbumEntry</code>
                で見ることができます。
            </para>
            <programlisting language="php"><![CDATA[
// $album は、削除したい albumEntry です
try {
    $this->delete($album);
} catch (Zend_Gdata_App_HttpException $e) {
    if ($e->getMessage()->getStatus() === 409) {
        $entry =
            new Zend_Gdata_Photos_AlbumEntry($e->getMessage()->getBody());
        $this->delete($entry->getLink('edit')->href);
    } else {
        throw $e;
    }
}
]]></programlisting>
        </sect3>

    </sect2>
</sect1>
