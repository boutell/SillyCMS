<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<!-- EN-Revision: 20765 -->
<sect1 id="zend.controller.basics">
    <title>Zend_Controller の基本</title>

    <para>
        <classname>Zend_Controller</classname> は軽量で部品化されており、拡張しやすいように設計されています。
        この設計は、柔軟性および利用者に対する自由度を確保するための最低限のものであり、
        <classname>Zend_Controller</classname> を使用して構築したシステムは、
        ほぼ同じようなコード配置・規約を共有できます。
    </para>

    <para>
        次の図は処理の流れを表したものです。また、詳細についてはそれ以降で説明しています。
    </para>

    <para>
        <inlinegraphic width="483" scale="100" align="center" valign="middle"
            fileref="figures/zend.controller.basics.png" format="PNG" />
    </para>

    <para>
        <classname>Zend_Controller</classname> の処理の流れは、
        いくつかの部品にわかれて実装されています。
        これらの部品のすべてを完璧に理解する必要はありませんが、
        処理の概要を知っておくことは有用です。
    </para>

        <itemizedlist>
            <listitem>
                <para>
                    <classname>Zend_Controller_Front</classname> は、
                    <classname>Zend_Controller</classname> の処理全体を取りまとめます。
                    FrontController パターンであるといえます。
                    サーバから受け取ったすべてのリクエストを <classname>Zend_Controller_Front</classname>
                    が処理し、最終的にリクエストを ActionController
                    (<classname>Zend_Controller_Action</classname>) に委譲します。
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>Zend_Controller_Request_Abstract</classname>
                    はリクエスト環境を表し、コントローラ名やアクション名
                    そしてリクエストパラメータを設定したり取得したりする機能を提供します。
                    さらに、アクションが <classname>Zend_Controller_Dispatcher</classname>
                    でディスパッチされたかどうかを追跡する機能もあります。
                    この抽象<emphasis>リクエストオブジェクト</emphasis>を拡張し、
                    リクエスト情報をカプセル化します。それによって、
                    ルータはリクエストの情報を取得して
                    コントローラとアクションを決定できるようになります。
                </para>

                <para>
                    デフォルトでは <classname>Zend_Controller_Request_Http</classname>
                    が用いられます。これは、<acronym>HTTP</acronym> リクエスト環境全体へのアクセス機能を提供します。
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>Zend_Controller_Router_Interface</classname> を使用してルータを定義します。
                    ルーティングとは、リクエストの内容を調べて、
                    そのリクエストを処理するコントローラとアクションを決定する処理のことです。
                    このコントローラとアクション、そしてリクエストパラメータがリクエストオブジェクトに設定され、
                    <classname>Zend_Controller_Dispatcher_Standard</classname> で処理されます。
                    ルーティングが発生するのは一度だけ、
                    つまり最初にリクエストを受け取ってから
                    最初のコントローラにディスパッチされるまでの間だけです。
                </para>

                <para>
                    デフォルトのルータである <classname>Zend_Controller_Router_Rewrite</classname> は、
                    <classname>Zend_Controller_Request_Http</classname> で指定された <acronym>URI</acronym>
                    を受け取ってそれを分解し、コントローラや
                    アクション、そして <acronym>URL</acronym> に含まれたパスのパラメータを取得します。
                    たとえば、<filename>http://localhost/foo/bar/key/value</filename>
                    のような URL の場合は <emphasis>foo</emphasis> がコントローラ、
                    <emphasis>bar</emphasis> がアクション、そしてパラメータ
                    <emphasis>key</emphasis> の値として <emphasis>value</emphasis> を取得します。
                </para>

                <para>
                    <classname>Zend_Controller_Router_Rewrite</classname>
                    は、任意のパスにマッチさせることもできます。
                    詳細は <link
                        linkend="zend.controller.router">
                    ルータのドキュメント</link>
                    を参照ください。
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>Zend_Controller_Dispatcher_Interface</classname>
                    を使用してディスパッチャを定義します。ディスパッチとは、
                    コントローラとアクションをリクエストオブジェクトから受け取り、
                    それを実際のコントローラファイル/クラスとメソッドに対応させる処理のことです。
                    コントローラやアクションが存在しない場合は、
                    デフォルトのコントローラやアクションにディスパッチします。
                </para>

                <para>
                    実際のディスパッチ処理では、
                    コントローラクラスのインスタンスの作成と
                    そのクラスのアクションメソッドのコールを行います。
                    ルーティングは一度しか発生しませんが、
                    それとは異なりディスパッチは繰り返し発生します。
                    リクエストオブジェクトのディスパッチ状態がリセットされるとループが再開され、
                    現在リクエストオブジェクトに設定されているアクションがコールされます。
                    リクエストオブジェクトのディスパッチ状態が (<constant>TRUE</constant> に)
                    設定された状態でループが終了すると、処理が終了します。
                </para>

                <para>
                    デフォルトのディスパッチャは
                    <classname>Zend_Controller_Dispatcher_Standard</classname> です。
                    これは、MixedCasedClasses 形式の名前の最後に
                    Controller がついたクラスをコントローラとして使用し、
                    アクションメソッドの名前は camelCasedMethods
                    形式 (最後に Action をつける) となります。たとえば
                    <methodname>FooController::barAction()</methodname>
                    のような場合、コントローラは
                    <emphasis>foo</emphasis>、アクションは <emphasis>bar</emphasis>
                    となります。
                </para>

                <note>
                    <title>大文字小文字の命名規約</title>

                    <para>
                        人はみな、リンクをタイプする際に大文字小文字の区別をあまり気にしないものです。
                        Zend Framework では、パス情報をすべて小文字に正規化します。
                        これはもちろん、
                        コントローラ名やアクション名を決める際やリンクする場合にも影響を及ぼします。
                    </para>

                    <para>
                        コントローラクラスやアクションメソッドの名前に
                        MixedCase あるいは camelCase の単語を複数使用したい場合は、
                        URL 上での単語の区切り文字として '-' あるいは
                        '.' のいずれかを使用しなければなりません
                        (とは言え、ここで使用する文字は変更できます)。
                    </para>

                    <para>
                        たとえば、アクションを
                        <methodname>FooBarController::bazBatAction()</methodname>
                        で定義したとすると、対応する URL は
                        <filename>/foo-bar/baz-bat</filename>
                        あるいは <filename>/foo.bar/baz.bat</filename> となります。
                    </para>
                </note>
            </listitem>

            <listitem>
                <para>
                    <classname>Zend_Controller_Action</classname> はコントローラの基底コンポーネントです。
                    各コントローラはこの <classname>Zend_Controller_Action</classname>
                    クラスを継承して作成します。このクラスではアクションメソッドを定義します。
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>Zend_Controller_Response_Abstract</classname>
                    は基底レスポンスクラスで、アクションコントローラからの応答内容を収集し、
                    それをレスポンスとして返します。これはヘッダと本文の両方を収集します。
                </para>

                <para>
                    デフォルトのレスポンスクラスは
                    <classname>Zend_Controller_Response_Http</classname> で、
                    これは <acronym>HTTP</acronym> 環境での使用に適しています。
                </para>
            </listitem>
        </itemizedlist>

    <para>
        <classname>Zend_Controller</classname> の処理の流れは比較的シンプルです。
        <classname>Zend_Controller_Front</classname> がリクエストを受け取り、
        <classname>Zend_Controller_Router_Rewrite</classname> をコールして、
        配送先となるコントローラ (そしてコントローラ内のアクション)
        を決定します。<classname>Zend_Controller_Router_Rewrite</classname> は <acronym>URI</acronym>
        を分解し、リクエストからコントローラ名とアクション名を取得します。
        その後、<classname>Zend_Controller_Front</classname> はディスパッチループに突入します。
        まず <classname>Zend_Controller_Dispatcher_Standard</classname> をコールしてそこにリクエストを渡し、
        リクエストで指定されたコントローラとアクションを取得します
        (あるいはデフォルトを使用します)。
        コントローラが終了すると、処理は <classname>Zend_Controller_Front</classname>
        に戻ります。リクエストのディスパッチ状態がリセットされ、
        別のコントローラをディスパッチするように指示された場合は、
        ループが続けられて次の配送処理が行われます。
        それ以外の場合は、処理がそこで終了します。それ以外の場合は、
        処理が終了します。
    </para>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
