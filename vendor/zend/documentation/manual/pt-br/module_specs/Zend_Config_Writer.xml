<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 20765 -->
<!-- Reviewed: no -->
<sect1 id="zend.config.writer.introduction">
    <title>Zend_Config_Writer</title>

    <para>
        <classname>Zend_Config_Writer</classname> lhe dá a capacidade de escrever arquivos de
        configuração a partir de objetos <classname>Zend_Config</classname>. Ele funciona com
        adaptadores separados do sistema e muito fáceis de usar. Por padrão, o
        <classname>Zend_Config_Writer</classname> vêm embarcado com três adaptadores, que são todos
        baseados em arquivos. Você instanciará um escritor com opções específicas, que podem ser
        <emphasis>filename</emphasis> e <emphasis>config</emphasis>. Em seguida, você irá chamar o
        método <methodname>write()</methodname> do escritor e o arquivo de configuração será criado.
        Você também pode fornecer <varname>$filename</varname> e <varname>$config</varname>
        diretamente ao método <methodname>write()</methodname>. Atualmente os escritores que se
        seguem são fornecidos com <classname>Zend_Config_Writer</classname>:
    </para>

    <itemizedlist>
        <listitem>
            <para>
                <classname>Zend_Config_Writer_Array</classname>
            </para>
        </listitem>

        <listitem>
            <para>
                <classname>Zend_Config_Writer_Ini</classname>
            </para>
        </listitem>

        <listitem>
            <para>
                <classname>Zend_Config_Writer_Xml</classname>
            </para>
        </listitem>
    </itemizedlist>

    <para>
        O escritor <acronym>INI</acronym> possui dois modos de renderização no que diz respeito às
        seções. Por padrão, a configuração de maior nível é sempre escrita em nomes de seção.
        Chamando <command>$writer->setRenderWithoutSections();</command> todas as opções estarão
        escritas em um namespace global do arquivo <acronym>INI</acronym> e nenhuma seção será
        aplicada.
    </para>

    <para>
        O <classname>Zend_Config_Writer_Ini</classname> tem como adicional, a opção de parâmetro
        <emphasis>nestSeparator</emphasis>, que define o caractere com que os nós são separados.
        O padrão é um ponto simples, como é o padrão também para
        <classname>Zend_Config_Ini</classname>.
    </para>

    <para>
        Ao modificar ou criar um objeto <classname>Zend_Config</classname>, há algumas coisas que se
        deve conhecer. Para criar ou modificar um valor, basta definir o parâmetro do objeto
        <classname>Zend_Config</classname> através do assessor de parâmetro
        (<emphasis>-&gt;</emphasis>). Para criar uma seção na raiz ou para criar um ramo, você
        apenas irá criar uma nova matriz ("<command>$config-&gt;branch = array();</command>"). Para
        definir qual seção estende outra, você chamará o método <methodname>setExtend()</methodname>
        na raiz do objeto <classname>Zend_Config</classname>.
    </para>

    <example id="zend.config.writer.example.using">
        <title>Usando o Zend_Config_Writer</title>

        <para>
            Este exemplo ilustra a utilização básica de
            <classname>Zend_Config_Writer_Xml</classname>
            para criar um novo arquivo de configuração:
        </para>

        <programlisting language="php"><![CDATA[
// Cria o objeto de configuração
$config = new Zend_Config(array(), true);
$config->production = array();
$config->staging    = array();

$config->setExtend('staging', 'production');

$config->production->db = array();
$config->production->db->hostname = 'localhost';
$config->production->db->username = 'production';

$config->staging->db = array();
$config->staging->db->username = 'staging';

// Escreve o arquivo de configuração em uma das seguintes formas:
// a)
$writer = new Zend_Config_Writer_Xml(array('config'   => $config,
                                           'filename' => 'config.xml'));
$writer->write();

// b)
$writer = new Zend_Config_Writer_Xml();
$writer->setConfig($config)
       ->setFilename('config.xml')
       ->write();

// c)
$writer = new Zend_Config_Writer_Xml();
$writer->write('config.xml', $config);
]]></programlisting>

        <para>
            Isso criará um arquivo de configuração <acronym>XML</acronym> com as seções de produção
            e de testes, onde testes estende produção.
        </para>
    </example>

    <example id="zend.config.writer.modifying">
        <title>Modificando uma Configuração Existente</title>

        <para>
            Este exemplo demonstra como editar um arquivo de configuração existente.
        </para>

        <programlisting language="php"><![CDATA[
// Carrega todas as seções de um arquivo de configuração
// existente, enquanto pula o que é estendido.
$config = new Zend_Config_Ini('config.ini',
                              null,
                              array('skipExtends'        => true,
                                    'allowModifications' => true));

// Modifica um valor
$config->production->hostname = 'foobar';

// Escreve o arquivo de configuração
$writer = new Zend_Config_Writer_Ini(array('config'   => $config,
                                           'filename' => 'config.ini'));
$writer->write();
]]></programlisting>
    </example>

    <note>
        <title>Carregando um Arquivo de Configuração</title>

        <para>
            Ao carregar um arquivo de configuração existente para modificações, é muito importante
            que se carregue todas as seções e que se pule tudo o que é estendido, para que valores
            não sejam fundidos. Isto é feito passando o <emphasis>skipExtends</emphasis> como opção
            para o construtor.
        </para>
    </note>

    <para>
        Para todos os escritores baseados em arquivo (<acronym>INI</acronym>, <acronym>XML</acronym>
        e Matriz <acronym>PHP</acronym>) internamente o <methodname>render()</methodname> é usado
        para construir a string de configuração. Este método também pode ser usado externamente caso
        precise acessar a string de representação dos dados de configuração.
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
