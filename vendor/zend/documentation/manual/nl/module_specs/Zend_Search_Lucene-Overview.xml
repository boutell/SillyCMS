<sect1 id="zend.search.lucene.overview">
    <title>Overzicht</title>

    <sect2 id="zend.search.lucene.introduction">
        <title>Inleiding</title>
        <para>
            Zend Search_Lucene is een algemene tekst search engine die volledig in PHP 5 is geschreven.
            Omdat het zijn indexbestanden op het bestandssysteem schrijft en geen database server nodig
            heeft, kan het zoekmogelijkheden aanbieden aan vrijwel elke door PHP gestuurde websites.
            Zend_Search_Lucene biedt de volgende mogelijkheden:

            <itemizedlist>
                <listitem>
                    <para>Geordend zoeken - betere resultaten eerst</para>
                </listitem>
                <listitem>
                    <para>
                       Veel krachtige querytypes: ##VERT. phrase queries, wildcard queries,
                       proximity queries, range queries## en meer
                        <footnote>
                           <para>
                             Alleen term en multi-term queries worden op dit moment ondersteund.
                           </para>
                        </footnote>
                    </para>
                </listitem>
                <listitem>
                    <para>Zoeken op een bepaald veld (bv: titel, auteur, inhoud)</para>
                </listitem>
            </itemizedlist>

            Zend_Search_Lucene werd afgeleid van het Apache Lucene project. Voor meer informatie over Lucene kan
            je terecht op:
            <ulink url="http://lucene.apache.org/java/docs/"/>.
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.index-creation.documents-and-fields">
        <title>Document en Veld Objecten</title>
            <para>
                Zend_Search_Lucene beschouwt documenten als eenheden voor de indexering. Een document wordt dan
                opgedeeld in benoemde velden en velden hebben inhoud waarop kan gezocht worden.
            </para>

            <para>
                Een document wordt voorgesteld als een Zend_Search_Lucene_Document object, en dit object bevat
                Zend_Search_Lucene_Field objecten die de velden voorstellen.
            </para>

            <para>
                Belangrijk: eender welke informatie kan aan de index worden toegevoegd.
                Applicatie-specifieke informatie of metadata kan worden opgeslaan in
                de documentvelden en later worden opgevraagd met het document tijdens het zoeken.
            </para>

            <para>
                Het is de verantwoordelijkheid van je applicatie om de indexer aan te sturen.
                Dit betekent dat data vanuit elke bron die toegankelijk is door je applicatie kan worden geindexeerd. Bijvoorbeeld de harde schijf, een database, een HTML formulier, etc.
            </para>

            <para>
                De <code>Zend_Search_Lucene_Field</code> klasse bied verschillende statische methodes om velden met verschillende eigenschappen aan te maken:
            </para>

            <programlisting role="php"><![CDATA[<?php
$doc = new Zend_Search_Lucene_Document();

// Het veld worde niet tokenized, maar wordt geindexeerd en opgeslagen in de index
// Opgeslagen velden kunnen uit de index worden opgevraagd
$doc->addField(Zend_Search_Lucene_Field::Keyword('doctype',
                                                 'autogenerated'));

// Veld wordt niet tokenized en niet geindexeerd, maar wordt wel in de index opgeslagen
$doc->addField(Zend_Search_Lucene_Field::UnIndexed('created',
                                                   time()));

// Binaire string veld wordt niet tokenized en niet geindexeerd,
// maar wordt wel in de index opgeslagen
$doc->addField(Zend_Search_Lucene_Field::Binary('icon',
                                                $iconData));

// Veld is tokenized en geindexeerd, en opgeslagen in de index
$doc->addField(Zend_Search_Lucene_Field::Text('annotation',
                                              'Document annotation text'));

// Veld is tokenized en geindexeerd, maar niet opgeslagen in de index
$doc->addField(Zend_Search_Lucene_Field::UnStored('contents',
                                                  'My document content'));

?>]]></programlisting>

            <para>
            Je kan velden je eigen naam geven. Een "contents" veld naam wordt standaard tijdens het zoeken gebruikt. Het is een goed idee om de belangrijke informatie uit documenten in een veld met deze naam te plaatsen.
            </para>
    </sect2>

    <sect2 id="zend.search.lucene.index-creation.understanding-field-types">
        <title>Veld Types Begrijpen</title>
        <itemizedlist>
            <listitem>
                <para>
                    <code>Keyword</code> velden worden opgeslagen en geindexeerd, wat betekent dat ze doorzocht kunnen worden en ook in de zoekresultaten getoond kunnen worden. Ze worden niet opgesplitst in aparte woorden door 'tokenization'. 'Enumerated' database velden lenen zich over het algemeen goed voor Keyword velden in Zend_Search_Lucene.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>UnIndexed</code> velden zijn niet doorzoekbaar, maar worden wel teruggegeven bij zoek resultaten. Database timestamps, primaire sleutels, paden op het bestandssysteem en andere externe identifiers zijn goede kandidaten voor UnIndexed velden.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Binary</code> velden worden niet tokenized of geindexeerd, maar worden wel opgeslagen om bij zoekresultaten te gebruiken.
                    Ze kunnen gebruikt worden om data op te slaan als binaire string, zoals een icoontje.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Text</code> velden worden opgeslagen, geindexeerd en tokenized. Tekst velden zijn zeer toepasselijk voor het opslaan van informatie zoals onderwerpen en titels die doorzoekbaar moeten zijn en ook bij de zoekresultaten beschikbaar moeten zijn.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>UnStored</code> velden worden tokenized en geindexeerd, maar niet opgeslagen in de index. Grote hoeveelheden tekst worden het best geindexeerd in dit type velden. Data opslaan zorgt voor een grotere index op de harde schijf, dus als je het moet doorzoeken maar niet hoeft weer te geven, kan je het beste een UnStored veld gebruiken.
                    UnStored velden zijn praktisch wanneer ze worden gebruikt met een Zend_Search_Lucene index in combinatie met een relationele database. Je kan grote data velden met UnStored velden indexeren om te doorzoeken, en om ze yut de relationele database te halen met aparte velden als identifier.
               </para>

                <table>
                    <title>Zend_Search_Lucene_Field Types</title>
                    <tgroup cols="4">
                        <thead>
                            <row>
                                <entry>Field Type</entry>
                                <entry>Stored</entry>
                                <entry>Indexed</entry>
                                <entry>Tokenized</entry>
                                <entry>Binary</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>Keyword</entry>
                                <entry>Ja</entry>
                                <entry>Ja</entry>
                                <entry>Nee</entry>
                                <entry>Nee</entry>
                            </row>
                            <row>
                                <entry>UnIndexed</entry>
                                <entry>Ja</entry>
                                <entry>Nee</entry>
                                <entry>Nee</entry>
                                <entry>Nee</entry>
                            </row>
                            <row>
                                <entry>Binary</entry>
                                <entry>Ja</entry>
                                <entry>Nee</entry>
                                <entry>Nee</entry>
                                <entry>Ja</entry>
                            </row>
                            <row>
                                <entry>Text</entry>
                                <entry>Ja</entry>
                                <entry>Ja</entry>
                                <entry>Ja</entry>
                                <entry>Nee</entry>
                            </row>
                            <row>
                                <entry>UnStored</entry>
                                <entry>Nee</entry>
                                <entry>Ja</entry>
                                <entry>Ja</entry>
                                <entry>Nee</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
           </listitem>
       </itemizedlist>
    </sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
