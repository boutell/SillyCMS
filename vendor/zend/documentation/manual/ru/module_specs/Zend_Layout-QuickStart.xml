<sect1 id="zend.layout.quickstart">
    <title>Zend_Layout - Быстрый старт</title>

    <para>
        В этом разделе представлены два основных способа использования
        <code>Zend_Layout</code>: с MVC и без.
    </para>

    <sect2 id="zend.layout.quickstart.layouts">
        <title>Скрипты макетов</title>

        <para>
            В обоих случаях вам нужно создать скрипт макета.
            Скрипты макета используют Zend_View (или другую
            реализацию интерфейса Zend_View_Interface, используемую вами).
            Переменные макета регистрируются с помощью
            <link linkend="zend.view.helpers.initial.placeholder">метки
            заполнения</link> <code>Zend_Layout</code>-а,
            и доступ к ним может быть произведен через
            <link linkend="zend.view.helpers.initial.placeholder">помощника
            меток заполнения</link>, либо путем извлечения их как свойств
            объекта макета посредством помощника макета.
        </para>

        <para>
            Пример:
        </para>

        <programlisting language="php"><![CDATA[
<!DOCTYPE html
    PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>My Site</title>
</head>
<body>
<?php
    // извлечение содержимого ключа 'content'
    // с использованием помощника макета:
    echo $this->layout()->content;

    // извлечение содержимого ключа 'foo'
    // с использованием помощника меток заполнения:
    echo $this->placeholder('Zend_Layout')->foo;

    // извлечение объекта макета и получение различных переменных из него
    $layout = $this->layout();
    echo $layout->bar;
    echo $layout->baz;
?>
</body>
</html>
]]></programlisting>

        <para>
            Поскольку <code>Zend_Layout</code> использует <code>Zend_View</code>
            для рендеринга, то вы можете использовать любые зарегистрированные
            помощники видов, а также обращаться к любым установленным ранее
            переменным вида.
            Особенно полезны различные <link
                linkend="zend.view.helpers.initial.placeholder">помощники меток
                заполнения</link>, так как они позволяют извлекать содержимое
                таких областей, как раздел &lt;head&gt;, навигация и т.п.:
        </para>

        <programlisting language="php"><![CDATA[
<!DOCTYPE html
    PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <?= $this->headTitle() ?>
    <?= $this->headScript() ?>
    <?= $this->headStyle() ?>
</head>
<body>
    <?= $this->render('header.phtml') ?>

    <div id="nav"><?= $this->placeholder('nav') ?></div>

    <div id="content"><?= $this->layout()->content ?></div>

    <?= $this->render('footer.phtml') ?>
</body>
</html>
]]></programlisting>
    </sect2>

    <sect2 id="zend.layout.quickstart.mvc">
        <title>Использование Zend_Layout с MVC Zend Framework-а</title>

        <para>
            <code>Zend_Controller</code> предлагает богатый набор
            возможностей для расширения посредством
            <link linkend="zend.controller.plugins">плагинов
            фронт-контроллера</link> и <link
            linkend="zend.controller.actionhelpers">помощников действий</link>.
            <code>Zend_View</code> тоже имеет своих
            <link linkend="zend.view.helpers">помощников</link>.
            <code>Zend_Layout</code> использует возможности такого расширения
            при использовании с компонентами MVC.
        </para>

        <para>
            <code>Zend_Layout::startMvc()</code> создает экземпляр
            <code>Zend_Layout</code> с любой предоставленной вами конфигурацией
            (опционально). Затем он регистрирует плагин фронт-контроллера,
            который производит рендеринг макета с любым содержимым приложения
            сразу, как только завершается цикл диспетчеризации, регистрирует
            помощник действия для доступа к объекту макета из ваших контроллеров
            действий. Кроме этого, вы можете в любой момент времени извлечь
            экземпляр макета внутри скрипта вида, используя помощник вида
            <code>layout</code>.
        </para>

        <para>
            Для начала посмотрим, как производится инициализация Zend_Layout для
            использования в MVC:
        </para>

        <programlisting language="php"><![CDATA[<?php
// В вашем файле загрузки:
Zend_Layout::startMvc();
?>]]></programlisting>

        <para>
            <code>startMvc()</code> может принимать массив опций или объект
            <code>Zend_Config</code> для настойки экземпляра. Эти опции описаны
            в <xref linkend="zend.layout.options" />.
        </para>

        <para>
            В контроллере действий вы можете обращаться к экземпляру макета как
            к помощнику действий:
        </para>

        <programlisting language="php"><![CDATA[<?php
class FooController extends Zend_Controller_Action
{
    public function barAction()
    {
        // отключение макета для данного действия
        $this->_helper->layout->disableLayout();
    }

    public function bazAction()
    {
        // использование другого скрипта макета с этим действием
        $this->_helper->layout->setLayout('foobaz');
    };
}
?>]]></programlisting>

        <para>
            В своих скриптах вида вы можете обращаться к объекту вида через
            помощник вида <code>layout</code>. Этот помощник вида немного
            отличается от остальных тем, что не принимает аргументов и
            возвращает объект вместо строкового значения. Это позволяет сразу
            вызывать методы объекта макета:
        </para>

        <programlisting language="php"><![CDATA[
<?php $this->layout()->setLayout('foo'); // установка другого макета ?>
]]></programlisting>

        <para>
            Вы можете в любой момент времени извлечь зарегистрированный с MVC
            экземпляр <code>Zend_Layout</code>, используя статический метод
            <code>getMvcInstance()</code>:
        </para>

        <programlisting language="php"><![CDATA[<?php
// Возвращает null, если до этого не был вызван startMvc()
$layout = Zend_Layout::getMvcInstance();
?>]]></programlisting>

        <para>
            Наконец, плагин фронт-контроллера для <code>Zend_Layout</code>-а
            имеет одну ценную возможность в дополнение к рендерингу самого
            макета: он извлекает все именованные сегменты из объекта ответа и
            устанавливает их как переменные макета, при этом сегмент 'default'
            присваивается переменной 'content'. Это позволяет иметь доступ к
            содержимому приложения и производить его рендеринг в вашем скрипте
            вида.
        </para>

        <para>
            Для примера предположим, что в вашем приложении вызывается
            <code>FooController::indexAction()</code>, который производит
            рендеринг некоторого содержимого в используемый по умолчанию сегмент
            ответа и затем производит переход к действию
            <code>NavController::menuAction()</code>, который рендерит
            содержимое в сегмент 'nav' объекта ответа. Наконец, вы производите
            переход к действию <code>CommentController::fetchAction()</code> и
            извлекаете комментарии, но их рендеринг производится в
            используемый по умолчанию сегмент (комментарии добавляются в конец
            уже имеющегося содержимого). Ваш скрипт вида может затем произвести
            их рендеринг по отдельности:
        </para>

        <programlisting language="php"><![CDATA[
<body>
    <!-- рендеринг /nav/menu -->
    <div id="nav"><?= $this->layout()->nav ?></div>

    <!-- рендеринг /foo/index + /comment/fetch -->
    <div id="content"><?= $this->layout()->content ?></div>
</body>
]]></programlisting>

        <para>
            Эта возможность особенно полезна, если используется вместе с
            <link linkend="zend.controller.actionhelpers.actionstack">помощником
            действий</link> и
            <link
            linkend="zend.controller.plugins.standard.actionstack">плагином
            ActionStack</link>, с помощью которых вы можете создавать
            стек действий для обхода в цикле диспетчеризации и таким
            образом создавать страницы с различными "виджетами".
        </para>
    </sect2>

    <sect2 id="zend.layout.quickstart.standalone">
        <title>Использование Zend_Layout как отдельной компоненты</title>

        <para>
            Как отдельная компонента Zend_Layout не предоставляет столько
            возможностей или такого удобства, как в случае использовании с MVC.
            Тем не менее, и в таком использовании сохраняются два основных
            преимущества:
        </para>

        <itemizedlist>
            <listitem><para>
                    Область видимости переменных макета.
            </para></listitem>

            <listitem><para>
                    Отделение скрипта макета от других скриптов видов.
            </para></listitem>
        </itemizedlist>

        <para>
            При использовании Zend_Layout в качестве отдельной компоненты просто
            инстанцируйте объект макета, используйте различные аксессоры для
            установки состояния, устанавливайте переменные как свойства объекта
            и производите рендеринг макета:
        </para>

        <programlisting language="php"><![CDATA[<?php
$layout = new Zend_Layout();

// Установка пути к скриптам макета:
$layout->setLayoutPath('/path/to/layouts');

// установка переменных:
$layout->content = $content;
$layout->nav     = $nav;

// выбор другого скрипта вида:
$layout->setLayout('foo');

// рендеринг конечного макета
echo $layout->render();
?>]]></programlisting>
    </sect2>

    <sect2 id="zend.layout.quickstart.example">
        <title>Пример макета</title>

        <para>
            Иногда одна картинка стоит тысячи слов. Ниже показан пример
            скрипта макета, показывающий, как все это может быть объединено.
        </para>

         <para>
            <inlinegraphic align="center" valign="middle"
                fileref="figures/zend.layout.quickstart.example.png" format="PNG" />
        </para>

        <para>
            Действительный порядок элементов может быть иным в зависимости от
            установленного CSS. Например, если вы используете абсолютное
            позиционирование, то можете разместить навигацию в конце документа,
            но она будет отображаться вверху, то же самое можно сказать о
            боковой панели, заголовке. Реальный порядок извлечения
            содержимого остается тем же.
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
