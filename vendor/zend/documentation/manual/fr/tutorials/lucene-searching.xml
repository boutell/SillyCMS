<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 19807 -->
<!-- Reviewed: no -->
<sect1 id="learning.lucene.searching">
    <title>Recherche</title>

    <para>
        La recherche s'effectue en utilisant la méthode <methodname>find()</methodname>&#160;:
    </para>

    <example id="learning.lucene.searching.search-example">
        <title>Recherche à travers l'index</title>

        <programlisting language="php"><![CDATA[
$hits = $index->find($query);
foreach ($hits as $hit) {
    printf("%d %f %s\n", $hit->id, $hit->score, $hit->title);
}
]]></programlisting>
    </example>

    <para>
        Cet exemple montre l'utilisation de deux propriétés particulières des résultats de
        recherche&#160;-&#160;<property>id</property> et <property>score</property>.
    </para>

    <para>
        <property>id</property> est un identifiant interne de document utilisé dans un index Lucene.
        Il peut être utilisé pour un certains nombre d'opérations, tels que la suppression d'un
        document de l'index&#160;:
    </para>

    <example id="learning.lucene.searching.delete-example">
        <title>Suppression d'un document indexé</title>

        <programlisting language="php"><![CDATA[
$index->delete($id);
]]></programlisting>
    </example>

    <para>
        Ou récupération d'un document à partir de l'index&#160;:
    </para>

    <example id="learning.lucene.searching.retrieve-example">
        <title>Récupération d'un document indexé</title>

        <programlisting language="php"><![CDATA[
$doc = $index->getDocument($id);
]]></programlisting>
    </example>

    <note id="learning.lucene.searching.identifiers">
        <title>Identifiant interne de document</title>

        <para>
            Note importante&#160;! Les identifiants de documents internes peuvent changer suite à
            une optimisation de l'index ou au processus d'auto-optimisation, mais il ne sera jamais
            changé pendant l'exécution d'un script à moins que ne soient appellées les méthodes
            <methodname>addDocument()</methodname> (ce qui peut impliquer une procédure
            d'auto-optimisation) ou <methodname>optimize()</methodname>.
        </para>
    </note>

    <para>
        Le champ <property>score</property> est un score de résultat. Les résultats de recherche
        sont triés par score (meilleurs résultats en premier).
    </para>

    <para>
        Il est aussi possible de trier l'ensemble de résultats en fonction d'une valeur de champ
        spécifique. Voir la <link
            linkend="zend.search.lucene.searching.sorting"> documentation
            <classname>Zend_Search_Lucene</classname></link> pour plus de détails sur cette
        possibilité.
    </para>

    <para>
        Cette exemple montre aussi la possibilité d'accéder à des champs stockés (ex&#160;:
        <command>$hit->title</command>). Les champs de documents stockés sont chargés lors du
        premier accès à l'une des propriété du résultat autre que
        <property>id</property> ou <property>score</property>, et la valeur du champ correspondant
        est retournée.
    </para>

    <para>
        Ceci cause une ambiguïté car les documents ont leurs propres champs <property>id</property>
        ou <property>score</property> par conséquence, il n'est pas recommendé d'utiliser ces noms
        de champs dans les documents stockés. Cependant, ils peuvent être accédé via la
        méthode&#160;: <methodname>getDocument()</methodname>
    </para>

    <example id="learning.lucene.searching.id-score-fields">
        <title>Accéder aux champs "id" et "score" original du documents</title>

        <programlisting language="php"><![CDATA[
$id    = $hit->getDocument()->id;
$score = $hit->getDocument()->score;
]]></programlisting>
    </example>
</sect1>
