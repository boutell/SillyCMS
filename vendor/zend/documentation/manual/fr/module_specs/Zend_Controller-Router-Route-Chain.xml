<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 20765 -->
<!-- Reviewed: no -->
<sect3 id="zend.controller.router.routes.chain">
    <title>Zend_Controller_Router_Route_Chain</title>

    <para>
        <classname>Zend_Controller_Router_Route_Chain</classname> est une route permettant le chainage
        d'autres routes. Ceci permet de chainer des routes hostnames à des routes de chemin, ou de multiples
        routes de chemin entre elles, par exemple. Le chainage se configure via des méthodes ou un fichier
        de configuration.
    </para>

    <note>
        <title>Priorité des paramètres</title>
        <para>
            En chainant des routes entre elles, les paramètres de la route la plus externe
            (la plus proche) ont une prioprité supérieure aux paramètres des routes les plus
            internes (encapsulées). Définir un contrôleur dans la route externe, puis dans la route
            interne, c'est celui de la route externe qui sera sélectionné.
        </para>
    </note>

    <para>
        En réalisant le chainage via les méthodes, il existe 2 manières de procéder. La première
        est de créer un objet <classname>Zend_Controller_Router_Route_Chain</classname> puis
        d'appeler la méthode <methodname>chain()</methodname> plusieurs fois en lui passant les routes à chainer.
        La deuxième méthode consiste à créer la première route, par exemple une route hostname, puis
        d'appeler sa méthode <methodname>chain()</methodname> en passant comme paramètre la route qui devrait
        être ajoutée. Ceci ne modifiera pas la route hostname, mais retournera une instance de
        <classname>Zend_Controller_Router_Route_Chain</classname> possédant les 2 routes chainées:
    </para>

    <programlisting language="php"><![CDATA[
// Créer deux routes
$hostnameRoute = new Zend_Controller_Router_Route_Hostname(...);
$pathRoute     = new Zend_Controller_Router_Route(...);

// Première méthode, utiliser l'objet de chainage
$chainedRoute = new Zend_Controller_Router_Route_Chain();
$chainedRoute->chain($hostnameRoute)
             ->chain($pathRoute);

// Deuxième méthode, chainage direct
$chainedRoute = $hostnameRoute->chain($pathRoute);
]]></programlisting>

    <para>
        Le chainage utilise le slash comme séparateur par défaut entre les routes.
        Pour utiliser un séparateur différent, procédez comme suite:
    </para>

    <programlisting language="php"><![CDATA[
// Créer deux routes
$firstRoute  = new Zend_Controller_Router_Route('foo');
$secondRoute = new Zend_Controller_Router_Route('bar');

// Chainer les routes avec un séparateur particulier
$chainedRoute = $firstRoute->chain($secondRoute, '-');

// Assemble la route: "foo-bar"
echo $chainedRoute->assemble();
]]></programlisting>

    <sect4 id="zend.controller.router.routes.chain.config">
        <title>Chainer des routes via Zend_Config</title>

        <para>
            Pour chainer les route grâce à un fichier de configuration, il faut considérer des paramètres
            additionnels. L'approche la plus simple consiste à utiliser les paramètres de la
            section <code>chains</code>. Il s'agit simplement d'une liste de routes qui seront chainées à
            la route parente. Ce n'est ni le parent, ni un des enfants qui sera ajouté au routeur, mais bien
            le résultat de la chaine générale. Le nom de cette chaine dans le routeur sera constitué du nom
            de la route parente séparé du nom des enfants par un tiret (-) par défaut. Voici un exemple:
        </para>

        <programlisting language="xml"><![CDATA[
<routes>
    <www type="Zend_Controller_Router_Route_Hostname">
        <route>www.example.com</route>
        <chains>
            <language type="Zend_Controller_Router_Route">
                <route>:language</route>
                <reqs language="[a-z]{2}">
                <chains>
                    <index type="Zend_Controller_Router_Route_Static">
                        <route></route>
                        <defaults module="default" controller="index" action="index" />
                    </index>
                    <imprint type="Zend_Controller_Router_Route_Static">
                        <route>imprint</route>
                        <defaults module="default" controller="index" action="index" />
                    </imprint>
                </chains>
            </language>
        </chains>
    </www>
    <users type="Zend_Controller_Router_Route_Hostname">
        <route>users.example.com</route>
        <chains>
            <profile type="Zend_Controller_Router_Route">
                <route>:username</route>
                <defaults module="users" controller="profile" action="index" />
            </profile>
        </chains>
    </users>
    <misc type="Zend_Controller_Router_Route_Static">
        <route>misc</route>
    </misc>
</routes>
]]></programlisting>

        <para>
            Le résultat sera 3 routes <code>www-language-index</code>,
            <code>www-language-imprint</code> et
            <code>users-language-profile</code> qui seront utilisées en fonction du nom d'hote
            et de la route <code>misc</code>, qui elle sera utilisée pour tout nom d'hôte.
        </para>

        <para>
            Autre manière de faire : utiliser les nom des routes directement. Cela ne peut se faire
            que pour le niveau racine:
        </para>

        <programlisting language="xml"><![CDATA[
<routes>
    <www type="Zend_Controller_Router_Route_Chain">
        <route>www.example.com</route>
    </www>
    <language type="Zend_Controller_Router_Route">
        <route>:language</route>
        <reqs language="[a-z]{2}">
    </language>
    <index type="Zend_Controller_Router_Route_Static">
        <route></route>
        <defaults module="default" controller="index" action="index" />
    </index>
    <imprint type="Zend_Controller_Router_Route_Static">
        <route>imprint</route>
        <defaults module="default" controller="index" action="index" />
    </imprint>

    <www-index type="Zend_Controller_Router_Route_Chain">
        <chain>www, language, index</chain>
    </www-index>
    <www-imprint type="Zend_Controller_Router_Route_Chain">
        <chain>www, language, imprint</chain>
    </www-imprint>
</routes>
]]></programlisting>

        <para>
            On peut aussi passer un tableau à <code>chain</code> plutôt que les noms de route séparés par des virgules:
        </para>

        <programlisting language="xml"><![CDATA[
<routes>
    <www-index type="Zend_Controller_Router_Route_Chain">
        <chain>www</chain>
        <chain>language</chain>
        <chain>index</chain>
    </www-index>
    <www-imprint type="Zend_Controller_Router_Route_Chain">
        <chain>www</chain>
        <chain>language</chain>
        <chain>imprint</chain>
    </www-imprint>
</routes>
]]></programlisting>
        <para>
            Pour spécifier le séparateur de routes avec <classname>Zend_Config</classname>
            , agissez comme suit:
        </para>

        <programlisting language="php"><![CDATA[
$config = new Zend_Config(array(
    'chainName' => array(
        'type'   => 'Zend_Controller_Router_Route_Static',
        'route'  => 'foo',
        'chains' => array(
            'subRouteName' => array(
                'type'     => 'Zend_Controller_Router_Route_Static',
                'route'    => 'bar',
                'defaults' => array(
                    'module'      => 'module',
                     'controller' => 'controller',
                     'action'     => 'action'
                )
            )
        )
    )
));

// Affecte un séparateur avant configuration
$router->setChainNameSeparator('_separator_')

// Ajoute la configuration
$router->addConfig($config);

// La nom de notre route est maintenant: chainName_separator_subRouteName
echo $this->_router->assemble(array(), 'chainName_separator_subRouteName');

// La preuve: cela affiche /foo/bar
]]></programlisting>
    </sect4>
</sect3>
<!--
vim:se ts=4 sw=4 et:
-->
