<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 20792 -->
<!-- Reviewed: no -->
<sect1 id="zend.json.xml2json">
    <title>XML to JSON conversion</title>

    <para>
        <classname>Zend_Json</classname> fournit une méthode de convenance pour transformer
        des données au format <acronym>XML</acronym> en un format <acronym>JSON</acronym>. Ce dispositif est inspiré <ulink
        url="http://www.ibm.com/developerworks/xml/library/x-xml2jsonphp/">d'un article de
        developerWorks d'IBM</ulink>.
    </para>

    <para>
        <classname>Zend_Json</classname> inclut une fonction statique appelée
        <methodname>Zend_Json::fromXml()</methodname>. Cette fonction produira du <acronym>JSON</acronym> à partir d'une
        entrée au format <acronym>XML</acronym>. Cette fonction prend n'importe quelle chaîne arbitraire <acronym>XML</acronym> comme
        paramètre d'entrée. Elle prend également un paramètre booléen facultatif d'entrée pour
        informer la logique de conversion d'ignorer ou non les attributs <acronym>XML</acronym> pendant le processus de
        conversion. Si ce paramètre facultatif d'entrée n'est pas donné, alors le comportement par
        défaut est d'ignorer les attributs <acronym>XML</acronym>. Cet appel de fonction est réalisé comme ceci
        :
    </para>

    <programlisting language="php"><![CDATA[
// la fonction fromXml prend simplement une chaîne
// contenant le XML comme entrée
$jsonContents = Zend_Json::fromXml($xmlStringContents, true);
]]></programlisting>

    <para>
        La fonction <methodname>Zend_Json::fromXml()</methodname> fait la conversion du
        paramètre d'entrée (chaîne au format <acronym>XML</acronym>) et renvoie le rendu équivalent sous forme de
        chaîne au format <acronym>JSON</acronym>. En cas d'erreur, de format <acronym>XML</acronym> ou de logique de conversion, cette
        fonction lèvera une exception. La logique de conversion emploie également des techniques
        récursives à travers l'arbre <acronym>XML</acronym>. Il supporte la récursivité jusqu'à 25 niveaux de
        profondeur. Au delà de cette profondeur, elle lèvera une
        <classname>Zend_Json_Exception</classname>. Il y a plusieurs fichiers <acronym>XML</acronym>, avec différents
        niveaux de complexité, fournis dans le répertoire tests de Zend Framework. Ils peuvent être
        utilisés pour tester la fonctionnalité du dispositif xml2json.
    </para>

    <para>
        Ce qui suit est un exemple simple qui montre à la fois la chaîne <acronym>XML</acronym> fournie et la
        chaîne <acronym>JSON</acronym> retournée en résultat de la fonction
        <methodname>Zend_Json::fromXml()</methodname>. Cet exemple utilise le paramètre facultatif
        pour ne pas ignorer les attributs <acronym>XML</acronym> pendant la conversion. Par conséquent, vous pouvez
        noter que la chaîne résultante <acronym>JSON</acronym> inclut une représentation des attributs <acronym>XML</acronym> actuels de
        la chaîne <acronym>XML</acronym> fournie.
    </para>

    <para>Chaîne <acronym>XML</acronym> fournie à la fonction <methodname>Zend_Json::fromXml()</methodname> :</para>

    <programlisting language="php"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<books>
    <book id="1">
        <title>Code Generation in Action</title>
        <author><first>Jack</first><last>Herrington</last></author>
        <publisher>Manning</publisher>
    </book>

    <book id="2">
        <title>PHP Hacks</title>
        <author><first>Jack</first><last>Herrington</last></author>
        <publisher>O'Reilly</publisher>
    </book>

    <book id="3">
        <title>Podcasting Hacks</title>
        <author><first>Jack</first><last>Herrington</last></author>
        <publisher>O'Reilly</publisher>
    </book>
</books>
]]></programlisting>

    <para>
        Chaîne <acronym>JSON</acronym> retournée par la fonction <methodname>Zend_Json::fromXml()</methodname>
        :
    </para>

    <programlisting language="php"><![CDATA[
{
   "books" : {
      "book" : [ {
         "@attributes" : {
            "id" : "1"
         },
         "title" : "Code Generation in Action",
         "author" : {
            "first" : "Jack", "last" : "Herrington"
         },
         "publisher" : "Manning"
      }, {
         "@attributes" : {
            "id" : "2"
         },
         "title" : "PHP Hacks", "author" : {
            "first" : "Jack", "last" : "Herrington"
         },
         "publisher" : "O'Reilly"
      }, {
         "@attributes" : {
            "id" : "3"
         },
         "title" : "Podcasting Hacks", "author" : {
            "first" : "Jack", "last" : "Herrington"
         },
         "publisher" : "O'Reilly"
      }
   ]}
}
]]></programlisting>

    <para>
        Plus de détails au sujet de ce dispositif xml2json peuvent être trouvés dans la
        proposition originale elle-même. Jetez un oeil à la <ulink
        url="http://framework.zend.com/wiki/display/ZFPROP/Zend_xml2json+-+Senthil+Nathan">proposition
        Zend_xml2json</ulink>.
    </para>
</sect1>