<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<sect1 id="zend.loader.prefix-path-loader">
    <title>The PrefixPathLoader</title>

    <sect2 id="zend.loader.prefix-path-loader.intro">
        <title>Overview</title>

        <para>
            Zend Framework's 1.X series introduced a plugin methodology surrounding associations of
            vendor/component prefixes and filesystem paths in the
            <classname>Zend_Loader_PluginLoader</classname> class. Zend Framework 2 provides
            equivalent functionality with the <classname>PrefixPathLoader</classname> class, and
            expands it to take advantage of PHP 5.3 namespaces.
        </para>

        <para>
            The concept is relatively simple: a given vendor prefix or namespace is mapped to one or
            more paths, and multiple prefix/path maps may be provided. To resolve a plugin name, the
            prefixes are searched as a stack (i.e., last in, first out, or LIFO), and each path
            associated with the prefix is also searched as a stack. As soon as a file is found
            matching the plugin name, the class will be returned. 
        </para>

        <para>
            Since searching through the filesystem can lead to performance degradation, the
            <classname>PrefixPathLoader</classname> provides several optimizations. First, it will
            attempt to autoload a plugin before scanning the filesystem. This allows you to benefit
            from your autoloader and/or an opcode cache. Second, it aggregates the class name and
            class file associated with each discovered plugin. You can then retrieve this
            information and cache it for later seeding a <link
                linkend="zend.loader.class-map-autoloader">ClassMapAutoloader</link> and 
            <link linkend="zend.loader.plugin-class-loader">PluginClassLoader</link>.
        </para>

        <para>
            <classname>PrefixPathLoader</classname> implements the
            <interfacename>ShortNameLocater</interfacename> and
            <interfacename>PrefixPathMapper</interfacename> interfaces.
        </para>

        <note>
            <title>Case Sensitivity</title>

            <para>
                Unlike the <link linkend="zend.loader.plugin-class-loader">PluginClassLoader</link>,
                plugins resolved via the <classname>PrefixPathLoader</classname> are considered case
                sensitive. This is due to the fact that the lookup is done on the filesystem, and
                thus a file exactly matching the plugin name must exist.
            </para>
        </note>

        <note>
            <title>Preference is for Namespaces</title>

            <para>
                Unlike the Zend Framework 1 variant, the <classname>PrefixPathLoader</classname>
                assumes that "prefixes" are PHP 5.3 namespaces by default. You can override this
                behavior, however, per prefix/path you map. Please see the documentation and
                examples below for details.
            </para>
        </note>
    </sect2>

    <sect2 id="zend.loader.prefix-path-loader.quick-start">
        <title>Quick Start</title>

        <para>
            The <classname>PrefixPathLoader</classname> invariably requires some configuration -- it
            needs to know what namespaces and/or vendor prefixes it should try, as well as the paths
            associated with each. You can inform the class of these at instantiation, or later by
            calling either the <methodname>addPrefixPath()</methodname> or
            <methodname>addPrefixPaths()</methodname> methods.
        </para>

        <programlisting language="php"><![CDATA[
use Zend\Loader\PrefixPathLoader;

// Configure at instantiation:
$loader = new PrefixPathLoader(array(
    array('prefix' => 'Foo', 'path' => '../library/Foo'),
    array('prefix' => 'Bar', 'path' => '../vendor/Bar'),
));

// Or configure manually using methods:
$loader = new PrefixPathLoader();
$loader->addPrefixPath('Foo', '../library/Foo');

$loader->addPrefixPaths(array(
    array('prefix' => 'Foo', 'path' => '../library/Foo'),
    array('prefix' => 'Bar', 'path' => '../vendor/Bar'),
));
]]></programlisting>

        <para>
            Once configured, you may then attempt to lookup a plugin.
        </para>

        <programlisting language="php"><![CDATA[
if (false === ($class = $loader->load('bar'))) {
    throw new Exception("Plugin class matching 'bar' not found!");
}
$plugin = new $class();
]]></programlisting>
    </sect2>

    <sect2 id="zend.loader.prefix-path-loader.options">
        <title>Configuration Options</title>

        <variablelist>
            <title>PrefixPathLoader Options</title>

            <varlistentry>
                <term>$options</term>

                <listitem>
                    <para>
                        The constructor accepts either an array or a
                        <interfacename>Traversable</interfacename> object of prefix paths. For the
                        format allowed, please see the <link
                            linkend="zend.loader.prefix-path-loader.methods.add-prefix-paths">addPrefixPaths()</link>
                        method documentation.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </sect2>

    <sect2 id="zend.loader.prefix-path-loader.methods">
        <title>Available Methods</title>

        <refentry id="zend.loader.standard-autoloader.methods.constructor">
            <refnamediv>
                <refname>__construct</refname>
                <refpurpose>Instantiate and initialize loader</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>__construct</methodname>
                    <methodparam>
                        <funcparams>$options = null</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>__construct()</title>

                <para>
                    Instantiates and initializes a <classname>PrefixPathLoader</classname> instance.
                    If the <varname>$prefixPaths</varname> protected member is defined, it
                    re-initializes it to an <classname>Zend\Stdlib\ArrayStack</classname> instance,
                    and passes the original value to <link
                        linkend="zend.loader.prefix-path-loader.methods.add-prefix-paths">the
                        addPrefixPaths() method</link>. It then checks to see if
                    <varname>$staticPaths</varname> has been populated, and, if so, passes that on
                    to the <methodname>addPrefixPaths()</methodname> method to merge the values.
                    Finally, if <varname>$options</varname> is non-null, it passes that to
                    <methodname>addPrefixPaths()</methodname>.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.prefix-path-loader.methods.add-static-paths">
            <refnamediv>
                <refname>addStaticPaths</refname>
                <refpurpose>Add paths statically</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>addStaticPaths</methodname>
                    <methodparam>
                        <funcparams>$paths</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>addStaticPaths()</title>

                <para>
                    Expects an array or <interfacename>Traversable</interfacename> object compatible
                    with the <methodname>addPrefixPaths()</methodname> method. This method is
                    static, and populates the protected <varname>$staticPaths</varname> member,
                    which is used during instantiation to either override default paths or add
                    additional prefix/path pairs to search.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.prefix-path-loader.methods.set-options">
            <refnamediv>
                <refname>setOptions</refname>
                <refpurpose>Configure object state</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>setOptions</methodname>
                    <methodparam>
                        <funcparams>$options</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>setOptions()</title>

                <para>
                    Proxies to <link
                        linkend="zend.loader.prefix-path-loader.methods.add-prefix-paths">addPrefixPaths()</link>.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.prefix-path-loader.methods.add-prefix-path">
            <refnamediv>
                <refname>addPrefixPath</refname>
                <refpurpose>Map a namespace/vendor prefix to the given filesystem path</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>addPrefixPath</methodname>
                    <methodparam>
                        <funcparams>$prefix, $path, $namespaced = true</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>addPrefixPath()</title>

                <para>
                    Use this method to map a single filesystem path to a given namespace or vendor
                    prefix. By default, the <varname>$prefix</varname> will be considered a PHP 5.3
                    namespace; you may specify that it is a vendor prefix by passing a boolean
                    <constant>false</constant> value to the <varname>$namespaced</varname> argument.
                </para>

                <para>
                    If the <varname>$prefix</varname> has been previously mapped, this method adds
                    another <varname>$path</varname> to a stack -- meaning the new path will be
                    searched first when attempting to resolve a plugin name to this
                    <varname>$prefix</varname>.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.prefix-path-loader.methods.add-prefix-paths">
            <refnamediv>
                <refname>addPrefixPaths</refname>
                <refpurpose>Add many prefix/path pairs at once</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>addPrefixPaths</methodname>
                    <methodparam>
                        <funcparams>$prefixPaths</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>addPrefixPaths()</title>

                <para>
                    This method expects an array or <interfacename>Traversable</interfacename>
                    object. Each item in the array or object must be one of the following:
                </para>

                <itemizedlist>
                    <listitem>
                        <para>
                            An array, with the keys "prefix" and "path", and optionally
                            "namespaced"; the keys correspond to the arguments to <link
                                linkend="zend.loader.prefix-path-loader.methods.add-prefix-path">addPrefixPath()</link>.
                            The "prefix" and "path" keys should point to string values, while the
                            "namespaced" key should be a boolean.
                        </para>
                    </listitem>

                    <listitem>
                        <para>
                            An object, with the attributes "prefix" and "path", and optionally
                            "namespaced"; the attributes correspond to the arguments to <link
                                linkend="zend.loader.prefix-path-loader.methods.add-prefix-path">addPrefixPath()</link>.
                            The "prefix" and "path" attributes should point to string values, while
                            the "namespaced" attribute should be a boolean.
                        </para>
                    </listitem>
                </itemizedlist>

                <para>
                    The method will loop over arguments, and pass values to <link
                        linkend="zend.loader.prefix-path-loader.methods.add-prefix-path">addPrefixPath()</link>
                    to process.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.prefix-path-loader.methods.get-paths">
            <refnamediv>
                <refname>getPaths</refname>
                <refpurpose>Retrieve all paths associated with a prefix, or all paths</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>getPaths</methodname>
                    <methodparam>
                        <funcparams>$prefix = null</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>getPaths()</title>

                <para>
                    Use this method to obtain the prefix/paths map. If no <varname>$prefix</varname>
                    is provided, the return value is an
                    <classname>Zend\Stdlib\ArrayStack</classname>, where the keys are namespaces or
                    vendor prefixes, and the values are <classname>Zend\Stdlib\SplStack</classname>
                    instances containing all paths associated with the given namespace or prefix.
                </para>

                <para>
                    If the <varname>$prefix</varname> argument is provided, two outcomes are
                    possible. If the prefix is not found, a boolean <constant>false</constant>
                    value is returned. If the prefix is found, a
                    <classname>Zend\Stdlib\SplStack</classname> instance containing all paths
                    associated with that prefix is returned.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.prefix-path-loader.methods.clear-paths">
            <refnamediv>
                <refname>clearPaths</refname>
                <refpurpose>Clear all maps, or all paths for a given prefix</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>clearPaths</methodname>
                    <methodparam>
                        <funcparams>$prefix = null</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>clearPaths()</title>

                <para>
                    If no <varname>$prefix</varname> is provided, all prefix/path pairs are removed.
                    If a <varname>$prefix</varname> is provided and found within the map, only that
                    prefix is removed. Finally, if a <varname>$prefix</varname> is provided, but not
                    found, a boolean <constant>false</constant> is returned.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.prefix-path-loader.methods.remove-prefix-path">
            <refnamediv>
                <refname>removePrefixPath</refname>
                <refpurpose></refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>removePrefixPath</methodname>
                    <methodparam>
                        <funcparams>$prefix, $path</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>removePrefixPath()</title>

                <para>
                    Removes a single path from a given prefix.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.prefix-path-loader.methods.is-loaded">
            <refnamediv>
                <refname>isLoaded</refname>
                <refpurpose>Has the given plugin been loaded?</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>isLoaded</methodname>
                    <methodparam>
                        <funcparams>$name</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>isLoaded()</title>

                <para>
                    Use this method to determine if the given plugin has been resolved to a class
                    and file. Unlike <classname>PluginClassLoader</classname>, this method can
                    return a boolean <constant>false</constant> even if the loader is capable of
                    loading the plugin; it simply indicates whether or not the current instance has
                    yet resolved the plugin via the <methodname>load()</methodname> method.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.prefix-path-loader.methods.get-class-name">
            <refnamediv>
                <refname>getClassName</refname>
                <refpurpose>Retrieve the class name to which a plugin resolves</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>getClassName</methodname>
                    <methodparam>
                        <funcparams>$name</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>getClassName()</title>

                <para>
                    Given a plugin name, this method will attempt to return the associated class
                    name. The method completes successfully if, and only if, the plugin has been
                    successfully loaded via <methodname>load()</methodname>. Otherwise, it will
                    return a boolean <constant>false</constant>.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.prefix-path-loader.methods.load">
            <refnamediv>
                <refname>load</refname>
                <refpurpose>Attempt to resolve a plugin to a class</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>load</methodname>
                    <methodparam>
                        <funcparams>$name</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>load()</title>

                <para>
                    Given a plugin name, the <methodname>load()</methodname> method will loop
                    through the internal <classname>ArrayStack</classname>. The plugin name is first
                    normalized using <function>ucwords()</function>, and then appended to
                    the current vendor prefix or namespace. If the resulting class name resolves via
                    autoloading, the class name is immediately returned. Otherwise, it then loops
                    through the associated <classname>SplStack</classname> of paths for the prefix,
                    looking for a file matching the plugin name (i.e., for plugin
                    <classname>Foo</classname>, file name <filename>Foo.php</filename>) in the given
                    path. If a match is found, the class name is returned.
                </para>

                <para>
                    If no match is found, a boolean false is returned.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.prefix-path-loader.methods.get-plugin-map">
            <refnamediv>
                <refname>getPluginMap</refname>
                <refpurpose>Get a list of plugin/class name pairs</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>getPluginMap</methodname>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>getPluginMap()</title>

                <para>
                    Returns an array of resolved plugin name/class name pairs. This value may be
                    used to seed a <classname>PluginClassLoader</classname> instance.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.prefix-path-loader.methods.get-class-map">
            <refnamediv>
                <refname>getClassMap</refname>
                <refpurpose>Get a list of class name/file name pairs</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>getClassMap</methodname>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>getClassMap()</title>

                <para>
                    Returns an array of resolved class name/file name pairs. This value may be used
                    to seed a <classname>ClassMapAutoloader</classname> instance.
                </para>
            </refsect1>
        </refentry>
    </sect2>

    <sect2 id="zend.loader.prefix-path-loader.examples">
        <title>Examples</title>

        <example id="zend.loader.prefix-path-loader.examples.multiple-paths">
            <title>Using multiple paths for the same prefix</title>

            <para>
                Sometimes you may have code containing the same namespace or vendor prefix in two
                different locations. Potentially, the same class may be defined in different
                locations, but with slightly different functionality. (We do not recommend this, but
                sometimes it happens.)
            </para>

            <para>
                The <classname>PrefixPathLoader</classname> easily allows for these situations;
                simply register the path you want to take precedence last.
            </para>

            <para>
                Consider the following directory structures:
            </para>

            <programlisting language="text">
project
|-- library
|   |-- Foo
|   |   |-- Bar.php
|   |   `-- Baz.php
|-- vendor
|   |-- Foo
|   |   |-- Bar.php
|   |   `-- Foobar.php
            </programlisting>

            <para>
                For purposes of this example, we'll assume that the common namespace is "Foo", and
                that the "Bar" plugin from the vendor branch is preferred. To make this possible,
                simply register the "vendor" directory last.
            </para>

            <programlisting language="php"><![CDATA[
use Zend\Loader\PrefixPathLoader;

$loader = new PrefixPathLoader();

// Multiple calls to addPrefixPath():
$loader->addPrefixPath('Foo', PROJECT_ROOT . '/library/Foo')
       ->addPrefixPath('Foo', PROJECT_ROOT . '/vendor/Foo');

// Or use a single call to addPrefixPaths():
$loader->addPrefixPaths(array(
    array('prefix' => 'Foo', 'path' => PROJECT_ROOT . '/library/Foo'),
    array('prefix' => 'Foo', 'path' => PROJECT_ROOT . '/vendor/Foo'),
));

// And then resolve plugins:
$bar    = $loader->load('bar');    // Foo\Bar from vendor/Foo/Bar.php
$baz    = $loader->load('baz');    // Foo\Baz from library/Foo/Baz.php
$foobar = $loader->load('foobar'); // Foo\Foobar from vendor/Foo/Baz.php
]]></programlisting>
        </example>

        <example id="zend.loader.prefix-path-loader.examples.optimizing">
            <title>Prototyping with PrefixPathLoader</title>

            <para>
                <classname>PrefixPathLoader</classname> is quite useful for prototyping
                applications. With minimal configuration, you can access a full directory of
                plugins, without needing to update maps as new plugins are added. However, this
                comes with a price: performance. Since plugins are resolved typically using by
                searching the filesystem, you are introducing I/O calls every time you request a new
                plugin.
            </para>

            <para>
                With this in mind, <classname>PrefixPathLoader</classname> provides two methods for
                assisting in migrating to more performant solutions. The first is
                <methodname>getClassMap()</methodname>. This method returns an array of class
                name/file name pairs suitable for use with <link
                    linkend="zend.loader.class-map-autoloader">ClassMapAutoloader</link>. Injecting
                your autoloader with that map will ensure that on subsequent calls,
                <methodname>load()</methodname> should be able to find the appropriate class via
                autoloading -- assuming that the match is on the first prefix checked.
            </para>

            <para>
                The second solution is the <methodname>getPluginMap()</methodname> method, which
                creates a plugin name/class name map suitable for injecting into a <link
                    linkend="zend.loader.plugin-class-loader">PluginClassLoader</link> instance.
                Combine this with class map-based autoloading, and you can actually eliminate I/O
                calls altogether when using an opcode cache.
            </para>

            <para>
                Usage of these methods is quite simple.
            </para>

            <programlisting language="php"><![CDATA[
// After a number of load() operations, or at the end of the request:
$classMap  = $loader->getClassMap();
$pluginMap = $loader->getPluginMap();
]]></programlisting>

            <para>
                From here, you will need to do a little work. First, you need to serialize this
                information somehow for later use. For that, there are two options:
                <classname>Zend\Serializer</classname> or <classname>Zend\Cache</classname>.
            </para>

            <programlisting language="php"><![CDATA[
// Using Zend\Serializer:
use Zend\Serializer\Serializer;

$adapter = Serializer::factory('PhpCode');
$content = "<?php\nreturn " . $adapter->serialize($classMap) . ";";
file_put_contents(APPLICATION_PATH . '/.classmap.php', $content);

// Using Zend\Cache:
use Zend\Cache\Cache;

$cache = Cache::factory(
    'Core', 'File', 
    array('lifetime' => null, 'automatic_serialization' => true),
    array('cache_dir' => APPLICATION_PATH . '/../cache/classmaps')
);
$cache->save($pluginMap, 'pluginmap');
]]></programlisting>

            <para>
                Note: the examples alternate between the class map and plugin map; however, either
                technique applies to either map.
            </para>

            <para>
                Once the data is cached, you can retrieve it late to populate. In the example of the
                class map above, you would simply pass the filename to the
                <varname>ClassMapAutoloader</varname> instance:
            </para>

            <programlisting language="php"><![CDATA[
$autoloader = new Zend\Loader\ClassMapAutoloader();
$autoloader->registerAutoloadMap(APPLICATION_PATH . '/.classmap.php');
]]></programlisting>

            <para>
                If using <classname>Zend\Cache</classname>, you would retrieve the cached data, and
                pass it to the appropriate component; in this case, we pass the value to a
                <classname>PluginClassLoader</classname> instance.
            </para>

            <programlisting language="php"><![CDATA[
$map = $cache->load('pluginmap');

$loader = new Zend\Loader\PluginClassLoader($map);
]]></programlisting>

            <para>
                With some creative and well disciplined architecture, you can likely automate these
                processes to ensure that development can benefit from the dynamic nature of the
                <classname>PrefixPathLoader</classname>, and production can benefit from the
                performance optimizations of the <classname>ClassMapAutoloader</classname> and
                <classname>PluginClassLoader</classname>.
            </para>
        </example>
    </sect2>
</sect1>
