<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<sect2 id="zend.filter.set.decrypt">
    <title>Decrypt</title>

    <para>
        This filter will decrypt any given string with the provided setting. Therefor it makes use
        of Adapters. Actually there are adapters for the <classname>Mcrypt</classname> and
        <classname>OpenSSL</classname> extensions from <acronym>PHP</acronym>.
    </para>

    <para>
        For details about how to encrypt content look at the <classname>Encrypt</classname> filter.
        As the basics are covered within the <classname>Encrypt</classname> filter, we will
        describe here only the needed additional methods and changes for decryption.
    </para>

    <sect3 id="zend.filter.set.decrypt.mcrypt">
        <title>Decryption with Mcrypt</title>

        <para>
            For decrypting content which was previously encrypted with <classname>Mcrypt</classname>
            you need to have the options with which the encryption has been called.
        </para>

        <para>
            There is one eminent difference for you. When you did not provide a vector at
            encryption you need to get it after you encrypted the content by using the
            <methodname>getVector()</methodname> method on the encryption filter. Without the
            correct vector you will not be able to decrypt the content.
        </para>

        <para>
            As soon as you have provided all options decryption is as simple as encryption.
        </para>

        <programlisting language="php"><![CDATA[
// Use the default blowfish settings
$filter = new Zend_Filter_Decrypt(array('key' => 'myencryptionkey'));

// Set the vector with which the content was encrypted
$filter->setVector('myvector');

$decrypted = $filter->filter('encoded_text_normally_unreadable');
print $decrypted;
]]></programlisting>

        <note>
            <para>
                Note that you will get an exception if the mcrypt extension is not available in your
                environment.
            </para>
        </note>

        <note>
            <para>
                You should also note that all settings which be checked when you create the instance
                or when you call <methodname>setEncryption()</methodname>. If mcrypt detects problem
                with your settings an exception will be thrown.
            </para>
        </note>
    </sect3>

    <sect3 id="zend.filter.set.decrypt.openssl">
        <title>Decryption with OpenSSL</title>

        <para>
            Decryption with <classname>OpenSSL</classname> is as simple as encryption. But you need
            to have all data from the person who encrypted the content.
        </para>

        <para>
            For decryption with <classname>OpenSSL</classname> you need:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <emphasis>private</emphasis>: Your private key which will be used for decrypting
                    the content. The private key can be either a filename with path of the key
                    file, or just the content of the key file itself.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis>envelope</emphasis>: The encrypted envelope key from the user who
                    encrypted the content. You can either provide the path and filename of the key
                    file, or just the content of the key file itself. When the
                    <property>package</property> option has been set, then you can omit this
                    parameter.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis>package</emphasis>: If the envelope key has been packed with the
                    encrypted value. Defaults to <constant>FALSE</constant>.
                </para>
            </listitem>
        </itemizedlist>

        <programlisting language="php"><![CDATA[
// Use openssl and provide a private key
$filter = new Zend_Filter_Decrypt(array(
    'adapter' => 'openssl',
    'private' => '/path/to/mykey/private.pem'
));

// of course you can also give the envelope keys at initiation
$filter->setEnvelopeKey(array(
    '/key/from/encoder/first.pem',
    '/key/from/encoder/second.pem'
));
]]></programlisting>

        <note>
            <para>
                Note that the <classname>OpenSSL</classname> adapter will not work when you do not
                provide valid keys.
            </para>
        </note>

        <para>
            Optionally it could be necessary to provide the passphrase for decrypting the keys
            themself by using the <methodname>setPassphrase()</methodname> method.
        </para>

        <programlisting language="php"><![CDATA[
// Use openssl and provide a private key
$filter = new Zend_Filter_Decrypt(array(
    'adapter' => 'openssl',
    'private' => '/path/to/mykey/private.pem'
));

// of course you can also give the envelope keys at initiation
$filter->setEnvelopeKey(array(
    '/key/from/encoder/first.pem',
    '/key/from/encoder/second.pem'
));
$filter->setPassphrase('mypassphrase');
]]></programlisting>

        <para>
            At last, decode the content. Our complete example for decrypting the previously
            encrypted content looks like this.
        </para>

        <programlisting language="php"><![CDATA[
// Use openssl and provide a private key
$filter = new Zend_Filter_Decrypt(array(
    'adapter' => 'openssl',
    'private' => '/path/to/mykey/private.pem'
));

// of course you can also give the envelope keys at initiation
$filter->setEnvelopeKey(array(
    '/key/from/encoder/first.pem',
    '/key/from/encoder/second.pem'
));
$filter->setPassphrase('mypassphrase');

$decrypted = $filter->filter('encoded_text_normally_unreadable');
print $decrypted;
]]></programlisting>
    </sect3>
</sect2>
<!--
vim:se ts=4 sw=4 et:
-->