<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<sect1 id="zend.loader.short-name-locater">
    <title>The ShortNameLocater Interface</title>

    <sect2 id="zend.loader.short-name-locater.intro">
        <title>Overview</title>

        <para>
            Within Zend Framework applications, it's often expedient to provide a mechanism for
            using class aliases instead of full class names to load adapters and plugins, or to
            allow using aliases for the purposes of slipstreaming alternate implementations into the
            framework. 
        </para>

        <para>
            In the first case, consider the adapter pattern. It's often unwieldy to utilize a full
            class name (e.g., <classname>Zend\Cloud\DocumentService\Adapter\SimpleDb</classname>);
            using the short name of the adapter, <classname>SimpleDb</classname>, would be much
            simpler.
        </para>

        <para>
            In the second case, consider the case of helpers. Let us assume we have a "url" helper;
            you may find that while the shipped helper does 90% of what you need, you'd like to
            extend it or provide an alternate implementation. At the same time, you don't want to
            change your code to reflect the new helper. In this case, a short name allows you to
            alias an alternate class to utilize.
        </para>

        <para>
            Classes implementing the <interfacename>ShortNameLocater</interfacename> interface
            provide a mechanism for resolving a short name to a fully qualified class name; how they
            do so is left to the implementers, and may combine strategies defined by other
            interfaces, such as <link
                linkend="zend.loader.plugin-class-locater">PluginClassLocater</link> or <link
                linkend="zend.loader.prefix-path-mapper">PrefixPathMapper</link>.
        </para>
    </sect2>

    <sect2 id="zend.loader.short-name-locater.quick-start">
        <title>Quick Start</title>

        <para>
            Implementing a <interfacename>ShortNameLocater</interfacename> is trivial, and requires
            only three methods, as shown below.
        </para>

        <programlisting language="php"><![CDATA[
namespace Zend\Loader;

interface ShortNameLocater
{
    public function isLoaded($name);
    public function getClassName($name);
    public function load($name);
}
]]></programlisting>
    </sect2>

    <sect2 id="zend.loader.short-name-locater.options">
        <title>Configuration Options</title>

        <para>
            This component defines no configuration options, as it is an interface.
        </para>
    </sect2>

    <sect2 id="zend.loader.short-name-locater.methods">
        <title>Available Methods</title>

        <refentry id="zend.loader.short-name-locater.methods.is-loaded">
            <refnamediv>
                <refname>isLoaded</refname>
                <refpurpose>Is the requested plugin loaded?</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>isLoaded</methodname>
                    <methodparam>
                        <funcparams>$name</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>isLoaded()</title>

                <para>
                    Implement this method to return a boolean indicating whether or not the class
                    has been able to resolve the plugin name to a class.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.short-name-locater.methods.get-class-name">
            <refnamediv>
                <refname>getClassName</refname>
                <refpurpose>Get the class name associated with a plugin name</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>getClassName</methodname>
                    <methodparam>
                        <funcparams>$name</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>getClassName()</title>

                <para>
                    Implement this method to return the class name associated with a plugin name.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.short-name-locater.methods.load">
            <refnamediv>
                <refname>load</refname>
                <refpurpose>Resolve a plugin to a class name</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>load</methodname>
                    <methodparam>
                        <funcparams>$name</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>load()</title>

                <para>
                    This method should resolve a plugin name to a class name.
                </para>
            </refsect1>
        </refentry>

    </sect2>

    <sect2 id="zend.loader.short-name-locater.examples">
        <title>Examples</title>

        <para>
            Please see the <link linkend="zend.loader.short-name-locater.quick-start">Quick
                Start</link> for the interface specification.
        </para>
    </sect2>
</sect1>
