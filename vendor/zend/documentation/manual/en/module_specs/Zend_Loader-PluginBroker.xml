<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<sect1 id="zend.loader.plugin-broker">
    <title>The PluginBroker</title>

    <sect2 id="zend.loader.plugin-broker.intro">
        <title>Overview</title>

        <para>
            Many components within Zend Framework offer extensibility via adapters, helpers,
            filters, and other plugins. Using full class names is often unwieldy, or prevents the
            ability to slipstream in alternate implementations. The
            <classname>PluginBroker</classname> provides a standard mechanism for the following:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    Resolving plugin names to class instances.
                </para>
            </listitem>

            <listitem>
                <para>
                    Lazy loading plugin instances only when called upon, with the options requested.
                </para>
            </listitem>

            <listitem>
                <para>
                    Storing plugin instances between invocations.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            In sum, it acts as a factory/builder, service locater, and object registry.
        </para>

        <para>
            The <classname>PluginBroker</classname> is designed to work in conjunction with a <link
                linkend="zend.loader.short-name-locater">ShortNameLocater</link> -- usually a <link
                linkend="zend.loader.plugin-class-loader">PluginClassLoader</link>, but sometimes a
            <link linkend="zend.loader.prefix-path-loader">PrefixPathLoader</link>. The
            <interfacename>ShortNameLocater</interfacename> provides the ability to resolve a plugin
            name to a class; the <classname>PluginBroker</classname> then instantiates, stores, and
            returns an object of that class.
        </para>

        <para>
            Classes utilizing any sort of plugin architecture should embed a
            <classname>PluginBroker</classname> instance. Often in such situations, only plugins of
            a specific type or meeting specific criteria are desired. For thse situations, you may
            extend the <classname>PluginBroker</classname> and either specify a validator callback
            or override the <methodname>validatePlugin()</methodname> method in order to validate an
            instantiated plugin against your criteria.
        </para>
    </sect2>

    <sect2 id="zend.loader.plugin-broker.quick-start">
        <title>Quick Start</title>

        <para>
            Typically, a component will define an extension to the
            <classname>PluginBroker</classname>. In these cases, you simply instantiate the broker,
            and then retrieve a given plugin, optionally passing in constructor arguments.
        </para>

        <programlisting language="php"><![CDATA[
use Zend\View\HelperBroker;
$broker    = new HelperBroker();
$urlHelper = $broker->load('url', array('router' => $router));
echo $urlHelper->simple('sign', 'guestbook');
]]></programlisting>

        <para>
            You can seed the broker as well, using the <methodname>register()</methodname> method.
            This is useful for cases where you have an instance of the plugin object already, or
            when you want to manually configure it before injecting it into the broker.
        </para>

        <programlisting language="php"><![CDATA[
$broker->register('url', $urlHelper);
]]></programlisting>
    </sect2>

    <sect2 id="zend.loader.plugin-broker.options">
        <title>Configuration Options</title>

        <variablelist>
            <title>PluginBroker Options</title>

            <varlistentry>
                <term>class_loader</term>

                <listitem>
                    <para>
                        The value of this option may be one of the following:
                    </para>

                    <itemizedlist>
                        <listitem>
                            <para>A string indicating a fully qualified class name to use for the
                                class loader. The class must implement
                                <interfacename>ShortNameLocater</interfacename>.</para>
                        </listitem>

                        <listitem>
                            <para>An object implementing
                                <interfacename>ShortNameLocater</interfacename>.</para>
                        </listitem>

                        <listitem>
                            <para>An array or <interfacename>Traversable</interfacename> object
                                containing the keys <varname>class</varname> and optionally
                                <varname>options</varname>. An object of the type described in
                                <varname>class</varname> will be instantiated, with the
                                <varname>options</varname> provided, if any. The class must
                                implement <interfacename>ShortNameLocater</interfacename>.</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>plugins</term>

                <listitem>
                    <para>
                        The value of this option should be an array or
                        <interfacename>Traversable</interfacename> object, containing plugin
                        name/plugin object pairs.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>validator</term>

                <listitem>
                    <para>
                        The value must be a valid callback, and will be used as a validator for
                        loaded and registered plugins.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </sect2>

    <sect2 id="zend.loader.plugin-broker.methods">
        <title>Available Methods</title>

        <refentry id="zend.loader.plugin-broker.methods.load">
            <refnamediv>
                <refname>load</refname>
                <refpurpose>Resolve a plugin name to an object instance</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>load</methodname>
                    <methodparam>
                        <funcparams>$plugin, array $options = null</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>load()</title>

                <para>
                    This method attempts to resolve a plugin name to an object instance. In order to
                    do this, it first delegates to the attached class loader instance to resolve the
                    plugin name to a class name, and then instantiates the class with the given
                    <varname>$options</varname>, if any. Options are assumed to be in the order in
                    which they appear in the constructor -- in other words, it acts as an array of
                    arguments to the constructor.
                </para>

                <para>
                    If a plugin has been loaded previously, or registered manually, it will be
                    returned immediately.
                </para>

                <para>
                    If the class loader cannot locate a corresponding class, or if the plugin
                    instance does not validate, an exception will be thrown.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.plugin-broker.methods.register">
            <refnamediv>
                <refname>register</refname>
                <refpurpose>Register a plugin instance by name</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>register</methodname>
                    <methodparam>
                        <funcparams>$name, $plugin</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>register()</title>

                <para>
                    Registers a <varname>$plugin</varname> instance by a given
                    <varname>$name</varname>. If the <varname>$plugin</varname> does not pass
                    validation, an exception will be raised.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.plugin-broker.methods.unregister">
            <refnamediv>
                <refname>unregister</refname>
                <refpurpose>Unregister a plugin instance</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>unregister</methodname>
                    <methodparam>
                        <funcparams>$name</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>unregister()</title>

                <para>
                    If the plugin instance referenced by <varname>$name</varname> has been
                    previously loaded, that instance is removed from the registry. Note that this
                    does not prevent you from loading the plugin again; however, a new instance will
                    be returned in such a case.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.plugin-broker.methods.get-plugins">
            <refnamediv>
                <refname>getPlugins</refname>
                <refpurpose>Retrieve all loaded plugins</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>getPlugins</methodname>
                    <methodparam>
                        <funcparams></funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>getPlugins()</title>

                <para>
                    Retrieves a set of name/plugin pairs, indicating all currently loaded plugins.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.plugin-broker.methods.is-loaded">
            <refnamediv>
                <refname>isLoaded</refname>
                <refpurpose>Determine if a given plugin has been loaded</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>isLoaded</methodname>
                    <methodparam>
                        <funcparams>$name</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>isLoaded()</title>

                <para>
                    Returns <constant>true</constant> if the plugin referenced by
                    <varname>$name</varname> has been loaded by the broker previously,
                    <constant>false</constant> otherwise.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.plugin-broker.methods.set-class-loader">
            <refnamediv>
                <refname>setClassLoader</refname>
                <refpurpose>Specify the plugin class loader to use when resolving plugins to class
                    names</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>setClassLoader</methodname>
                    <methodparam>
                        <funcparams>ShortNameLocater $loader</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>setClassLoader()</title>

                <para>
                    Use this method to set a plugin class loader to use when resolving plugin names
                    to class names. As noted in the signature, the object must adhere to the
                    <interfacename>ShortNameLocater</interfacename> interface.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.plugin-broker.methods.get-class-loader">
            <refnamediv>
                <refname>getClassLoader</refname>
                <refpurpose>Retrieve the plugin class resolver</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>getClassLoader</methodname>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>getClassLoader()</title>

                <para>
                    Retrieves the plugin class resolver; the object will always be an implemenation
                    of <interfacename>ShortNameLocater</interfacename>.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.plugin-broker.methods.set-validator">
            <refnamediv>
                <refname>setValidator</refname>
                <refpurpose>Specify a validation callback to verify plugin instances</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>setValidator</methodname>
                    <methodparam>
                        <funcparams>$callback</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>setValidator()</title>

                <para>
                    In order to "lock down" the plugin broker to plugins that satisfy specific
                    criteria -- such as implementing specific interfaces -- you may specify a
                    validation callback. The callback will receive a plugin instance, and should
                    return a boolean value (<constant>true</constant> indicating validations pass,
                    <constant>false</constant> indicating failure).
                </para>

                <para>
                    As an example, the following would specify a validator that restricts plugins to
                    implementing <interfacename>Traversable</interfacename>:
                </para>

                <programlisting language="php"><![CDATA[
$broker->setValidator(function($plugin) {
    return ($plugin instanceof \Traversable);
});
]]></programlisting>

                <para>
                    Passing a null value will clear the validator; otherwise, the method expects any
                    valid PHP callback, including closures.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.plugin-broker.methods.get-validator">
            <refnamediv>
                <refname>getValidator</refname>
                <refpurpose>Return the validator callback</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>getValidator</methodname>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>getValidator()</title>

                <para>
                    The mirror of <methodname>setValidator()</methodname>, this method will return
                    the plugin validation callback, if any.
                </para>
            </refsect1>
        </refentry>
    </sect2>

    <sect2 id="zend.loader.plugin-broker.examples">
        <title>Examples</title>

        <example id="zend.loader.plugin-broker.examples.validator-callback">
            <title>Plugin validation callback</title>

            <para>
                It's often overkill to extend the <classname>PluginBroker</classname>, particularly
                if all you want to do is ensure the plugins are of an appropriate type. Fortunately,
                the <methodname>setValidator()</methodname> method makes this trivial.
            </para>

            <para>
                In the following example, we'll ensure that the plugins returned all are
                <interfacename>Traversable</interfacename> and implement
                <interfacename>ArrayAccess</interfacename>.
            </para>

            <programlisting language="php"><![CDATA[
use Zend\Loader\PluginBroker,
    My\Entity\HelperLoader;

// Assume My\Entity\HelperLoader is a PluginClassLoader instance
$broker = new PluginBroker();
$broker->setClassLoader(new HelperLoader)
       ->setValidator(function($plugin) {
           return (
               ($plugin instanceof \Traversable)
               && ($plugin instanceof \ArrayAccess)
           );
       });
]]></programlisting>

            <para>
                Any plugins loaded that do not satisfy that criteria will no raise an exception in
                the broker.
            </para>
        </example>

        <example id="zend.loader.plugin-broker.examples.custom-broker">
            <title>Creating a custom broker</title>

            <para>
                In the previous example, we illustrated configuring a plugin broker instance that
                utilizes a custom <classname>PluginClassLoader</classname> and a validator closure.
                The problem with this sort of configuration is that you likely don't want to do this
                within your classes or code that often -- it's easier and more useful to simply use
                objects. As such, you'll want to investigate extending the
                <classname>PluginBroker</classname>.
            </para>

            <para>
                The obvious flex point is to override the <methodname>getClassLoader()</methodname>
                to lazy load the appropriate class loader. Even easier is simply overwriting the
                <property>$defaultClassLoader</property> property, which is a string indicating the
                default plugin loader class to utilize.
            </para>

            <para>
                Less obvious is how to override validation. You have two options: create a
                constructor that registers a validator, or override the protected method
                <methodname>validatePlugin()</methodname>. We prefer the latter, as it prevents
                later users from altering validation by injecting a validation callback.
            </para>

            <para>
                The following code is equivalent to the previous example, but creates a custom
                plugin broker class.
            </para>

            <programlisting language="php"><![CDATA[
namespace My\Entity;

use Zend\Loader\PluginBroker;

class HelperBroker extends PluginBroker
{
    protected $defaultClassLoader = 'My\Entity\HelperLoader';

    protected function validatePlugin($plugin)
    {
        return (
            ($plugin instanceof \Traversable)
            && ($plugin instanceof \ArrayAccess)
        );
    }
}
]]></programlisting>

            <para>
                You may now use this class as a plugin broker anywhere in your code, typehint on it,
                etc. 
            </para>
        </example>
    </sect2>
</sect1>
