<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<sect1 id="zend.loader.plugin-class-loader">
    <title>The PluginClassLoader</title>

    <sect2 id="zend.loader.plugin-class-loader.intro">
        <title>Overview</title>

        <para>
            Resolving plugin names to class names is a common requirement within Zend Framework
            applications. The <classname>PluginClassLoader</classname> implements the interfaces
            <link linkend="zend.loader.plugin-class-locater">PluginClassLocater</link>, <link
                linkend="zend.loader.short-name-locater">ShortNameLocater</link>, and
            <interface>IteratorAggregate</interface>, providing a simple mechanism for aliasing
            plugin names to classnames for later retrieval.
        </para>

        <para>
            While it can act as a standalone class, it is intended that developers will extend the
            class to provide a per-component plugin map. This allows seeding the map with the most
            often-used plugins, while simultaneously allowing the end-user to overwrite existing or
            register new plugins.
        </para>

        <para>
            Additionally, <classname>PluginClassLoader</classname> provides the ability to
            statically seed all new instances of a given <classname>PluginClassLoader</classname> or
            one of its extensions (via Late Static Binding). If your application will always call
            for defining or overriding particular plugin maps on given
            <classname>PluginClassLoader</classname> extensions, this is a powerful capability.
        </para>
    </sect2>

    <sect2 id="zend.loader.plugin-class-loader.quick-start">
        <title>Quick Start</title>

        <para>
            Typical use cases involve simply instantiating a
            <classname>PluginClassLoader</classname>, seeding it with one or more plugin/class name
            associations, and then using it to retrieve the class name associated with a given
            plugin name.
        </para>

        <programlisting language="php"><![CDATA[
use Zend\View\HelperLoader;

// Provide a global map, or override defaults:
HelperLoader::addStaticMap(array(
    'url' => 'My\Custom\UrlHelper',
));

// Instantiate the loader:
$loader = new Zend\View\HelperLoader();

// Register a new plugin:
$loader->registerPlugin('bugUrl', 'My\Custom\BugUrlHelper');

// Load/retrieve the associated plugin class:
$class = $loader->load('url'); // 'My\Custom\UrlHelper'
]]></programlisting>

        <note>
            <title>Case Sensitivity</title>

            <para>
                The <classname>PluginClassLoader</classname> is designed to do case-insensitive
                plugin name lookups. While the above example defines a "bugUrl" plugin name,
                internally, this will be stored as simply "bugurl". If another plugin is registered
                with simply a different word case, it will overwrite this entry.
            </para>
        </note>
    </sect2>

    <sect2 id="zend.loader.plugin-class-loader.options">
        <title>Configuration Options</title>

        <variablelist>
            <title>PluginClassLoader Options</title>

            <varlistentry>
                <term>$map</term>

                <listitem>
                    <para>
                        The constructor may take a single option, an array or
                        <interfacename>Traversable</interfacename> object of key/value pairs
                        corresponding to a plugin name and class name, respectively.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </sect2>

    <sect2 id="zend.loader.plugin-class-loader.methods">
        <title>Available Methods</title>

        <refentry id="zend.loader.plugin-class-loader.methods.constructor">
            <refnamediv>
                <refname>__construct</refname>
                <refpurpose>Instantiate and initialize the loader</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>__construct</methodname>
                    <methodparam>
                        <funcparams>$map = null</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>__construct()</title>

                <para>
                    The constructor is used to instantiate and intialize the plugin class loader. If
                    passed a string, an array, or a <interfacename>Traversable</interfacename>
                    object, it will pass this to the <link
                        linkend="zend.loader.plugin-class-loader.methods.registerPlugins">registerPlugins()</link>
                    method in order to seed (or overwrite) the plugin class map.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.plugin-class-loader.methods.add-static-map">
            <refnamediv>
                <refname>addStaticMap</refname>
                <refpurpose>Statically seed the plugin loader map</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>addStaticMap</methodname>
                    <methodparam>
                        <funcparams>$map</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>addStaticMap()</title>

                <para>
                    Static method for globally pre-seeding the loader with a class map. It accepts
                    either an array or <interfacename>Traversable</interfacename> object of plugin
                    name/class name pairs.
                </para>

                <para>
                    When using this method, be certain you understand the precedence in which maps
                    will be merged; in decreasing order of preference:
                </para>

                <itemizedlist>
                    <listitem>
                        <para>
                            Manually registered plugin/class name pairs (e.g., via <link
                                linkend="zend.loader.plugin-class-loader.methods.register-plugin">registerPlugin()</link>
                            or <link
                                linkend="zend.loader.plugin-class-loader.methods.register-plugins">registerPlugins()</link>).
                        </para>
                    </listitem>

                    <listitem>
                        <para>
                            A map passed to the constructor .
                        </para>
                    </listitem>

                    <listitem>
                        <para>
                            The static map.
                        </para>
                    </listitem>

                    <listitem>
                        <para>
                            The map defined within the class itself.
                        </para>
                    </listitem>
                </itemizedlist>

                <para>
                    Also, please note that calling the method will <emphasis>not</emphasis> affect
                    any instances already created.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.plugin-class-loader.methods.register-plugin">
            <refnamediv>
                <refname>registerPlugin</refname>
                <refpurpose>Register a plugin/class association</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>registerPlugin</methodname>
                    <methodparam>
                        <funcparams>$shortName, $className</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>registerPlugin()</title>

                <para>
                    Defined by the <link
                        linkend="zend.loader.plugin-class-locater">PluginClassLocater</link>
                    interface. Expects two string arguments, the plugin
                    <varname>$shortName</varname>, and the class <varname>$className</varname> which
                    it represents.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.plugin-class-loader.methods.register-plugins">
            <refnamediv>
                <refname>registerPlugins</refname>
                <refpurpose>Register many plugin/class associations at once</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>registerPlugins</methodname>
                    <methodparam>
                        <funcparams>$map</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>registerPlugins()</title>

                <para>
                    Expects a string, an array or <interfacename>Traversable</interfacename> object
                    of plugin name/class name pairs representing a plugin class map.
                </para>

                <para>
                    If a string argument is provided, <methodname>registerPlugins()</methodname>
                    assumes this is a class name. If the class does not exist, an exception will be
                    thrown. If it does, it then instantiates the class and checks to see whether or
                    not it implements <interfacename>Traversable</interfacename>.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.plugin-class-loader.methods.unregister-plugin">
            <refnamediv>
                <refname>unregisterPlugin</refname>
                <refpurpose>Remove a plugin/class association from the map</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>unregisterPlugin</methodname>
                    <methodparam>
                        <funcparams>$shortName</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>unregisterPlugin()</title>

                <para>
                    Defined by the <interfacename>PluginClassLocater</interfacename> interface;
                    remove a plugin/class association from the plugin class map.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.plugin-class-loader.methods.get-registered-plugins">
            <refnamediv>
                <refname>getRegisteredPlugins</refname>
                <refpurpose>Return the complete plugin class map</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>getRegisteredPlugins</methodname>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>getRegisteredPlugins()</title>

                <para>
                    Defined by the <interfacename>PluginClassLocater</interfacename> interface;
                    return the entire plugin class map as an array.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.plugin-class-loader.methods.is-loaded">
            <refnamediv>
                <refname>isLoaded</refname>
                <refpurpose>Determine if a given plugin name resolves</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>isLoaded</methodname>
                    <methodparam>
                        <funcparams>$name</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>isLoaded()</title>

                <para>
                    Defined by the <interfacename>ShortNameLocater</interfacename> interface;
                    determine if the given plugin has been resolved to a class name.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.plugin-class-loader.methods.get-class-name">
            <refnamediv>
                <refname>getClassName</refname>
                <refpurpose>Return the class name to which a plugin resolves</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>getClassName</methodname>
                    <methodparam>
                        <funcparams>$name</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>getClassName()</title>

                <para>
                    Defined by the <interfacename>ShortNameLocater</interfacename> interface;
                    return the class name to which a plugin name resolves.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.plugin-class-loader.methods.load">
            <refnamediv>
                <refname>load</refname>
                <refpurpose>Resolve a plugin name</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>load</methodname>
                    <methodparam>
                        <funcparams>$name</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>load()</title>

                <para>
                    Defined by the <interfacename>ShortNameLocater</interfacename> interface;
                    attempt to resolve a plugin name to a class name. If successful, returns the
                    class name; otherwise, returns a boolean <constant>false</constant>.
                </para>
            </refsect1>
        </refentry>

        <refentry id="zend.loader.plugin-class-loader.methods.get-iterator">
            <refnamediv>
                <refname>getIterator</refname>
                <refpurpose>Return iterator capable of looping over plugin class map</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>getIterator</methodname>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsect1>
                <title>getIterator()</title>

                <para>
                    Defined by the <interfacename>IteratorAggregate</interfacename> interface;
                    allows iteration over the plugin class map. This can come in useful for using
                    <classname>PluginClassLoader</classname> instances to other
                    <classname>PluginClassLoader</classname> instances in order to merge maps.
                </para>
            </refsect1>
        </refentry>
    </sect2>

    <sect2 id="zend.loader.plugin-class-loader.examples">
        <title>Examples</title>

        <example id="zend.loader.plugin-class-loader.examples.static-maps">
            <title>Using Static Maps</title>

            <para>
                It's often convenient to provide global overrides or additions to the maps in a
                <classname>PluginClassLoader</classname> instance. This can be done using the
                <methodname>addStaticMap()</methodname> method:
            </para>

            <programlisting language="php"><![CDATA[
use Zend\Loader\PluginClassLoader;

PluginClassLoader::addStaticMap(array(
    'url' => 'Zend\View\Helper\Url',
));
]]></programlisting>

            <para>
                Any later instances created will now have this map defined, allowing you to load
                that plugin.
            </para>

            <programlisting language="php"><![CDATA[
use Zend\Loader\PluginClassLoader;

$loader = new PluginClassLoader();
$helper = $loader->load('url'); // Zend\View\Helper\Url
]]></programlisting>
        </example>

        <example id="zend.loader.plugin-class-loader.examples.extended-loader">
            <title>Creating a pre-loaded map</title>

            <para>
                In many cases, you know exactly which plugins you may be drawing upon on a regular
                basis, and which classes they will refer to. In this case, simply extend the
                <classname>PluginClassLoader</classname> and define the map within the extending
                class.
            </para>

            <programlisting language="php"><![CDATA[
namespace My\Plugins;

use Zend\Loader\PluginClassLoader;

class PluginLoader extends PluginClassLoader
{
    /**
     * @var array Plugin map
     */
    protected $plugins = array(
        'foo'    => 'My\Plugins\Foo',
        'bar'    => 'My\Plugins\Bar',
        'foobar' => 'My\Plugins\FooBar',
    );
}
]]></programlisting>

            <para>
                At this point, you can simply instantiate the map and use it.
            </para>

            <programlisting language="php"><![CDATA[
$loader = new My\Plugins\PluginLoader();
$class  = $loader->load('foobar'); // My\Plugins\FooBar
]]></programlisting>

            <para>
                <classname>PluginClassLoader</classname> makes use of late static binding, allowing
                per-class static maps.  If you want to allow defining a <link
                    linkend="zend.loader.plugin-class-loader.examples.static-maps">static map</link>
                specific to this extending class, simply declare a protected static
                <varname>$staticMap</varname> property:
            </para>

            <programlisting language="php"><![CDATA[
namespace My\Plugins;

use Zend\Loader\PluginClassLoader;

class PluginLoader extends PluginClassLoader
{
    protected static $staticMap = array();

    // ...
}
]]></programlisting>

            <para>
                To inject the static map, use the extending class' name to call the static
                <methodname>addStaticMap()</methodname> method.
            </para>

            <programlisting language="php"><![CDATA[
PluginLoader::addStaticMap(array(
    'url' => 'Zend\View\Helper\Url',
));
]]></programlisting>
        </example>

        <example id="zend.loader.plugin-class-loader.examples.using-as-plugin-map">
            <title>Extending a plugin map using another plugin map</title>

            <para>
                In some cases, a general map class may already exist; as an example, most components
                in Zend Framework that utilize a plugin broker have an associated
                <classname>PluginClassLoader</classname> extension defining the plugins available
                for that component within the framework. What if you want to define some additions
                to these? Where should that code go?
            </para>

            <para>
                One possibility is to define the map in a configuration file, and then inject the
                configuration into an instance of the plugin loader. This is certainly trivial to
                implement, but removes the code defining the plugin map from the library.
            </para>

            <para>
                An alternate solution is to define a new plugin map class. The class name or an
                instance of the class may then be passed to the constructor or
                <methodname>registerPlugins()</methodname>.
            </para>

            <programlisting language="php"><![CDATA[
namespace My\Plugins;

use Zend\Loader\PluginClassLoader,
    Zend\View\Helper\HelperLoader;

class PluginLoader extends PluginClassLoader
{
    /**
     * @var array Plugin map
     */
    protected $plugins = array(
        'foo'    => 'My\Plugins\Foo',
        'bar'    => 'My\Plugins\Bar',
        'foobar' => 'My\Plugins\FooBar',
    );
}

// Inject in constructor:
$loader = new HelperLoader('My\Plugins\PluginLoader');
$loader = new HelperLoader(new PluginLoader());

// Or via registerPlugins():
$loader->registerPlugins('My\Plugins\PluginLoader');
$loader->registerPlugins(new PluginLoader());
]]></programlisting>
        </example>
    </sect2>
</sect1>
