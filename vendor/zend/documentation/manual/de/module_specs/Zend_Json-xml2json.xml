<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 20792 -->
<!-- Reviewed: no -->
<sect1 id="zend.json.xml2json">
    <title>XML zu JSON Konvertierung</title>

    <para>
        <classname>Zend_Json</classname> bietet eine bequeme Methode für das transformieren von
        <acronym>XML</acronym> formatierten Daten in das <acronym>JSON</acronym> Format. Dieses
        Feature wurde inspiriert durch einen <ulink
            url="http://www.ibm.com/developerworks/xml/library/x-xml2jsonphp/">IBM developerWorks
            Artikel</ulink>.
    </para>

    <para>
        <classname>Zend_Json</classname> enthält eine statische Funktion die
        <methodname>Zend_Json::fromXml()</methodname> heißt. Diese Funktion erzeugt
        <acronym>JSON</acronym> von einer angegebenen <acronym>XML</acronym> Eingabe. Diese Funktion
        nimmt jeglichen beliebigen <acronym>XML</acronym> String als Eingabe Parameter. Sie nimmt
        auch einen optionalen Boolschen Eingabe Parameter um die Konvertierungslogik zu instruieren
        ob <acronym>XML</acronym> Attribute wärend des Konvertierungsprozesses ignoriert werden
        sollen oder nicht. Wenn dieser optionale Eingabeparameter nicht angegeben wurde, besteht das
        Standardverhalten darun <acronym>XML</acronym> Attribute zu ignorieren. Der Funktionsaufruf
        wird wie folgt durchgeführt:
    </para>

    <programlisting language="php"><![CDATA[
// Die fromXml Funktion nimmt einfach einen String der XML
// Inhalt als Eingabe enthält.
$jsonContents = Zend_Json::fromXml($xmlStringContents, true);
]]></programlisting>

    <para>
        Die <methodname>Zend_Json::fromXml()</methodname> Funktion führt die Konvertierung des
        <acronym>XML</acronym> formatierten String Eingabeparameters durch und gibt eine äquivalente
        <acronym>JSON</acronym> formatierte String Ausgabe zurück. Im Fall eines
        <acronym>XML</acronym> Eingabeformat Fehlers oder eines Konvertierungslogik Fehlers wird
        diese Funktion eine Ausnahme werfen. Die Konvertierungslogik verwendet rekursive Techniken
        um den <acronym>XML</acronym> Baum zu durchlaufen. Sie unterstützt Rekursionen die bis zu
        25 Levels tief sind. Über diese Tiefe hinweg wird Sie eine
        <classname>Zend_Json_Exception</classname> werfen. Es gibt verschiedenste
        <acronym>XML</acronym> Dateien mit unterschiedlichem Grad an Komplexität die im tests
        Verzeichnis des Zend Frameworks vorhanden sind. Sie können verwendet werden um die
        Funktionalität des xml2json Features zu testen.
    </para>

    <para>
        Das folgende ist ein einfaches Beispiel das beides zeigt, den <acronym>XML</acronym> Eingabe
        String und den <acronym>JSON</acronym> Ausgabe String der als Ergebnis von der
        <methodname>Zend_Json::fromXml()</methodname> Funktion zurückgegeben wird. Dieses Beispiel
        verwendet den optionalen Funktionsparameter um die <acronym>XML</acronym> Attribute nicht
        wärend der Konvertierung zu ignorieren. Demzufolge kann man sehen das der resultierende
        <acronym>JSON</acronym> String eine Repräsentation der <acronym>XML</acronym> Attribute
        enthält die im <acronym>XML</acronym> Eingabestring vorhanden sind.
    </para>

    <para>
        <acronym>XML</acronym> Eingabe String der an die
        <methodname>Zend_Json::fromXml()</methodname> Funktion übergeben wird:
    </para>

    <programlisting language="php"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<books>
    <book id="1">
        <title>Code Generation in Action</title>
        <author><first>Jack</first><last>Herrington</last></author>
        <publisher>Manning</publisher>
    </book>

    <book id="2">
        <title>PHP Hacks</title>
        <author><first>Jack</first><last>Herrington</last></author>
        <publisher>O'Reilly</publisher>
    </book>

    <book id="3">
        <title>Podcasting Hacks</title>
        <author><first>Jack</first><last>Herrington</last></author>
        <publisher>O'Reilly</publisher>
    </book>
</books>
]]></programlisting>

    <para>
        <acronym>JSON</acronym> Ausgabe String der von der
        <methodname>Zend_Json::fromXml()</methodname> Funktion zurückgegeben wird:
    </para>

    <programlisting language="php"><![CDATA[
{
   "books" : {
      "book" : [ {
         "@attributes" : {
            "id" : "1"
         },
         "title" : "Code Generation in Action",
         "author" : {
            "first" : "Jack", "last" : "Herrington"
         },
         "publisher" : "Manning"
      }, {
         "@attributes" : {
            "id" : "2"
         },
         "title" : "PHP Hacks", "author" : {
            "first" : "Jack", "last" : "Herrington"
         },
         "publisher" : "O'Reilly"
      }, {
         "@attributes" : {
            "id" : "3"
         },
         "title" : "Podcasting Hacks", "author" : {
            "first" : "Jack", "last" : "Herrington"
         },
         "publisher" : "O'Reilly"
      }
   ]}
}
]]></programlisting>

    <para>
        Weitere Details über das xml2json Feature können im originalen Proposal selbst gefunden
        werden. Siehe <ulink url="http://tinyurl.com/2tfa8z">Zend_xml2json proposal</ulink>.
    </para>
</sect1>
