<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 21992 -->
<!-- Reviewed: no -->
<sect1 id="zend.markup.renderers">
    <title>Zend_Markup Renderer</title>

    <para>
        <classname>Zend_Markup</classname> wird aktuell mit einem Renderer ausgeliefert, dem
        <acronym>HTML</acronym> Renderer.
    </para>

    <sect2 id="zend.markup.renderers.add">
        <title>Eigene Markups hinzufügen</title>

        <para>
            Indem man eigene Merkups hinzufügt, kann man den <classname>Zend_Markup</classname>
            Renderern eigene Funktionalitäten hinzufügen. Mit der Markup Struktur kann man jede
            Funktionalität welche man haben will hinzufügen. Von einfachen Markups bis zu
            komplizierten Markup Strukturen. Ein einfaches Beispiel für ein 'foo' Markup:
        </para>

        <programlisting language="php"><![CDATA[
// Erstellt eine Instanz von Zend_Markup_Renderer_Html,
// mit Zend_Markup_Parser_BbCode als seinen Parser
$bbcode = Zend_Markup::factory('Bbcode');

// Dies erstellt ein einfaches 'foo' Markup
// Der erste Parameter definiert den Namen des Markups
// Der zweite Parameter nimmt ein Integer welche den Typ des Markups definiert
// Der dritte Parameter ist ein Array die andere Dinge des Markups definiert
// wie die Gruppe des Markups, und (in diesem Fall) ein Start und Ende Markup
$bbcode->addMarkup(
    'foo',
    Zend_Markup_Renderer_RendererAbstract::TYPE_REPLACE,
    array(
        'start' => '-bar-',
        'end'   => '-baz-',
        'group' => 'inline'
    )
);

// Jetzt gibt dies folgendes aus: 'my -bar-markup-baz-'
echo $bbcode->render('my [foo]markup[/foo]');
]]></programlisting>

        <para>
            Es gilt zu beachten das die Erstellung eigener Markups nur dann Sinn macht wenn der
            eigene Parser diese auch in einer Markup Struktur unterstützt. Aktuell unterstützt dies
            nur BBCode. Textile hat keine Unterstützung für eigene Markups.
        </para>

        <para>
            Einige Renderer (wie der <acronym>HTML</acronym> Renderer) enthalten auch Unterstützung
            für einen 'markup' Parameter. Dieser ersetzt die 'start' und 'end' Parameter, und er
            stellt die Markups inklusive einiger Standardattribute und dem schließenden Markup dar.
        </para>

        <sect3 id="zend.markup.renderers.add.callback">
            <title>Ein Callback Markup hinzufügen</title>

            <para>
                Durch das Hinzufügen eines Callback Markups kann man viel mehr tun als nur das
                einfache Ersetzen von Markups. Zum Beispiel kann man den Inhalt ändern, die
                Parameter verwenden um die Ausgabe zu beeinflussen, usw.
            </para>

            <para>
                Ein Callback ist eine Klasse welche das
                <classname>Zend_Markup_Renderer_TokenInterface</classname> Interface implementiert.
                Ein Beispiel einer einfachen Callback Klasse:
            </para>

            <programlisting language="php"><![CDATA[
class My_Markup_Renderer_Html_Upper
    implements Zend_Markup_Renderer_TokenConverterInterface
{

    public function convert(Zend_Markup_Token $token, $text)
    {
        return '!up!' . strtoupper($text) . '!up!';
    }

}
]]></programlisting>

            <para>
                Jetzt kann man das 'upper' Markup, mit einem Callback einer Instanz der Klasse
                <classname>My_Markup_Renderer_Html_Upper</classname> hinzufügen. Ein einfaches
                Beispiel:
            </para>

            <programlisting language="php"><![CDATA[
// Erstellt eine Instanz von Zend_Markup_Renderer_Html,
// mit Zend_Markup_Parser_BbCode als seinen Parser
$bbcode = Zend_Markup::factory('Bbcode');

// Das erstellt ein einfaches 'foo' Markup
// Der erste Parameter definiert den Namen des Markups
// Der zweite Parameter nimmt ein Integer welches den Markuptyp definiert
// Der dritte Parameter ist ein Array welches andere Dinge über ein Markup
// definiert, wie die Gruppe des Markups und (in diesem Fall) ein Start und Ende
// Markup
$bbcode->addMarkup(
    'upper',
    Zend_Markup_Renderer_RendererAbstract::TYPE_REPLACE,
    array(
        'callback' => new My_Markup_Renderer_Html_Upper(),
        'group'    => 'inline'
    )
);

// Jetzt wird die folgende Ausgabe erstellt: 'my !up!MARKUP!up!'
echo $bbcode->render('my [upper]markup[/upper]');
]]></programlisting>
        </sect3>
    </sect2>

    <sect2 id="zend.markup.renderers.list">
        <title>Liste der Markups</title>

        <table id="zend.markup.renderers.list.markups">
            <title>Liste der Markups</title>

            <tgroup cols="2" align="left" colsep="1" rowsep="1">
                <thead>
                    <row>
                        <entry>Beispiel Eingabe (BBCode)</entry>
                        <entry>Beispiel Ausgabe</entry>
                    </row>
                </thead>

                <tbody>
                    <row>
                        <entry>[b]foo[/b]</entry>
                        <entry><![CDATA[<strong>foo</strong>]]></entry>
                    </row>

                    <row>
                        <entry>[i]foo[/i]</entry>
                        <entry><![CDATA[<em>foo</em>]]></entry>
                    </row>

                    <row>
                        <entry>[cite]foo[/cite]</entry>
                        <entry><![CDATA[<cite>foo</cite>]]></entry>
                    </row>

                    <row>
                        <entry>[del]foo[/del]</entry>
                        <entry><![CDATA[<del>foo</del>]]></entry>
                    </row>

                    <row>
                        <entry>[ins]foo[/ins]</entry>
                        <entry><![CDATA[<ins>foo</ins>]]></entry>
                    </row>

                    <row>
                        <entry>[sup]foo[/sup]</entry>
                        <entry><![CDATA[<sup>foo</sup>]]></entry>
                    </row>

                    <row>
                        <entry>[sub]foo[/sub]</entry>
                        <entry><![CDATA[<sub>foo</sub>]]></entry>
                    </row>

                    <row>
                        <entry>[span]foo[/span]</entry>
                        <entry><![CDATA[<span>foo</span>]]></entry>
                    </row>

                    <row>
                        <entry>[acronym title="PHP Hypertext Preprocessor]PHP[/acronym]</entry>

                        <entry>
                            <![CDATA[<acronym title="PHP Hypertext Preprocessor">PHP</acronym>]]>
                        </entry>
                    </row>

                    <row>
                        <entry>[url=http://framework.zend.com/]Zend Framework[/url]</entry>

                        <entry>
                            <![CDATA[<a href="http://framework.zend.com/">Zend Framework</a>]]>
                        </entry>
                    </row>

                    <row>
                        <entry>[h1]foobar[/h1]</entry>
                        <entry><![CDATA[<h1>foobar</h1>]]></entry>
                    </row>

                    <row>
                        <entry>[img]http://framework.zend.com/images/logo.gif[/img]</entry>

                        <entry>
                            <![CDATA[<img src="http://framework.zend.com/images/logo.gif" />]]>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </sect2>
</sect1>
