<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 21821 -->
<!-- Reviewed: no -->
<sect3 id="zend.ldap.api.reference.zend-ldap">
    <title>Zend_Ldap</title>

    <para>
        <classname>Zend_Ldap</classname> ist das Basisinterface zum <acronym>LDAP</acronym> Server.
        Es bietet Verbindungs- und Bindungsmethode sowie Methoden um auf dem <acronym>LDAP</acronym>
        Baum zu arbeiten.
    </para>

    <table id="zend.ldap.api.reference.zend-ldap.table">
        <title>Zend_Ldap API</title>

        <tgroup cols="2">
            <thead>
                <row>
                    <entry>Methode</entry>
                    <entry>Beschreibung</entry>
                </row>
            </thead>

            <tbody>
                <row>
                    <entry><code>string filterEscape(string $str)</code></entry>

                    <entry>
                        Escapt einen Wert damit dieser in einem <acronym>LDAP</acronym> Filter
                        entsprechend <acronym>RFC</acronym> 2254. Diese Methode ist
                        <emphasis>deprecated</emphasis>, stattdessen sollte
                        <methodname>Zend_Ldap_Dn::checkDn()</methodname> verwendet werden.
                    </entry>
                </row>

                <row>
                    <entry>
                        <code>boolean explodeDn($dn, array &amp;$keys = null, array &amp;$vals =
                            null)</code>
                    </entry>

                    <entry>
                        Prüft ob ein angegebener DN <varname>$dn</varname> fehlerhaft ist. Wenn
                        <varname>$keys</varname> oder <varname>$keys</varname> und
                        <varname>$vals</varname> angegeben werden, werden diese Arrays mit den
                        entsprechenden DN Schlüsseln und Werten gefüllt. Diese Methode ist
                        <emphasis>deprecated</emphasis>, stattdessen sollte
                        <methodname>Zend_Ldap_Dn::checkDn()</methodname> verwendet werden.
                    </entry>
                </row>

                <row>
                    <entry><code>__construct($options)</code></entry>

                    <entry>
                        Constructor. Der <varname>$options</varname> Parameter ist Optional und kann
                        ein Array, oder eine Instanz von <classname>Zend_Config</classname> sein.
                        Wenn keine Optionen bei der Instanzierung angegeben werden, müssen die
                        Verbindungsparameter der Instanz übergeben werden indem man
                        <methodname>Zend_Ldap::setOptions()</methodname> verwendet. Die erlaubten
                        Optionen werden in <link
                            linkend="zend.ldap.api.configuration.table">Zend_Ldap Optionen</link>
                        apezifiziert.
                    </entry>
                </row>

                <row>
                    <entry><code>resource getResource()</code></entry>

                    <entry>
                        Gibt die rohe Ressource der <acronym>LDAP</acronym> Erweiterung (ext/ldap)
                        zurück.
                    </entry>
                </row>

                <row>
                    <entry><code>integer getLastErrorCode()</code></entry>

                    <entry>
                        Gibt die <acronym>LDAP</acronym> Fehlernummer des letzten
                        <acronym>LDAP</acronym> Kommandos zurück.
                    </entry>
                </row>

                <row>
                    <entry>
                        <code>string getLastError(integer &amp;$errorCode, array
                            &amp;$errorMessages)</code>
                    </entry>

                    <entry>
                        Gibt die <acronym>LDAP</acronym> Fehlermeldung des letzten
                        <acronym>LDAP</acronym> Kommandos zurück. Der optionale
                        <varname>$errorCode</varname> Parameter ist auf die <acronym>LDAP</acronym>
                        Fehlernummer gesetzt wenn er angegeben ist. Die verschiedenen
                        <acronym>LDAP</acronym> Funktionen welche Fehler zurückgeben können
                        unterschiedliche Dinge zurückgeben, sodas Sie alle gesammelt werden wenn
                        <varname>$errorMessages</varname> angegeben ist.
                    </entry>
                </row>

                <row>
                    <entry><code>Zend_Ldap setOptions($options)</code></entry>

                    <entry>
                        Setzt die <acronym>LDAP</acronym> Verbindungs- und Bindungsparameter.
                        <varname>$options</varname> kann ein Array oder eine Instanz von
                        <classname>Zend_Config</classname> sein. Die erlauben Optionen werden in
                        <link linkend="zend.ldap.api.configuration.table">Zend_Ldap Optionen</link>
                        definiert.
                    </entry>
                </row>

                <row>
                    <entry><code>array getOptions()</code></entry>
                    <entry>Gibt die aktuellen Verbindungs- und Bindungsparameter zurück.</entry>
                </row>

                <row>
                    <entry><code>string getBaseDn()</code></entry>

                    <entry>
                        Gibt den Basis DN zurück auf welche diese <acronym>LDAP</acronym> Verbindung
                        gebunden ist.
                    </entry>
                </row>

                <row>
                    <entry>
                        <code>string getCanonicalAccountName(string $acctname, integer $form)</code>
                    </entry>

                    <entry>
                        Gibt den kanonischen Account Namen des angegebenen Account Namens
                        <varname>$acctname</varname> zurück. <varname>$form</varname> spezifiziert
                        das <link
                            linkend="zend.ldap.using.theory-of-operation.account-name-canonicalization.table">Format</link>
                        in das der Account Name kanonisiert wird. Siehe <link
                            linkend="zend.ldap.introduction.theory-of-operations.account-name-canonicalization">Kanonisierung
                            des Account Namens</link> für weitere Details.
                    </entry>
                </row>

                <row>
                    <entry><code>Zend_Ldap disconnect()</code></entry>

                    <entry>
                        Trennt die Verbindung der <classname>Zend_Ldap</classname> Instanz vom
                        <acronym>LDAP</acronym> Server.
                    </entry>
                </row>

                <row>
                    <entry>
                        <code>Zend_Ldap connect(string $host, integer $port, boolean $useSsl,
                            boolean $useStartTls)</code>
                    </entry>

                    <entry>
                        Verbindet eine Instanz von <classname>Zend_Ldap</classname> mit dem
                        angegebenen <acronym>LDAP</acronym> Server. Alle Parameter sind optional,
                        und werden von den <acronym>LDAP</acronym> Verbindungs- und
                        Bindungsparametern genommen welche der Instanz über den Constructor oder
                        über <methodname>Zend_Ldap::setOptions()</methodname> angegeben wurden, wenn
                        <constant>NULL</constant> angegeben wurde.
                    </entry>
                </row>

                <row>
                    <entry><code>Zend_Ldap bind(string $username, string $password)</code></entry>

                    <entry>
                        Authentifiziert <varname>$username</varname> mit
                        <varname>$password</varname> beim <acronym>LDAP</acronym> Server. Wenn
                        beide Parameter nicht angegeben werden, dann wird die Verbindung mit den
                        Anmeldeinformationen durchgeführt welche in den Verbindungs- und
                        Bindungsparametern angegeben wurden, und ein anonymes Binden wird
                        ausgeführt. Es ist zu beachten dass hierbei anonymes Binden vom
                        <acronym>LDAP</acronym> Server erlaubt sein muss. Ein leerer String
                        <code>''</code> kann als <varname>$password</varname> zusammen mit einem
                        Benutzernamen übergeben werden wenn, und nur wenn,
                        <code>allowEmptyPassword</code> in den Verdinguns- und Bindungsparametern
                        auf <constant>TRUE</constant> gesetzt ist.
                    </entry>
                </row>

                <row>
                    <entry>
                        <code>Zend_Ldap_Collection search(string|Zend_Ldap_Filter_Abstract $filter,
                            string|Zend_Ldap_Dn $basedn, integer $scope, array $attributes, string
                            $sort, string $collectionClass)</code>
                    </entry>

                    <entry>
                        Durchsucht den <acronym>LDAP</acronym> Baum mit dem angegebenen
                        <varname>$filter</varname> und den angegebenen Such Parametern.

                        <variablelist>
                            <varlistentry>
                                <term><code>string|Zend_Ldap_Filter_Abstract $filter</code></term>

                                <listitem>
                                    <para>
                                        Der Filterstring kann in der Suche verwendet werden, z.B.
                                        <code>(objectClass=posixAccount)</code>.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term><code>string|Zend_Ldap_Dn $basedn</code></term>

                                <listitem>
                                    <para>
                                        Die Suchbasis für die Suche. Wenn Sie nicht, oder
                                        <constant>NULL</constant> angegeben wird, dann wird die
                                        <code>baseDn</code> der Verbindungs- und Bindungs Parameter
                                        verwendet.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term><code>integer $scope</code></term>

                                <listitem>
                                    <para>
                                        Der Suchbereich.
                                        <constant>Zend_Ldap::SEARCH_SCOPE_SUB</constant> durchsucht
                                        den kompletten Unterbaum inklusive dem
                                        <varname>$baseDn</varname> Node.
                                        <constant>Zend_Ldap::SEARCH_SCOPE_ONE</constant> schränkt
                                        die Suche auf ein Level unter <varname>$baseDn</varname>
                                        ein. <constant>Zend_Ldap::SEARCH_SCOPE_BASE</constant>
                                        schränkt die Suche auf <varname>$baseDn</varname> selbst
                                        ein; das kann verwendet werden um effizient einen einzelnen
                                        Eintrag durch deinen DN zu erhalten. Der Standardwert ist
                                        <constant>Zend_Ldap::SEARCH_SCOPE_SUB</constant>.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term><code>array $attributes</code></term>

                                <listitem>
                                    <para>
                                        Spezifiziert die Attribute welche in den zurückgegebenen
                                        Einträgen enthalten sind. Um alle möglichen Attribute zu
                                        inkludieren (ACL Restriktionen können es verhindern das
                                        bestimmte Attribute von einem angegebenen Benutzer empfangen
                                        werden) kann entweder ein leeres Array
                                        <methodname>array()</methodname> oder
                                        <code>array('*')</code> an die Methode übergeben werden.
                                        Bei einigen <acronym>LDAP</acronym> Servern kann man
                                        spezielle interne Attribute erhalten wenn man an die Methode
                                        <code>array('*', '+')</code> übergibt.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term><code>string $sort</code></term>

                                <listitem>
                                    <para>
                                        Ob die Sammlung der Ergebnisse nach dem Attribut
                                        <varname>$sort</varname> sortiert werden soll. Ergebnisse
                                        können nur nach einem einzelnen Attribut sortiert werden,
                                        da dieser Parameter die ext/ldap Funktion
                                        <methodname>ldap_sort()</methodname> verwendet.
                                    </para>
                                </listitem>
                            </varlistentry>

                            <varlistentry>
                                <term><code>string $collectionClass</code></term>

                                <listitem>
                                    <para>
                                        Ob das Ergebnis in ein Objekt vom Typ
                                        <varname>$collectionClass</varname> eingebettet werden soll.
                                        Standardmäßig wird ein Objekt vom Typ
                                        <classname>Zend_Ldap_Collection</classname> zurückgegeben.
                                        Die eigene Klasse muß
                                        <classname>Zend_Ldap_Collection</classname> erweitern und
                                        wird bei der Instanziierung ein
                                        <classname>Zend_Ldap_Collection_Iterator_Default</classname>
                                        übergeben.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </entry>
                </row>

                <row>
                    <entry>
                        <code>integer count(string|Zend_Ldap_Filter_Abstract
                            $filter, string|Zend_Ldap_Dn $basedn, integer $scope)</code>
                    </entry>

                    <entry>
                        Zählt die Elemente welche durch die angegebenen Such Parameter zurückgegeben
                        werden. Siehe <methodname>Zend_Ldap::search()</methodname> für eine
                        detailierte Beschreibung der Parameter der Methode.
                    </entry>
                </row>

                <row>
                    <entry><code>integer countChildren(string|Zend_Ldap_Dn $dn)</code></entry>

                    <entry>
                        Zählt die direkten Abhängigkeiten (Kinder) des Eintrags, der durch den
                        angegebenen <varname>$dn</varname> identifiziert wird.
                    </entry>
                </row>

                <row>
                    <entry><code>boolean exists(string|Zend_Ldap_Dn $dn)</code></entry>

                    <entry>
                        Prüft ob der Eintrag, der durch den angegebenen <varname>$dn</varname>
                        identifiziert wird, existiert.
                    </entry>
                </row>

                <row>
                    <entry>
                        <code>array searchEntries(string|Zend_Ldap_Filter_Abstract
                            $filter, string|Zend_Ldap_Dn $basedn, integer $scope, array
                            $attributes, string $sort)</code>
                    </entry>

                    <entry>
                        Führt eine Such Operation durch und gibt als Ergebnis ein
                        <acronym>PHP</acronym> Array zurück. Das ist notwendigerweise die gleiche
                        Methode wie <methodname>Zend_Ldap::search()</methodname> ausser beim
                        Rückgabe Typ. Siehe <methodname>Zend_Ldap::search()</methodname> für eine
                        detailierte Beschreibung der Parameter der Methode.
                    </entry>
                </row>

                <row>
                    <entry>
                        <code>array getEntry(string|Zend_Ldap_Dn $dn, array
                            $attributes, boolean $throwOnNotFound)</code>
                    </entry>

                    <entry>
                        Gibt den <acronym>LDAP</acronym> Eintrag zurück der von
                        <varname>$dn</varname> mit den in <varname>$attributes</varname> angegebenen
                        Attributen identifiziert wird. Wenn <varname>$attributes</varname>
                        unterdrückt wird (<methodname>array()</methodname>) werden alle Attribute im
                        Ergebnis ausgegeben. <varname>$throwOnNotFound</varname> ist standardmäßig
                        <constant>FALSE</constant>, so dass die Methode <constant>NULL</constant>
                        zurückgibt wemm der spezifizierte Eintrag nicht gefunden wird. Wenn er auf
                        <constant>TRUE</constant> gesetzt ist, wird statt dessen eine
                        <classname>Zend_Ldap_Exception</classname> geworfen.
                    </entry>
                </row>

                <row>
                    <entry>
                        <emphasis><code>void prepareLdapEntryArray(array
                            &amp;$entry)</code></emphasis>
                    </entry>

                    <entry>
                        Bereitet ein Array für die Verwendung in Modifikations Operationen von
                        <acronym>LDAP</acronym> vor. Diese Methode muß nicht von Endbenutzern
                        aufgerufen werden da Sie implizit bei jeder Methode die Daten verändert
                        aufgerufen wird.
                    </entry>
                </row>

                <row>
                    <entry>
                        <code>Zend_Ldap add(string|Zend_Ldap_Dn $dn, array $entry)</code>
                    </entry>

                    <entry>
                        Fügt den Eintrag der durch <varname>$dn</varname> mit seinen
                        <varname>$entry</varname> identifiziert wird im <acronym>LDAP</acronym>
                        Baum hinzu. Wirft eine <classname>Zend_Ldap_Exception</classname> wenn der
                        Eintrag nicht hinzugefügt werden konnte.
                    </entry>
                </row>

                <row>
                    <entry>
                        <code>Zend_Ldap update(string|Zend_Ldap_Dn $dn, array $entry)</code>
                    </entry>

                    <entry>
                        Aktualisiert den Eintrag der durch <varname>$dn</varname> mit seinen
                        <varname>$entry</varname> Attributen identifiziert wird im
                        <acronym>LDAP</acronym> Baum. Wirft eine
                        <classname>Zend_Ldap_Exception</classname> wenn der Eintrag nicht geändert
                        werden konnte.
                    </entry>
                </row>

                <row>
                    <entry>
                        <code>Zend_Ldap save(string|Zend_Ldap_Dn $dn, array $entry)</code>
                    </entry>

                    <entry>
                        Speichert den Eintrag der durch <varname>$dn</varname> mit seinen
                        <varname>$entry</varname> Attributen identifiziert wird im
                        <acronym>LDAP</acronym> Baum. Wirft eine
                        <classname>Zend_Ldap_Exception</classname> wenn der Eintrag nicht
                        gespeichert werden konnte. Diese Methode wählt durch eine Suche im
                        <acronym>LDAP</acronym> Baum ob der Eintrag hinzugefügt oder aktualisiert
                        wird.
                    </entry>
                </row>

                <row>
                    <entry>
                        <code>Zend_Ldap delete(string|Zend_Ldap_Dn $dn, boolean $recursively)</code>
                    </entry>

                    <entry>
                        Löscht den Eintrag der durch <varname>$dn</varname> identifiziert wird vom
                        <acronym>LDAP</acronym> Baum. Wirft eine
                        <classname>Zend_Ldap_Exception</classname> Exception wenn der Eintrag nicht
                        gelöscht werden kann. <varname>$recursively</varname> ist standardmäßig
                        <constant>FALSE</constant>. Auf <constant>TRUE</constant> gesetzt wird
                        das Löschen rekursiv durchgeführt und löscht effektiver Weise den kompletten
                        Unterbaum. Das Löschen wird fehlschlagen wenn
                        <varname>$recursively</varname> <constant>FALSE</constant> ist und der
                        <varname>$dn</varname> Eintrag kein Blatteintrag ist.
                    </entry>
                </row>

                <row>
                    <entry>
                        <code>Zend_Ldap moveToSubtree(string|Zend_Ldap_Dn $from, string|Zend_Ldap_Dn
                            $to, boolean $recursively, boolean $alwaysEmulate)</code>
                    </entry>

                    <entry>
                        Verschiebt den Eintrag der von <varname>$from</varname> identifiziert wird
                        auf einen Ort nach <varname>$to</varname> wobei sein <acronym>RDN</acronym>
                        unverändert bleibt. <varname>$recursively</varname> spezifiziert ob die
                        Operation rekursiv ausgeführt wird (standardmäßig
                        <constant>FALSE</constant>) so dass der Eintrag <varname>$from</varname> und
                        alle seine Untereinträge verschoben werden. Das Verschieben wird
                        fehlschlagen wenn <varname>$recursively</varname> <constant>FALSE</constant>
                        ist und der Eintrag <varname>$from</varname> kein Blatteintrag ist.
                        <varname>$alwaysEmulate</varname> kontrolliert ob die ext/ldap Funktion
                        <methodname>ldap_rename()</methodname> verwendet werden soll wenn Sie
                        vorhanden ist. Das kann nur für Blatteinträge funktionieren und für Server
                        und für ext/ldap die diese Funktion unterstützen. Auf
                        <constant>TRUE</constant> gesetzt wird immer eine emulierte Rename Operation
                        verwendet.

                        <note>
                            <para>
                                Alle Verschiebe-Operationen werden ausgeführt indem die
                                betreffenden Einträge im <acronym>LDAP</acronym> Baum kopiert und
                                anschließend gelöscht werden. Diese Operationen sind nicht
                                <emphasis>atomar</emphasis> so dass Fehler wärend der Operation zu
                                einem <emphasis>inkonsistenten</emphasis> Status am
                                <acronym>LDAP</acronym> Server führen. Das selbe gilt auch für alle
                                rekursiven Operationen. Auch diese sind in keiner Weise atomar. Man
                                sollte das immer beachten.
                            </para>
                        </note>
                    </entry>
                </row>

                <row>
                    <entry>
                        <code>Zend_Ldap move(string|Zend_Ldap_Dn $from, string|Zend_Ldap_Dn $to,
                            boolean $recursively, boolean $alwaysEmulate)</code>
                    </entry>

                    <entry>
                        Das ist ein Alias für <methodname>Zend_Ldap::rename()</methodname>.
                    </entry>
                </row>

                <row>
                    <entry>
                        <code>Zend_Ldap rename(string|Zend_Ldap_Dn $from, string|Zend_Ldap_Dn $to,
                            boolean $recursively, boolean $alwaysEmulate)</code>
                    </entry>

                    <entry>
                        Benennt den Eintrag der von <varname>$from</varname> bis
                        <varname>$to</varname> identifiziert wird um.
                        <varname>$recursively</varname> spezifiziert ob die Operation rekursiv
                        durchgeführt werden soll (standardmäßig <constant>FALSE</constant>) so das
                        der Eintrag <varname>$from</varname> und alle seine Abhängigkeiten
                        verschoben werden. Das Umbenennen wird fehlschlagen wenn
                        <varname>$recursively</varname> <constant>FALSE</constant> ist und der
                        Eintrag <varname>$from</varname> kein Blatteintrag ist.
                        <varname>$alwaysEmulate</varname> kontrolliert ob die ext/ldap Funktion
                        <methodname>ldap_rename()</methodname> verwendet werden soll wenn Sie
                        vorhanden ist. Das kann nur für Blatteinträge und für Server funktionieren
                        und für ext/ldap welches diese Funktion unterstützt. Wird es auf
                        <constant>TRUE</constant> gesetzt wird immer die emulierte rename
                        Operation verwendet.
                    </entry>
                </row>

                <row>
                    <entry>
                        <code>Zend_Ldap copyToSubtree(string|Zend_Ldap_Dn $from,
                            string|Zend_Ldap_Dn $to, boolean $recursively)</code>
                    </entry>

                    <entry>
                        Kopiert den Eintrag der von <varname>$from</varname> bis zu einem Ort
                        unterhalb von <varname>$to</varname> identifiziert wird und lässt dessen
                        <acronym>RDN</acronym> unverändert. <varname>$recursively</varname>
                        spezifiziert ob die Operation rekursiv durchgeführt werden soll
                        (standardmäßig <constant>FALSE</constant>) so das der Eintrag
                        <varname>$from</varname> und alle seine Abhängigkeiten kopiert werden.
                        Das Kopieren wird fehlschlagen wenn <varname>$recursively</varname>
                        <constant>FALSE</constant> ist und der Eintrag <varname>$from</varname>
                        kein Blatteintrag ist.
                    </entry>
                </row>

                <row>
                    <entry>
                        <code>Zend_Ldap copy(string|Zend_Ldap_Dn $from,
                            string|Zend_Ldap_Dn $to, boolean $recursively)</code>
                    </entry>

                    <entry>
                        Kopiert den Eintrag der von <varname>$from</varname> bis
                        <varname>$to</varname> identifiziert wird. <varname>$recursively</varname>
                        spezifiziert ob die Operation rekursiv durchgeführt werden soll
                        (standardmäßig <constant>FALSE</constant>) so das der Eintrag
                        <varname>$from</varname> und alle seine Abhängigkeiten kopiert werden.
                        Das Kopieren wird fehlschlagen wenn <varname>$recursively</varname>
                        <constant>FALSE</constant> ist und der Eintrag <varname>$from</varname>
                        kein Blatteintrag ist.
                    </entry>
                </row>

                <row>
                    <entry><code>Zend_Ldap_Node getNode(string|Zend_Ldap_Dn $dn)</code></entry>

                    <entry>
                        Gibt den <varname>$dn</varname> Eintrag zurück der in einem
                        <classname>Zend_Ldap_Node</classname> gewrappt ist.
                    </entry>
                </row>

                <row>
                    <entry><code>Zend_Ldap_Node getBaseNode()</code></entry>

                    <entry>
                        Gibt den Eintrag für den Basis DN <varname>$baseDn</varname> zurück
                        der in einer <classname>Zend_Ldap_Node</classname> gewrappt ist.
                    </entry>
                </row>

                <row>
                    <entry><code>Zend_Ldap_Node_RootDse getRootDse()</code></entry>
                    <entry>Gibt den RootDSE für den aktuellen Server zurück.</entry>
                </row>

                <row>
                    <entry><code>Zend_Ldap_Node_Schema getSchema()</code></entry>

                    <entry>
                        Gibt das <acronym>LDAP</acronym> Schema für den aktuellen Server zurück.
                    </entry>
                </row>
            </tbody>
        </tgroup>
    </table>

    <sect4 id="zend.ldap.api.reference.zend-ldap.zend-ldap-collection">
        <title>Zend_Ldap_Collection</title>

        <para>
            <classname>Zend_Ldap_Collection</classname> implementiert <code>Iterator</code> um
            das Durchlaufen von Einträgen zu erlauben indem <methodname>foreach()</methodname> und
            <code>Countable</code> verwendet werden welche in der Lage sind auf
            <methodname>count()</methodname> zu Antworten. Mit seiner geschützten
            <methodname>_createEntry()</methodname> Methode bietet es einen einfachen Punkt der
            Erweiterung für Entwickler welche die Notwendigkeit für eigene Ergebnisobjekte haben.
        </para>

        <table id="zend.ldap.api.reference.zend-ldap.zend-ldap-collection.table">
            <title>API für Zend_Ldap_Collection</title>

            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Methode</entry>
                        <entry>Beschreibung</entry>
                    </row>
                </thead>

                <tbody>
                    <row>
                        <entry>
                            <code>__construct(Zend_Ldap_Collection_Iterator_Interface
                                $iterator)</code>
                        </entry>

                        <entry>
                            Constructor. Der Constructor muß von einem
                            <classname>Zend_Ldap_Collection_Iterator_Interface</classname> angeboten
                            werden welches die echte Iteration der Resultate durchführt.
                            <classname>Zend_Ldap_Collection_Iterator_Default</classname> ist die
                            standardmäßige Implementation für die Interation durch ext/ldap
                            Ergebnisse.
                        </entry>
                    </row>

                    <row>
                        <entry><code>boolean close()</code></entry>

                        <entry>
                            Schließt den internen Iterator. Wird auch im Destructor aufgerufen.
                        </entry>
                    </row>

                    <row>
                        <entry><code>array toArray()</code></entry>
                        <entry>Gibt alle Einträge als Array zurück.</entry>
                    </row>

                    <row>
                        <entry><code>array getFirst()</code></entry>

                        <entry>
                            Gibt den ersten Eintrag der Collection zurück, oder
                            <constant>NULL</constant> wenn die Collection leer ist.
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </sect4>
</sect3>
